<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Configuration</name>
    </assembly>
    <members>
        <member name="T:Autofac.Configuration.AppSettingsModule">
            <summary>
            Configures properties on other modules using settings from the appSettings section of 
            the configuration file. These can then be provided to component constructors as parameters
            during registrations within the module.
            </summary>
            <remarks>
            The convention for the appSettings key is "Module.PropertyName" (e.g. Email.Pop3Host).
            Modules should be named with a "Module" suffix (e.g. EmailModule).
            </remarks>
        </member>
        <member name="M:Autofac.Configuration.AppSettingsModule.#ctor(System.Collections.Generic.IEnumerable{Autofac.Module})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.AppSettingsModule"/> class.
            </summary>
            <param name="modules">The modules whose properties should be configured 
            using settings from the appSettings section of the configuration file.</param>
        </member>
        <member name="M:Autofac.Configuration.AppSettingsModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <param name="builder">The builder through which components can be registered.</param>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
        </member>
        <member name="T:Autofac.Configuration.AssemblyNameConverter">
            <summary>
            Type converter used for converting assembly name strings to assembly and back.
            </summary>
            <remarks>
            <para>
            This type is used in configuration settings where an assembly name is provided and needs to be
            handled on the back end as a strongly-typed, loaded assembly rather than a string.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Configuration.AssemblyNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts an assembly name into an assembly.
            </summary>
            <param name="context">
            The configuration context.
            </param>
            <param name="culture">
            The configuration culture.
            </param>
            <param name="value">
            The assembly name to parse.
            </param>
            <returns>
            If <paramref name="value" /> is <see langword="null" />, empty, or whitespace this conversion
            will return <see langword="null" />. Otherwise, the assembly specified by the <paramref name="value" />
            will be loaded and returned.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.AssemblyNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an assembly into an assembly name.
            </summary>
            <param name="context">
            The configuration context.
            </param>
            <param name="culture">
            The configuration culture.
            </param>
            <param name="value">
            The assembly to convert.
            </param>
            <param name="destinationType">
            The destination type to which the assembly should be converted. (Ignored for configuration converters.)
            </param>
            <returns>
            If <paramref name="value"/> is <see langword="null"/> this conversion returns <see langword="null"/>;
            otherwise the return value will be the full name of the assembly.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="value"/> is not <see langword="null"/> and is not an <see cref="T:System.Reflection.Assembly"/>.
            </exception>
        </member>
        <member name="T:Autofac.Configuration.Elements.ComponentElement">
            <summary>
            Element describing a component registration.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Type">
            <summary>
            Gets the type of the component.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Service">
            <summary>
            Gets the service exposed by the component. For multiple-service components,
            use the services element instead.
            </summary>
            <value>The service.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.MemberOf">
            <summary>
            Allows the component to be added to another composite component.
            </summary>
            <value>The name of the composite component.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Name">
            <summary>
            Allows the component to be added to another composite component.
            </summary>
            <value>The name of the composite component.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.InstanceScope">
            <summary>
            Sets the scope of the component instances.
            </summary>
            <value>singleton (default,) factory or container.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Ownership">
            <summary>
            Sets the ownership over the component instances.
            </summary>
            <value>container (default) or external.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.InjectProperties">
            <summary>
            Sets up property injection for the component instances. This uses the
            OnActivated event so that circular dependencies can be handled.
            </summary>
            <value>never (default,) all, unset.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.AutoActivate">
            <summary>
            Sets up auto activation for the component instances.
            </summary>
            <value>no(default,) yes.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Services">
            <summary>
            Gets the services exposed by the component.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Parameters">
            <summary>
            Gets the parameters used to construct the component.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Properties">
            <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
            <value>The explicit properties.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ComponentElement.Metadata">
            <summary>
            Gets the extended properties associated with the registration.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="T:Autofac.Configuration.Elements.ComponentElementCollection">
            <summary>
            A collection of component elements.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.ConfigurationElementCollection`1">
            <summary>
            A collection of configuration elements.
            </summary>
            <typeparam name="TElementType">The type of the element type.</typeparam>
        </member>
        <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ConfigurationElementCollection`1"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement" /> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            true if the element exists in the collection; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="P:Autofac.Configuration.Elements.ConfigurationElementCollection`1.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
        </member>
        <member name="P:Autofac.Configuration.Elements.ConfigurationElementCollection`1.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.</returns>
        </member>
        <member name="M:Autofac.Configuration.Elements.ComponentElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ComponentElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Core.ConfigurationModule">
            <summary>
            Base class for a configuration parsing/execution module.
            </summary>
            <remarks>
            <para>
            Derived module classes are responsible for reading in configuration settings and populating
            the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler"/> property. The
            value there will be used in <see cref="M:Autofac.Configuration.Core.ConfigurationModule.Load(Autofac.ContainerBuilder)"/> to
            convert the configuration into container registrations.
            </para>
            </remarks>
            <seealso cref="T:Autofac.Configuration.ConfigurationSettingsReader"/>
            <seealso cref="T:Autofac.Configuration.XmlFileReader"/>
        </member>
        <member name="M:Autofac.Configuration.Core.ConfigurationModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Executes the conversion of configuration data into component registrations.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which registrations will be placed.
            </param>
            <remarks>
            <para>
            This override uses the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.ConfigurationRegistrar"/>
            to convert the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler"/>
            into component registrations in the provided <paramref name="builder"/>.
            </para>
            <para>
            If no specific <see cref="P:Autofac.Configuration.Core.ConfigurationModule.ConfigurationRegistrar"/>
            is set, the default <see cref="T:Autofac.Configuration.ConfigurationRegistrar"/> type will be used.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Autofac.Configuration.Core.ConfigurationModule.ConfigurationRegistrar">
            <summary>
            Gets or sets the configuration registrar.
            </summary>
            <value>
            An <see cref="T:Autofac.Configuration.IConfigurationRegistrar"/> that will be used as the
            strategy for converting the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler"/>
            into component registrations. If this value is <see langword="null"/>, the registrar
            will be a <see cref="T:Autofac.Configuration.ConfigurationRegistrar"/>.
            </value>
        </member>
        <member name="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler">
            <summary>
            Gets the section handler.
            </summary>
            <value>
            The <see cref="T:Autofac.Configuration.SectionHandler"/> that will be converted into
            component registrations in a container.
            </value>
        </member>
        <member name="T:Autofac.Configuration.ConfigurationRegistrar">
            <summary>
            Default service for adding configured registrations to a container.
            </summary>
            <remarks>
            <para>
            This default implementation of <see cref="T:Autofac.Configuration.IConfigurationRegistrar"/>
            processes <see cref="T:Autofac.Configuration.SectionHandler"/> contents into registrations into
            a <see cref="T:Autofac.ContainerBuilder"/>. You may derive and override to extend the functionality
            or you may implement your own <see cref="T:Autofac.Configuration.IConfigurationRegistrar"/>.
            </para>
            </remarks>
            <seealso cref="T:Autofac.Configuration.IConfigurationRegistrar"/>
        </member>
        <member name="T:Autofac.Configuration.IConfigurationRegistrar">
            <summary>
            A service for adding configured registrations to a container.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.IConfigurationRegistrar.RegisterConfigurationSection(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
            <summary>
            Registers the contents of a configuration section into a container builder.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> that should receive the configured registrations.
            </param>
            <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler"/> containing the configured registrations.
            </param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterConfigurationSection(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
            <summary>
            Registers the contents of a configuration section into a container builder.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> that should receive the configured registrations.
            </param>
            <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler"/> containing the configured registrations.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> or <paramref name="configurationSection"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
            This method is the primary entry point to configuration section registration. From here,
            the various modules, components, and referenced files get registered. You may override
            any of those behaviors for a custom registrar if you wish to extend registration behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterConfiguredComponents(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
            <summary>
            Registers individual configured components into a container builder.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> that should receive the configured registrations.
            </param>
            <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler"/> containing the configured registrations.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> or <paramref name="configurationSection"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if there is any issue in parsing the component configuration into registrations.
            </exception>
            <remarks>
            <para>
            This is where the individually configured component registrations get added to the <paramref name="builder"/>.
            The <see cref="P:Autofac.Configuration.SectionHandler.Components"/> collection from the <paramref name="configurationSection"/>
            get processed into individual registrations with associated lifetime scope, name, etc.
            </para>
            <para>
            You may influence the process by overriding this whole method or by overriding these individual
            parsing subroutines:
            </para>
            <list type="bullet">
            <item>
            <term><see cref="M:Autofac.Configuration.ConfigurationRegistrar.SetLifetimeScope``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)"/></term>
            </item>
            <item>
            <term><see cref="M:Autofac.Configuration.ConfigurationRegistrar.SetComponentOwnership``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)"/></term>
            </item>
            <item>
            <term><see cref="M:Autofac.Configuration.ConfigurationRegistrar.SetInjectProperties``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)"/></term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterConfiguredModules(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
            <summary>
            Registers individual configured modules into a container builder.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> that should receive the configured registrations.
            </param>
            <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler"/> containing the configured registrations.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> or <paramref name="configurationSection"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if there is any issue in parsing the module configuration into registrations.
            </exception>
            <remarks>
            <para>
            This is where the individually configured component registrations get added to the <paramref name="builder"/>.
            The <see cref="P:Autofac.Configuration.SectionHandler.Modules"/> collection from the <paramref name="configurationSection"/>
            get processed into individual modules which are instantiated and activated inside the <paramref name="builder"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterReferencedFiles(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
            <summary>
            Registers referenced configuration files into a container builder.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> that should receive the configured registrations.
            </param>
            <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler"/> containing the configured registrations.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> or <paramref name="configurationSection"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if there is any issue in processing the referenced files into registrations.
            </exception>
            <remarks>
            <para>
            This is where external files referenced in configuration get recursively loaded and added to the <paramref name="builder"/>.
            The <see cref="P:Autofac.Configuration.SectionHandler.Files"/> collection from the <paramref name="configurationSection"/>
            get processed into individual <see cref="T:Autofac.Configuration.SectionHandler"/> instances, each of which get
            registered with the <paramref name="builder"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.SetInjectProperties``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)">
            <summary>
            Sets the property injection mode for the component.
            </summary>
            <param name="registrar">
            The component registration on which property injection mode is being set.
            </param>
            <param name="injectProperties">
            The <see cref="T:System.String"/> configuration value associated with property
            injection for this component registration.
            </param>
            <remarks>
            <para>
            By default, this implementation understands <see langword="null"/>, empty,
            or <see langword="false"/> values (<c>false</c>, <c>0</c>, <c>no</c>)
            to mean "no property injection should occur" and <see langword="true"/>
            values (<c>true</c>, <c>1</c>, <c>yes</c>) to mean "property injection
            should occur."
            </para>
            <para>
            You may override this method to extend the available grammar for property injection settings.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the value for <paramref name="injectProperties"/> is not part of the
            recognized grammar.
            </exception>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.SetAutoActivate``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)">
            <summary>
            Sets the auto activation mode for the component.
            </summary>
            <param name="registrar">
            The component registration on which auto activation mode is being set.
            </param>
            <param name="autoActivate">
            The <see cref="T:System.String"/> configuration value associated with auto
            activate for this component registration.
            </param>
            <remarks>
            <para>
            By default, this implementation understands <see langword="null"/>, empty,
            or <see langword="false"/> values (<c>false</c>, <c>0</c>, <c>no</c>)
            to mean "no property injection should occur" and <see langword="true"/>
            values (<c>true</c>, <c>1</c>, <c>yes</c>) to mean "auto activation
            should occur."
            </para>
            <para>
            You may override this method to extend the available grammar for auto activation settings.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the value for <paramref name="autoActivate"/> is not part of the
            recognized grammar.
            </exception>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.SetComponentOwnership``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)">
            <summary>
            Sets the ownership model for the component.
            </summary>
            <param name="registrar">
            The component registration on which the ownership model is being set.
            </param>
            <param name="ownership">
            The <see cref="T:System.String"/> configuration value associated with the
            ownership model for this component registration.
            </param>
            <remarks>
            <para>
            By default, this implementation understands <see langword="null"/> or empty
            values to be "default ownership model"; <c>lifetime-scope</c> or <c>LifetimeScope</c>
            is "owned by lifetime scope"; and <c>external</c> or <c>ExternallyOwned</c> is
            "externally owned."
            </para>
            <para>
            You may override this method to extend the available grammar for component ownership.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the value for <paramref name="ownership"/> is not part of the
            recognized grammar.
            </exception>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.SetLifetimeScope``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)">
            <summary>
            Sets the lifetime scope for the component.
            </summary>
            <param name="registrar">
            The component registration on which the lifetime scope is being set.
            </param>
            <param name="lifetimeScope">
            The <see cref="T:System.String"/> configuration value associated with the
            lifetime scope for this component registration.
            </param>
            <remarks>
            <para>
            By default, this implementation understands <see langword="null"/> or empty
            values to be "default ownership model"; <c>single-instance</c> or <c>SingleInstance</c>
            is singleton; <c>instance-per-lifetime-scope</c>, <c>InstancePerLifetimeScope</c>, <c>per-lifetime-scope</c>,
            or <c>PerLifetimeScope</c> is one instance per nested lifetime scope; and <c>instance-per-dependency</c>,
            <c>InstancePerDependency</c>, <c>per-dependency</c>, or <c>PerDependency</c> is
            one instance for each resolution call.
            </para>
            <para>
            You may override this method to extend the available grammar for lifetime scope.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the value for <paramref name="lifetimeScope"/> is not part of the
            recognized grammar.
            </exception>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationRegistrar.LoadType(System.String,System.Reflection.Assembly)">
            <summary>
            Loads a type by name.
            </summary>
            <param name="typeName">
            Name of the <see cref="T:System.Type"/> to load. This may be a partial type name or a fully-qualified type name.
            </param>
            <param name="defaultAssembly">
            The default <see cref="T:System.Reflection.Assembly"/> to use in type resolution if <paramref name="typeName"/>
            is a partial type name.
            </param>
            <returns>
            The resolved <see cref="T:System.Type"/> based on the specified name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="typeName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="typeName"/> is empty.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the specified <paramref name="typeName"/> can't be resolved as a fully-qualified type name and
            isn't a partial type name for a <see cref="T:System.Type"/> found in the <paramref name="defaultAssembly"/>.
            </exception>
        </member>
        <member name="T:Autofac.Configuration.ConfigurationSettingsReader">
            <summary>
            Configures containers based upon <c>app.config</c>/<c>web.config</c> settings.
            </summary>
            <remarks>
            <para>
            This module type uses standard .NET application configuration format files to initialize configuration
            settings. By default the standard <c>app.config</c>/<c>web.config</c> is used with a configuration
            section named <c>autofac</c>, but you can use the various constructors to override the file location
            or configuration section name.
            </para>
            <para>
            If you are storing your configuration settings in a raw XML file (without the additional
            <c>&lt;configuration /&gt;</c> wrapper and section definitions you normally see in .NET application
            configuration) you can use the <see cref="T:Autofac.Configuration.XmlFileReader"/> module to specify
            the XML file location directly.
            </para>
            </remarks>
            <see cref="T:Autofac.Configuration.XmlFileReader"/>
            <see cref="T:Autofac.Configuration.SectionHandler"/>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/> class
            using the default application configuration file with a configuration section named <c>autofac</c>.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/> class
            using the default application configuration file and a named section.
            </summary>
            <param name="sectionName">
            The name of the configuration section corresponding to a <see cref="T:Autofac.Configuration.SectionHandler"/>.
            </param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/> class
            using a named configuration file and section.
            </summary>
            <param name="sectionName">
            The name of the configuration section corresponding to a <see cref="T:Autofac.Configuration.SectionHandler"/>.
            </param>
            <param name="configurationFile">
            The <c>app.config</c>/<c>web.config</c> format configuration file containing the
            named section.
            </param>
        </member>
        <member name="T:Autofac.Configuration.ConfigurationSettingsReaderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ArgumentMayNotBeEmpty">
            <summary>
              Looks up a localized string similar to The {0} may not be empty..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ConfigurationFileNotFound">
            <summary>
              Looks up a localized string similar to Unable to find specified configuration file..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.InitializeSectionHandler">
            <summary>
              Looks up a localized string similar to You must initialize the section handler on the module before executing the load operation..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.NoXmlInConfiguration">
            <summary>
              Looks up a localized string similar to No XML content nodes found in configuration. Check the XML reader to ensure configuration is in place..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.SectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration section &apos;{0}&apos; could not be read..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ServiceTypeMustBeSpecified">
            <summary>
              Looks up a localized string similar to If &apos;name&apos; is specified, &apos;service&apos; must also be specified (component name=&apos;{0}&apos;.).
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.TypeConversionUnsupported">
            <summary>
              Looks up a localized string similar to Unable to convert object of type &apos;{0}&apos; to type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.TypeConverterAttributeTypeNotConverter">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; specified in the TypeConverterAttribute is not a TypeConverter..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.TypeNotFound">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; could not be found. It may require assembly qualification, e.g. &quot;MyType, MyAssembly&quot;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedAutoActivate">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the auto-activate attribute. Valid values are &apos;yes&apos; and &apos;no&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedInjectProperties">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the inject-properties attribute. Valid values are &apos;yes&apos; and &apos;no&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedOwnership">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the ownership attribute. Valid values are &apos;lifetime-scope&apos; (the default) and &apos;external&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedScope">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the instance-scope attribute. Valid values are &apos;single-instance&apos;, &apos;per-dependency&apos; (the default) and &apos;per-lifetime-scope&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.DictionaryElementCollection">
            <summary>
            Holds a dictionary of values for those properties/parameters that are a dictionary
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.DictionaryElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.DictionaryElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.DictionaryElementCollection.DictionaryElementTypeConverter">
            <summary>
            Helps convert the configuration element into an actuall generic list
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.ListElementCollection">
            <summary>
            Holds a list of values for those properties/parameters that are enumerable
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.ListElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ListElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.ListElementCollection.ListElementTypeConverter">
            <summary>
            Helps convert the configuration element into an actual generic list
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Util.Enforce">
            <summary>
            Helper methods used throughout the codebase.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Util.Enforce.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="T:Autofac.Configuration.Elements.MetadataElement">
            <summary>
            Element describing a component property.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.MetadataElement.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.MetadataElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.MetadataElement.Type">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value. Defaults to string if not specified.</value>
        </member>
        <member name="T:Autofac.Configuration.Elements.MetadataElementCollection">
            <summary>
            Collection of extended property elements.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1">
            <summary>
            Base for multi-valued configuration elements.
            </summary>
            <typeparam name="TElementType"></typeparam>
        </member>
        <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementKey">The element key.</param>
        </member>
        <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            true if the element exists in the collection; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value></value>
            <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
        </member>
        <member name="P:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the TElementType at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Autofac.Configuration.Elements.MetadataElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.PropertyElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.FileElement">
            <summary>
            Element describing an additional configuration file.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.FileElement.Name">
            <summary>
            Gets the filename of the file.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.FileElement.Section">
            <summary>
            Gets the section name of the section in the configuration
            file.
            </summary>
            <value>The section name.</value>
        </member>
        <member name="T:Autofac.Configuration.Elements.FileElementCollection">
            <summary>
            A collection of file elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.FileElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.FileElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.ModuleElement">
            <summary>
            Element describing a module registration.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.ModuleElement.Type">
            <summary>
            Gets the type of the module. Must expose <see cref="T:Autofac.Core.IModule"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ModuleElement.Parameters">
            <summary>
            Gets the parameters used to construct the component.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ModuleElement.Properties">
            <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
            <value>The explicit properties.</value>
        </member>
        <member name="T:Autofac.Configuration.Elements.ModuleElementCollection">
            <summary>
            A collection of module elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.ModuleElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ModuleElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.ParameterElement">
            <summary>
            Element describing a component constructor parameter.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.ParameterElement.CoerceValue">
            <summary>
            Get the value of this element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autofac.Configuration.Elements.ParameterElement.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ParameterElement.Value">
            <summary>
            Gets the value used to set the parameter (type will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ParameterElement.List">
            <summary>
            If this parameter's value is a list of values
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.ParameterElement.Dictionary">
            <summary>
            If this parameter's value is a dictionary
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.ParameterElementCollection">
            <summary>
            A collection of parameter elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.ParameterElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ParameterElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.ParameterElementCollection.ToParameters">
            <summary>
            Convert to the Autofac parameter type.
            </summary>
            <returns>The parameters represented by this collection.</returns>
        </member>
        <member name="T:Autofac.Configuration.Elements.PropertyElement">
            <summary>
            Element describing a component property.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.PropertyElement.CoerceValue">
            <summary>
            Get the value of this element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autofac.Configuration.Elements.PropertyElement.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.PropertyElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.PropertyElement.List">
            <summary>
            If this property's value is a list of values
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.PropertyElement.Dictionary">
            <summary>
            If this property's value is a dictionary
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Elements.PropertyElementCollection">
            <summary>
            Collection of property elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.PropertyElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.PropertyElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.PropertyElementCollection.ToParameters">
            <summary>
            Convert to the Autofac parameter type.
            </summary>
            <returns>The parameters represented by this collection.</returns>
        </member>
        <member name="T:Autofac.Configuration.SectionHandler">
            <summary>
            Section handler for Autofac configuration.
            </summary>
            <remarks>
            <para>
            This configuration section is used for XML-based configuration of an Autofac
            container. While it is primarily used from inside <c>app.config</c> or <c>web.config</c>
            files, you may also use it with other arbitrary XML files via the
            <see cref="M:Autofac.Configuration.SectionHandler.Deserialize(System.Xml.XmlReader)"/> helper method.
            </para>
            </remarks>
        </member>
        <member name="F:Autofac.Configuration.SectionHandler.DefaultSectionName">
            <summary>
            The default section name that will be searched for.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.SectionHandler.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes a configuration section handler from a specific block of XML.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> used to read the XML configuration from the source.
            </param>
            <returns>
            A read/parsed <see cref="T:Autofac.Configuration.SectionHandler"/> based on the contents of the <paramref name="reader"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="reader"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if <paramref name="reader"/> does not contain XML configuration that can be parsed into
            a <see cref="T:Autofac.Configuration.SectionHandler"/>.
            </exception>
        </member>
        <member name="M:Autofac.Configuration.SectionHandler.Deserialize(System.String)">
            <summary>
            Deserializes a configuration section handler from an XML configuration file.
            </summary>
            <param name="configurationFile">The path to the configuration file to parse.</param>
            <returns>
            A read/parsed <see cref="T:Autofac.Configuration.SectionHandler"/> based on the contents of the <paramref name="configurationFile"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="configurationFile"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="configurationFile"/> is empty.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the file indicated by <paramref name="configurationFile"/> can't be found.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the configuration can't properly be deserialized from the file.
            </exception>
        </member>
        <member name="M:Autofac.Configuration.SectionHandler.Deserialize(System.String,System.String)">
            <summary>
            Deserializes a configuration section handler from an XML configuration file.
            </summary>
            <param name="configurationFile">The path to the configuration file to parse.</param>
            <param name="configurationSection">
            The name of the configuration section (if the <paramref name="configurationFile"/> is
            application configuration format); or <see langword="null"/> to use the default configuration
            section name <c>autofac</c> or try the <paramref name="configurationFile"/> as a raw XML file.
            </param>
            <returns>
            A read/parsed <see cref="T:Autofac.Configuration.SectionHandler"/> based on the contents of the <paramref name="configurationFile"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="configurationFile"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="configurationFile"/> is empty.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the file indicated by <paramref name="configurationFile"/> can't be found.
            </exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the configuration can't properly be deserialized from the file.
            </exception>
        </member>
        <member name="M:Autofac.Configuration.SectionHandler.NormalizeConfigurationFilePath(System.String)">
            <summary>
            Checks the validity of a configuration file path and converts relative paths to absolute.
            </summary>
            <param name="configurationFile">
            The file path to check/normalize.
            </param>
            <returns>
            If <paramref name="configurationFile"/> is an absolute path, it is returned unchanged; otherwise
            it is made absolute relative to the current configuration location.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="configurationFile"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="configurationFile"/> is empty.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the file indicated by <paramref name="configurationFile"/> can't be found.
            </exception>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.Components">
            <summary>
            Gets the components to be registered.
            </summary>
            <value>
            A <see cref="T:Autofac.Configuration.Elements.ComponentElementCollection"/> with the list
            of individual service components that should be registered.
            </value>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.DefaultAssembly">
            <summary>
            Gets the default assembly to search for types in when not explicitly
            provided with the type name.
            </summary>
            <value>
            An <see cref="T:System.Reflection.Assembly"/> that should be used as the default assembly
            in type searches.
            </value>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.Files">
            <summary>
            Gets additional configuration files.
            </summary>
            <value>
            A <see cref="T:Autofac.Configuration.Elements.FileElementCollection"/> with the list
            of external/referenced configuration files.
            </value>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.Modules">
            <summary>
            Gets the modules to be registered.
            </summary>
            <value>
            A <see cref="T:Autofac.Configuration.Elements.ModuleElementCollection"/> with the list
            of modules that should be registered.
            </value>
        </member>
        <member name="T:Autofac.Configuration.Elements.ServiceElement">
            <summary>
            Element describing a service exposed by a component.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.ServiceElement.Type">
            <summary>
            Gets the service type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Autofac.Configuration.Elements.ServiceElement.Name">
            <summary>
            Gets the service name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Autofac.Configuration.Elements.ServiceElementCollection">
            <summary>
            A collection of service elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Elements.ServiceElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ServiceElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.Util.TypeManipulation">
            <summary>
            Some handy type conversion routines.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Util.TypeManipulation.ChangeToCompatibleType(System.Object,System.Type,System.Reflection.ICustomAttributeProvider)">
            <summary>
            Does its best to convert whatever the value is into the destination
            type. Null in yields null out for value types and the default(T)
            for value types (this may change.)
            </summary>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <param name="memberInfo">Reflected property or member info for the destination, if available, for retrieving custom type converter information.</param>
            <returns>An object of the destination type.</returns>
        </member>
        <member name="T:Autofac.Configuration.Elements.ListItemElement">
            <summary>
            Configuration for values in a list
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.ListItemElement.Key">
            <summary>
            Gets the key to be set (will be converted.)
            </summary>
        </member>
        <member name="P:Autofac.Configuration.Elements.ListItemElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Autofac.Configuration.XmlFileReader">
            <summary>
            Configures containers based upon XML configuration settings that are not stored in .NET application configuration.
            </summary>
            <remarks>
            <para>
            This module type uses raw XML files to initialize configuration settings. These files are expected to have XML
            in them that can be deserialized into a <see cref="T:Autofac.Configuration.SectionHandler"/>. This XML is the same format
            as you would see in a standard <c>app.config</c>/<c>web.config</c> for Autofac, but doesn't require the additional
            configuration section definition or other .NET application configuration XML around it.
            </para>
            <para>
            If you are storing your configuration settings in a .NET application configuration file
            (<c>app.config</c>/<c>web.config</c>) you can use the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/>
            module to read the settings right out of the configuration file without having to manually parse the XML.
            </para>
            </remarks>
            <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/>
            <see cref="T:Autofac.Configuration.SectionHandler"/>
        </member>
        <member name="M:Autofac.Configuration.XmlFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.XmlFileReader"/> class
            using a specified XML configuration file.
            </summary>
            <param name="fileName">
            The name of the configuration file containing XML that can deserialize into a <see cref="T:Autofac.Configuration.SectionHandler"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="fileName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="fileName"/> is empty.
            </exception>
            <remarks>
            <para>
            Relative paths may be specified in relation to the current application folder (where you would normally
            find <c>app.config</c> or <c>web.config</c>).
            </para>
            </remarks>
        </member>
        <member name="T:Autofac.Configuration.Util.ReflectionExtensions">
            <summary>
            Extension methods for reflection-related types.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.Util.ReflectionExtensions.TryGetDeclaringProperty(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Maps from a property-set-value parameter to the declaring property.
            </summary>
            <param name="pi">Parameter to the property setter.</param>
            <param name="prop">The property info on which the setter is specified.</param>
            <returns>True if the parameter is a property setter.</returns>
        </member>
    </members>
</doc>
