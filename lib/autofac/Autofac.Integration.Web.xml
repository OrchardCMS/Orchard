<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Integration.Web</name>
    </assembly>
    <members>
        <member name="T:Autofac.Integration.Web.Forms.AttributedInjection">
            <summary>
            Injects dependencies into request handlers and pages that have been
            decorated with the [InjectProperties] or [InjectUnsetProperties]
            attributes.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.PageInjectionBehavior">
            <summary>
            Assists with the construction of page injectors.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.IInjectionBehavior">
            <summary>
            Provides dependency injection for a request handler.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.IInjectionBehavior.InjectDependencies(Autofac.IComponentContext,System.Object)">
            <summary>
            Inject dependencies in the required fashion.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.PageInjectionBehavior.InjectDependencies(Autofac.IComponentContext,System.Object)">
            <summary>
            Inject dependencies in the required fashion.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.PageInjectionBehavior.GetInjector(Autofac.IComponentContext)">
            <summary>
            Override to return a closure that injects properties into a target.
            </summary>
            <param name="context">The context.</param>
            <returns>The injector.</returns>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.PageInjectionBehavior.DoInjection(System.Func{System.Object,System.Object},System.Object)">
            <summary>
            Does the injection using a supplied injection function.
            </summary>
            <param name="injector">The injector.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.AttributedInjection.GetInjector(Autofac.IComponentContext)">
            <summary>
            Override to return a closure that injects properties into a target.
            </summary>
            <param name="context">The context.</param>
            <returns>The injector.</returns>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.AttributedInjectionModule">
            <summary>
            Injects dependencies into request handlers and pages that have been
            decorated with the [InjectProperties] or [InjectUnsetProperties]
            attributes.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.DependencyInjectionModule">
            <summary>
            Base for classes that inject dependencies into HTTP Handlers.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.DependencyInjectionModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.DependencyInjectionModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.DependencyInjectionModule.OnPreRequestHandlerExecute(System.Object,System.EventArgs)">
            <summary>
            Called before the request handler is executed so that dependencies
            can be injected.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.DependencyInjectionModule.GetInjectionBehavior(System.Web.IHttpHandler)">
            <summary>
            Internal for testability outside of a web application.
            </summary>
            <param name="handler"></param>
            <returns>The injection behavior.</returns>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.DependencyInjectionModule.GetInjectionBehaviorForHandlerType(System.Type)">
            <summary>
            Override to customize injection behavior based on HTTP Handler type.
            </summary>
            <param name="handlerType">Type of the handler.</param>
            <returns>The injection behavior.</returns>
        </member>
        <member name="P:Autofac.Integration.Web.Forms.DependencyInjectionModule.NoInjection">
            <summary>
            A behavior that does not inject dependencies.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.Forms.DependencyInjectionModule.PropertyInjection">
            <summary>
            A behavior that injects resolvable dependencies.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.Forms.DependencyInjectionModule.UnsetPropertyInjection">
            <summary>
            A behavior that injects unset, resolvable dependencies.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.AttributedInjectionModule.GetInjectionBehaviorForHandlerType(System.Type)">
            <summary>
            Override to customise injection behavior based on HTTP Handler type.
            </summary>
            <param name="handlerType">Type of the handler.</param>
            <returns>The injection behavior.</returns>
        </member>
        <member name="T:Autofac.Integration.Web.ContainerDisposalModule">
            <summary>
            HTTP Module that disposes of Autofac-created components when processing for
            a request completes.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerDisposalModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerDisposalModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerDisposalModule.OnEndRequest(System.Object,System.EventArgs)">
            <summary>
            Dispose of the per-request container.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Autofac.Integration.Web.ContainerDisposalModuleResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerDisposalModuleResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerDisposalModuleResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerDisposalModuleResources.ApplicationMustImplementAccessor">
            <summary>
              Looks up a localized string similar to This module requires that the HttpApplication (Global Application Class) implements IContainerProviderAccessor..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerDisposalModuleResources.ContainerProviderNull">
            <summary>
              Looks up a localized string similar to IContainerProviderAccessor.ContainerProvider returned null, which is invalid. If the container provider belongs to the HttpApplication subclass, ensure that it is a static variable..
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.ContainerProvider">
            <summary>
            Provides application-wide and per-request containers.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.IContainerProvider">
            <summary>
            Provides global and per-request Autofac containers in an
            ASP.NET application.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.IContainerProvider.EndRequestLifetime">
            <summary>
            Dispose of the current request's container, if it has been
            instantiated.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.IContainerProvider.ApplicationContainer">
            <summary>
            The global, application-wide container.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.IContainerProvider.RequestLifetime">
            <summary>
            The lifetime used to manage components for processing the
            current request.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProvider.#ctor(Autofac.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Web.ContainerProvider"/> class.
            </summary>
            <param name="applicationContainer">The application container.</param>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProvider.#ctor(Autofac.IContainer,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Web.ContainerProvider"/> class.
            </summary>
            <param name="applicationContainer">The application container.</param>
            <param name="requestLifetimeConfiguration">An action that will be executed when building
            the per-request lifetime. The components visible within the request can be
            customised here.</param>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProvider.EndRequestLifetime">
            <summary>
            Dispose of the current request's container, if it has been
            instantiated.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerProvider.ApplicationContainer">
            <summary>
            The global, application-wide container.
            </summary>
            <value></value>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerProvider.RequestLifetime">
            <summary>
            The container used to manage components for processing the
            current request.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Integration.Web.ContainerProviderContainer">
            <summary>
            Provides an implementation of <see cref="T:Autofac.IContainer"/> which uses the configured
            <see cref="T:Autofac.Integration.Web.IContainerProvider"/> to route calls to the current request container.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProviderContainer.#ctor(Autofac.Integration.Web.IContainerProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Autofac.Integration.Web.ContainerProviderContainer"/>.
            </summary>
            <param name="containerProvider">The <see cref="T:Autofac.Integration.Web.IContainerProvider"/> to use to retrieve the current request container.</param>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProviderContainer.BeginLifetimeScope">
            <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProviderContainer.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProviderContainer.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProviderContainer.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProviderContainer.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Integration.Web.ContainerProviderContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerProviderContainer.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerProviderContainer.Disposer">
            <summary>
            The disposer associated with this <see cref="T:Autofac.ILifetimeScope"/>.
            Component instances can be associated with it manually if required.
            </summary>
            <remarks>Typical usage does not require interaction with this member- it
            is used when extending the container.</remarks>
        </member>
        <member name="P:Autofac.Integration.Web.ContainerProviderContainer.Tag">
            <summary>
            The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.
            </summary>
            <remarks>Tags allow a level in the lifetime hierarchy to be identified.
            In most applications, tags are not necessary.</remarks>
            <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])"/>
        </member>
        <member name="E:Autofac.Integration.Web.ContainerProviderContainer.ChildLifetimeScopeBeginning">
            <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
        </member>
        <member name="E:Autofac.Integration.Web.ContainerProviderContainer.CurrentScopeEnding">
            <summary>
            Fired when this scope is ending.
            </summary>
        </member>
        <member name="E:Autofac.Integration.Web.ContainerProviderContainer.ResolveOperationBeginning">
            <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.DependencyInjectionAttribute">
            <summary>
            Base class for dependency injection attributes.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.DependencyInjectionModuleResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.Forms.DependencyInjectionModuleResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.Forms.DependencyInjectionModuleResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.Forms.DependencyInjectionModuleResources.ApplicationMustImplementAccessor">
            <summary>
              Looks up a localized string similar to This module requires that the HttpApplication (Global Application Class) implements IContainerProviderAccessor..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.Forms.DependencyInjectionModuleResources.ContainerProviderNull">
            <summary>
              Looks up a localized string similar to IContainerProviderAccessor.ContainerProvider returned null, which is invalid. If the container provider belongs to the HttpApplication subclass, ensure that it is a static variable..
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.IContainerProviderAccessor">
            <summary>
            Implemented on a type (i.e. HttpApplication) that maintains a container provider
            for injecting dependencies into web requests.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Web.IContainerProviderAccessor.ContainerProvider">
            <summary>
            Gets the container provider.
            </summary>
            <value>The container provider.</value>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.InjectPropertiesAttribute">
            <summary>
            Indicates that property injection should be performed on the instance when it is instantiated.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.InjectUnsetPropertiesAttribute">
            <summary>
            Indicates that property injection should be performed for null-valued 
            properties on the instance when it is instantiated.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.NoInjection">
            <summary>
            Does not inject properties.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.NoInjection.InjectDependencies(Autofac.IComponentContext,System.Object)">
            <summary>
            Inject dependencies in the required fashion.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.PropertyInjection">
            <summary>
            Injects any resolvable properties.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.PropertyInjection.GetInjector(Autofac.IComponentContext)">
            <summary>
            Override to return a closure that injects properties into a target.
            </summary>
            <param name="context">The context.</param>
            <returns>The injector.</returns>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.PropertyInjectionModule">
            <summary>
            Dependency injection module that will always inject any resolvable
            properties.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.PropertyInjectionModule.GetInjectionBehaviorForHandlerType(System.Type)">
            <summary>
            Override to customise injection behavior based on HTTP Handler type.
            </summary>
            <param name="handlerType">Type of the handler.</param>
            <returns>The injection behavior.</returns>
        </member>
        <member name="T:Autofac.Integration.Web.RegistrationExtensions">
            <summary>
            Extends registration syntax for common web scenarios.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.RegistrationExtensions.InstancePerHttpRequest``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Object[])">
            <summary>
            Share one instance of the component within the context of a single
            HTTP request.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">The registration to configure.</param>
            <param name="lifetimeScopeTags">Additional tags applied for matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Autofac.Integration.Web.RegistrationExtensions.CacheInSession``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Cache instances in the web session. This implies external ownership (disposal is not
            available.) All dependencies must also have external ownership.
            </summary>
            <remarks>
            It is strongly recommended that components cached per-session do not take dependencies on
            other services.
            </remarks>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">The registration to configure.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.UnsetPropertyInjection">
            <summary>
            Injects resolvable properties that do not already have a value.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.UnsetPropertyInjection.GetInjector(Autofac.IComponentContext)">
            <summary>
            Override to return a closure that injects properties into a target.
            </summary>
            <param name="context">The context.</param>
            <returns>The injector.</returns>
        </member>
        <member name="T:Autofac.Integration.Web.Forms.UnsetPropertyInjectionModule">
            <summary>
            Dependency injection module that will always inject any resolvable
            properties.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Web.Forms.UnsetPropertyInjectionModule.GetInjectionBehaviorForHandlerType(System.Type)">
            <summary>
            Override to customise injection behavior based on HTTP Handler type.
            </summary>
            <param name="handlerType">Type of the handler.</param>
            <returns>The injection behavior.</returns>
        </member>
        <member name="T:Autofac.Integration.Web.WebLifetime">
            <summary>
            Constants used to tag liftime scopes within standard Autofac web applications.
            </summary>
        </member>
        <member name="F:Autofac.Integration.Web.WebLifetime.Application">
            <summary>
            Application lifetime
            </summary>
        </member>
    </members>
</doc>
