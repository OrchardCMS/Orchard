@using Orchard.ContentManagement
@using Orchard.Environment.Descriptor.Models
@using Orchard.Localization
@using TinyMce.Models
@using TinyMce.Services

@{
    var shellDescriptor = WorkContext.Resolve<ShellDescriptor>();
    var tinyMceSettingsPart = WorkContext.CurrentSite.As<TinyMceSettingsPart>();
    var tinyMceSettings = tinyMceSettingsPart != null ? tinyMceSettingsPart.TinyMceSettingsOverride : string.Empty;
    var loadSettings = shellDescriptor.Features.Any(x => x.Name == "TinyMce.Settings") && !string.IsNullOrWhiteSpace(tinyMceSettings);
}

<script type="text/javascript">
    var mediaPickerEnabled = @(shellDescriptor.Features.Any(x => x.Name == "Orchard.MediaPicker") ? "true" : "false");
    var mediaLibraryEnabled = @(shellDescriptor.Features.Any(x => x.Name == "Orchard.MediaLibrary") ? "true" : "false");
    var directionality = '@WorkContext.GetTextDirection((IContent)Model.ContentItem)';
    var language = '@Model.Language';
    var autofocus = "@(Model.AutoFocus == true ? ViewData.TemplateInfo.GetFullHtmlFieldId("Text") : null)";
</script>

@{
    if (!loadSettings) {
        Script.Require("OrchardTinyMce");
    }
    else {
        Script.Require("TinyMce");
        using (Script.Foot()) {
            <script type="text/javascript">
            @Html.Raw(tinyMceSettings)
            </script>
        }
    }
    Script.Require("jQueryColorBox");
    Style.Require("jQueryColorBox");
}

@Html.TextArea("Text", (string)Model.Text, 25, 80,
     new Dictionary<string,object> {
        {"class", "html tinymce"},
        {"data-mediapicker-uploadpath",Model.AddMediaPath},
        {"data-mediapicker-title",T("Insert/Update Media")},
        {"style", "width:100%"}
     })
