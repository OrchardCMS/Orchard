@using Orchard.ContentTypes.Extensions
@model Orchard.ContentTypes.ViewModels.EditPlacementViewModel
@{
    Style.Require("ContentTypesAdmin");
    Script.Require("jQueryUI_Sortable");
    Layout.Title = T("Edit Placement - {0}", Model.ContentTypeDefinition.DisplayName).ToString();
    Html.AdminBreadcrumbs(new { CurrentContentType = Model.ContentTypeDefinition });

    var hiddenShapes = Model.AllPlacements.Where(x => String.IsNullOrEmpty(x.PlacementSettings.Zone) && (String.IsNullOrWhiteSpace(x.PlacementSettings.Position) || x.PlacementSettings.Position == "-"));
}

<div class="panel panel-default">
    <div class="panel-body">
        <div id="save-message" class="alert alert-warning">
            @T("You need to hit \"Save\" in order to save your changes.")
        </div>

        @using (Html.BeginFormAntiForgeryPost()) {
            @Html.ValidationSummary()


            <ul id="placement" class="list-unstyled">
                @for (int i = 0; i < Model.AllPlacements.Count; i++) {

                    var placement = Model.AllPlacements[i].PlacementSettings;

                    if (placement.Zone != "Content") {
                        continue;
                    }

                    <li data-shape-type="@placement.ShapeType" data-shape-differentiator="@placement.Differentiator" data-shape-zone="Content" data-shape-position="@placement.Position">
                        <div class="shape-type"><h3>@placement.ShapeType @placement.Differentiator</h3></div>
                        <div class="shape-editor">
                            @try {
                                @Display(Model.AllPlacements[i].Shape)
                            }
                            catch {
                            }
                        </div>

                        @*  @shape.Position @(Model.PlacementSettings.Any(x => x.Equals(shape)))*@
                        @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.ShapeType, new { @class = "type" })
                        @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.Differentiator, new { @class = "differentiator" })
                        @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.Zone, new { @class = "zone" })
                        @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.Position, new { @class = "position" })
                    </li>
                }
            </ul>

            <fieldset class="action">
                <button class="btn btn-primary" type="submit" name="submit.Save" value="Save"><i class="fa fa-save"></i> @T("Save")</button>
                <button class="btn btn-default" type="submit" name="submit.Restore" value="Restore" itemprop="RemoveUrl" data-message="@T("Are you sure you want to restore these placements?")"><i class="fa fa-undo"></i> @T("Restore")</button>
            </fieldset>

        }
    </div>
</div>
@using(Script.Foot()) {
    <script type="text/javascript">
            //<![CDATA[
            (function ($) {

                var assignPositions = function () {
                    var position = 0;
                    $('.type').each(function () {
                        var input = $(this);
                        reAssignIdName(input, position);  // type

                        input = input.next();
                        reAssignIdName(input, position);  // differentiator

                        input = input.next();
                        reAssignIdName(input, position);  // zone

                        input = input.next();
                        reAssignIdName(input, position);  // position

                        input.val(++position);
                    });
                };

                var reAssignIdName = function (input, pos) {
                    var name = input.attr('name');
                    input.attr('name', name.replace(new RegExp("\\[.*\\]", 'gi'), '[' + pos + ']'));

                    var id = input.attr('id');
                    input.attr('id', id.replace(new RegExp('_.*__', 'i'), '_' + pos + '__'));
                };

                assignPositions();

                var startPos;

                $('#placement').sortable({
                    placeholder: "placement-placeholder",
                    start: function (event, ui) {
                        var self = $(ui.item);
                        startPos = self.prevAll().size();
                    },
                    stop: function (event, ui) {
                        assignPositions();
                        $('#save-message').show();

                    }
                });

                $('.shape-editor *').attr('disabled', 'disabled');

                $("#placement").disableSelection();

            })(jQuery);
            //]]>
        </script>
}
