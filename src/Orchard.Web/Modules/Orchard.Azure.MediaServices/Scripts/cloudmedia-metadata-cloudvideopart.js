/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

/// <reference path="Typings/jquery.d.ts" />
(function ($) {
    var hasFocus = function (videoId) {
        var focusedVideoId = $("#media-library-main-list li.has-focus .media-thumbnail-cloud-video").data("id");
        return focusedVideoId == videoId;
    };
    var updateUploadProgressLabel = function () {
        var containers = $("#media-library-main-editor-focus .properties");
        containers.each(function () {
            var container = $(this);
            var statusWrapper = container.find(".upload-status-wrapper");
            var publicationStatusLabel = container.find(".publication-status span");
            var uploadStatusLabel = container.find(".upload-status-text");
            var progressLabel = container.find(".upload-progress-value");
            var uploadProgressContainer = $(".upload-progress-status");
            var statusUrl = statusWrapper.data("status-url");
            var status = statusWrapper.data("upload-status");
            var published = statusWrapper.data("published");
            var videoId = statusWrapper.data("video-id");
            if (status == "Uploaded" && published) {
                return;
            }
            var update = function () {
                if (!hasFocus(videoId)) {
                    return;
                }
                $.ajax({
                    url: statusUrl,
                    cache: false
                }).done(function (data) {
                    progressLabel.text(data.uploadState.percentComplete + "%");
                    uploadStatusLabel.text(data.uploadState.status);
                    publicationStatusLabel.text(data.published ? statusWrapper.data("published-text") : statusWrapper.data("draft-text"));
                    if (data.published) {
                        var mediathumbnail = $(".media-thumbnail-cloud-video[data-id=" + videoId + "]");
                        mediathumbnail.parents("li:first").find(".publication-status").hide();
                    }
                    if (data.uploadState.status == "Uploaded") {
                        uploadProgressContainer.hide();
                        return;
                    }
                    else if (data.uploadState.status == "Uploading") {
                        uploadProgressContainer.show();
                    }
                    window.setTimeout(update, 5000);
                });
            };
            update();
        });
    };
    updateUploadProgressLabel();
})(jQuery);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkbWVkaWEtbWV0YWRhdGEtY2xvdWR2aWRlb3BhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBNEM7QUFFNUMsQ0FBQyxVQUFDLENBQWdCO0lBQ2QsSUFBSSxRQUFRLEdBQUcsVUFBQyxPQUFlO1FBQzNCLElBQUksY0FBYyxHQUFXLENBQUMsQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoSCxNQUFNLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQztJQUNyQyxDQUFDLENBQUM7SUFFRixJQUFJLHlCQUF5QixHQUFHO1FBQzVCLElBQUksVUFBVSxHQUFXLENBQUMsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBRTNFLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDWixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEIsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQzdELElBQUksc0JBQXNCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ3hFLElBQUksaUJBQWlCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQzlELElBQUksYUFBYSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUM3RCxJQUFJLHVCQUF1QixHQUFHLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzNELElBQUksU0FBUyxHQUFXLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDekQsSUFBSSxNQUFNLEdBQVcsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN6RCxJQUFJLFNBQVMsR0FBVyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3hELElBQUksT0FBTyxHQUFXLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFckQsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLFVBQVUsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLENBQUM7WUFDWCxDQUFDO1lBRUQsSUFBSSxNQUFNLEdBQUc7Z0JBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQixNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFDRCxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUNILEdBQUcsRUFBRSxTQUFTO29CQUNkLEtBQUssRUFBRSxLQUFLO2lCQUNmLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFVO29CQUNmLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEdBQUcsR0FBRyxDQUFDLENBQUM7b0JBQzNELGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNoRCxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUV0SCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzt3QkFDakIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLHVDQUF1QyxHQUFHLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQzt3QkFDaEYsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDMUUsQ0FBQztvQkFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDO3dCQUN4Qyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQzt3QkFDL0IsTUFBTSxDQUFDO29CQUNYLENBQUM7b0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7d0JBQ2hELHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDO29CQUNuQyxDQUFDO29CQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNwQyxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7SUFFRix5QkFBeUIsRUFBRSxDQUFDO0FBQ2hDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDIiwiZmlsZSI6ImNsb3VkbWVkaWEtbWV0YWRhdGEtY2xvdWR2aWRlb3BhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiVHlwaW5ncy9qcXVlcnkuZC50c1wiIC8+XHJcblxyXG4oKCQgOiBKUXVlcnlTdGF0aWMpID0+IHtcclxuICAgIHZhciBoYXNGb2N1cyA9ICh2aWRlb0lkOiBudW1iZXIpID0+IHtcclxuICAgICAgICB2YXIgZm9jdXNlZFZpZGVvSWQ6IG51bWJlciA9ICQoXCIjbWVkaWEtbGlicmFyeS1tYWluLWxpc3QgbGkuaGFzLWZvY3VzIC5tZWRpYS10aHVtYm5haWwtY2xvdWQtdmlkZW9cIikuZGF0YShcImlkXCIpO1xyXG4gICAgICAgIHJldHVybiBmb2N1c2VkVmlkZW9JZCA9PSB2aWRlb0lkO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdXBkYXRlVXBsb2FkUHJvZ3Jlc3NMYWJlbCA9ICgpID0+IHtcclxuICAgICAgICB2YXIgY29udGFpbmVyczogSlF1ZXJ5ID0gJChcIiNtZWRpYS1saWJyYXJ5LW1haW4tZWRpdG9yLWZvY3VzIC5wcm9wZXJ0aWVzXCIpO1xyXG5cclxuICAgICAgICBjb250YWluZXJzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIHN0YXR1c1dyYXBwZXIgPSBjb250YWluZXIuZmluZChcIi51cGxvYWQtc3RhdHVzLXdyYXBwZXJcIik7XHJcbiAgICAgICAgICAgIHZhciBwdWJsaWNhdGlvblN0YXR1c0xhYmVsID0gY29udGFpbmVyLmZpbmQoXCIucHVibGljYXRpb24tc3RhdHVzIHNwYW5cIik7XHJcbiAgICAgICAgICAgIHZhciB1cGxvYWRTdGF0dXNMYWJlbCA9IGNvbnRhaW5lci5maW5kKFwiLnVwbG9hZC1zdGF0dXMtdGV4dFwiKTtcclxuICAgICAgICAgICAgdmFyIHByb2dyZXNzTGFiZWwgPSBjb250YWluZXIuZmluZChcIi51cGxvYWQtcHJvZ3Jlc3MtdmFsdWVcIik7XHJcbiAgICAgICAgICAgIHZhciB1cGxvYWRQcm9ncmVzc0NvbnRhaW5lciA9ICQoXCIudXBsb2FkLXByb2dyZXNzLXN0YXR1c1wiKTtcclxuICAgICAgICAgICAgdmFyIHN0YXR1c1VybDogc3RyaW5nID0gc3RhdHVzV3JhcHBlci5kYXRhKFwic3RhdHVzLXVybFwiKTtcclxuICAgICAgICAgICAgdmFyIHN0YXR1czogc3RyaW5nID0gc3RhdHVzV3JhcHBlci5kYXRhKFwidXBsb2FkLXN0YXR1c1wiKTtcclxuICAgICAgICAgICAgdmFyIHB1Ymxpc2hlZDogc3RyaW5nID0gc3RhdHVzV3JhcHBlci5kYXRhKFwicHVibGlzaGVkXCIpO1xyXG4gICAgICAgICAgICB2YXIgdmlkZW9JZDogbnVtYmVyID0gc3RhdHVzV3JhcHBlci5kYXRhKFwidmlkZW8taWRcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09IFwiVXBsb2FkZWRcIiAmJiBwdWJsaXNoZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzRm9jdXModmlkZW9JZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogc3RhdHVzVXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSkuZG9uZSgoZGF0YSA6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzTGFiZWwudGV4dChkYXRhLnVwbG9hZFN0YXRlLnBlcmNlbnRDb21wbGV0ZSArIFwiJVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB1cGxvYWRTdGF0dXNMYWJlbC50ZXh0KGRhdGEudXBsb2FkU3RhdGUuc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICBwdWJsaWNhdGlvblN0YXR1c0xhYmVsLnRleHQoZGF0YS5wdWJsaXNoZWQgPyBzdGF0dXNXcmFwcGVyLmRhdGEoXCJwdWJsaXNoZWQtdGV4dFwiKSA6IHN0YXR1c1dyYXBwZXIuZGF0YShcImRyYWZ0LXRleHRcIikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5wdWJsaXNoZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lZGlhdGh1bWJuYWlsID0gJChcIi5tZWRpYS10aHVtYm5haWwtY2xvdWQtdmlkZW9bZGF0YS1pZD1cIiArIHZpZGVvSWQgKyBcIl1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhdGh1bWJuYWlsLnBhcmVudHMoXCJsaTpmaXJzdFwiKS5maW5kKFwiLnB1YmxpY2F0aW9uLXN0YXR1c1wiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS51cGxvYWRTdGF0ZS5zdGF0dXMgPT0gXCJVcGxvYWRlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZFByb2dyZXNzQ29udGFpbmVyLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS51cGxvYWRTdGF0ZS5zdGF0dXMgPT0gXCJVcGxvYWRpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRQcm9ncmVzc0NvbnRhaW5lci5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh1cGRhdGUsIDUwMDApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB1cGRhdGVVcGxvYWRQcm9ncmVzc0xhYmVsKCk7XHJcbn0pKGpRdWVyeSk7Il19
