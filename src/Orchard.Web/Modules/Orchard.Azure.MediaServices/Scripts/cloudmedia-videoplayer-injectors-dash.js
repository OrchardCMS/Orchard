/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

/// <reference path="Typings/jquery.d.ts" />
/// <reference path="Typings/underscore.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Orchard;
(function (Orchard) {
    var Azure;
    (function (Azure) {
        var MediaServices;
        (function (MediaServices) {
            var VideoPlayer;
            (function (VideoPlayer) {
                var Injectors;
                (function (Injectors) {
                    var DashInjector = (function (_super) {
                        __extends(DashInjector, _super);
                        function DashInjector() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        DashInjector.prototype.isSupported = function () {
                            var videoElement = document.createElement("video");
                            var hasH264 = videoElement && videoElement.canPlayType && !!videoElement.canPlayType("video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"");
                            var hasMse = MediaSource && MediaSource.isTypeSupported && MediaSource.isTypeSupported("video/mp4; codecs=\"avc1.4d404f\"");
                            var hasDynamicAssets = _(this.filteredAssets().DynamicVideoAssets).any();
                            this.debug("Browser supports HTML5 video and the H264 and AAC codecs: {0}", hasH264);
                            this.debug("Browser supports the Media Source Extensions API: {0}", hasMse);
                            this.debug("Item has at least one dynamic video asset: {0}", hasDynamicAssets);
                            var result = hasH264 && hasMse && hasDynamicAssets;
                            this.debug("isSupported() returns {0}.", result);
                            return result;
                        };
                        DashInjector.prototype.inject = function () {
                            var _this = this;
                            var firstDynamicAsset = _(this.filteredAssets().DynamicVideoAssets).first();
                            var firstThumbnailAsset = _(this.filteredAssets().ThumbnailAssets).first();
                            this.debug("Injecting player into element '{0}'.", this.container.id);
                            var videoElement = $("<video controls>").attr("width", this.playerWidth).attr("height", this.playerHeight);
                            if (firstThumbnailAsset)
                                videoElement.attr("poster", firstThumbnailAsset.MainFileUrl);
                            videoElement.appendTo(this.container);
                            var url = firstDynamicAsset.MpegDashUrl;
                            var context = new Dash.di.DashContext();
                            var player = new MediaPlayer(context);
                            player.startup();
                            player.addEventListener("error", function (e) {
                                _this.debug("Error of type '{0}' detected; cleaning up container and faulting this injector.", e.error);
                                // TODO: Be a little more selective here, don't fail on any error.
                                _this.fault();
                            });
                            player.debug.setLogToBrowserConsole(false);
                            player.attachView(videoElement[0]);
                            player.attachSource(url);
                            player.setAutoPlay(this.autoPlay);
                        };
                        DashInjector.prototype.debug = function (message) {
                            var args = [];
                            for (var _i = 1; _i < arguments.length; _i++) {
                                args[_i - 1] = arguments[_i];
                            }
                            _super.prototype.debug.call(this, "DashInjector: " + message, args);
                        };
                        return DashInjector;
                    }(Injectors.Injector));
                    Injectors.DashInjector = DashInjector;
                })(Injectors = VideoPlayer.Injectors || (VideoPlayer.Injectors = {}));
            })(VideoPlayer = MediaServices.VideoPlayer || (MediaServices.VideoPlayer = {}));
        })(MediaServices = Azure.MediaServices || (Azure.MediaServices = {}));
    })(Azure = Orchard.Azure || (Orchard.Azure = {}));
})(Orchard || (Orchard = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItaW5qZWN0b3JzLWRhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBNEM7QUFDNUMsZ0RBQWdEOzs7Ozs7QUFFaEQsSUFBTyxPQUFPLENBcUViO0FBckVELFdBQU8sT0FBTztJQUFDLElBQUEsS0FBSyxDQXFFbkI7SUFyRWMsV0FBQSxLQUFLO1FBQUMsSUFBQSxhQUFhLENBcUVqQztRQXJFb0IsV0FBQSxhQUFhO1lBQUMsSUFBQSxXQUFXLENBcUU3QztZQXJFa0MsV0FBQSxXQUFXO2dCQUFDLElBQUEsU0FBUyxDQXFFdkQ7Z0JBckU4QyxXQUFBLFNBQVM7b0JBa0JwRDt3QkFBa0MsZ0NBQVE7d0JBQTFDOzt3QkFrREEsQ0FBQzt3QkFoRFUsa0NBQVcsR0FBbEI7NEJBQ0ksSUFBSSxZQUFZLEdBQXFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7NEJBRXJFLElBQUksT0FBTyxHQUFHLFlBQVksSUFBSSxZQUFZLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7NEJBQ3JJLElBQUksTUFBTSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsZUFBZSxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsbUNBQW1DLENBQUMsQ0FBQzs0QkFDNUgsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7NEJBRXpFLElBQUksQ0FBQyxLQUFLLENBQUMsK0RBQStELEVBQUUsT0FBTyxDQUFDLENBQUM7NEJBQ3JGLElBQUksQ0FBQyxLQUFLLENBQUMsdURBQXVELEVBQUUsTUFBTSxDQUFDLENBQUM7NEJBQzVFLElBQUksQ0FBQyxLQUFLLENBQUMsZ0RBQWdELEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzs0QkFFL0UsSUFBSSxNQUFNLEdB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b3JzLWRhc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiVHlwaW5ncy9qcXVlcnkuZC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJUeXBpbmdzL3VuZGVyc2NvcmUuZC50c1wiIC8+XHJcblxyXG5tb2R1bGUgT3JjaGFyZC5BenVyZS5NZWRpYVNlcnZpY2VzLlZpZGVvUGxheWVyLkluamVjdG9ycyB7XHJcblxyXG4gICAgaW1wb3J0IERhdGEgPSBPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuRGF0YTtcclxuXHJcbiAgICBkZWNsYXJlIHZhciBEYXNoOiBhbnk7XHJcbiAgICBkZWNsYXJlIHZhciBNZWRpYVBsYXllcjogYW55O1xyXG5cclxuICAgIGludGVyZmFjZSBQbGF5ZXJFcnJvckV2ZW50QXJncyB7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nO1xyXG4gICAgICAgIGVycm9yOiBzdHJpbmc7XHJcbiAgICAgICAgZXZlbnQ6IHtcclxuICAgICAgICAgICAgaWQ/OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIHJlcXVlc3Q/OiBYTUxIdHRwUmVxdWVzdDtcclxuICAgICAgICAgICAgbWFuaWZlc3Q/OiBhbnk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBEYXNoSW5qZWN0b3IgZXh0ZW5kcyBJbmplY3RvciB7XHJcblxyXG4gICAgICAgIHB1YmxpYyBpc1N1cHBvcnRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdmFyIHZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBoYXNIMjY0ID0gdmlkZW9FbGVtZW50ICYmIHZpZGVvRWxlbWVudC5jYW5QbGF5VHlwZSAmJiAhIXZpZGVvRWxlbWVudC5jYW5QbGF5VHlwZShcInZpZGVvL21wNDsgY29kZWNzPVxcXCJhdmMxLjQyMDAxRSwgbXA0YS40MC4yXFxcIlwiKTtcclxuICAgICAgICAgICAgdmFyIGhhc01zZSA9IE1lZGlhU291cmNlICYmIE1lZGlhU291cmNlLmlzVHlwZVN1cHBvcnRlZCAmJiBNZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoXCJ2aWRlby9tcDQ7IGNvZGVjcz1cXFwiYXZjMS40ZDQwNGZcXFwiXCIpO1xyXG4gICAgICAgICAgICB2YXIgaGFzRHluYW1pY0Fzc2V0cyA9IF8odGhpcy5maWx0ZXJlZEFzc2V0cygpLkR5bmFtaWNWaWRlb0Fzc2V0cykuYW55KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRlYnVnKFwiQnJvd3NlciBzdXBwb3J0cyBIVE1MNSB2aWRlbyBhbmQgdGhlIEgyNjQgYW5kIEFBQyBjb2RlY3M6IHswfVwiLCBoYXNIMjY0KTtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhcIkJyb3dzZXIgc3VwcG9ydHMgdGhlIE1lZGlhIFNvdXJjZSBFeHRlbnNpb25zIEFQSTogezB9XCIsIGhhc01zZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVidWcoXCJJdGVtIGhhcyBhdCBsZWFzdCBvbmUgZHluYW1pYyB2aWRlbyBhc3NldDogezB9XCIsIGhhc0R5bmFtaWNBc3NldHMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGhhc0gyNjQgJiYgaGFzTXNlICYmIGhhc0R5bmFtaWNBc3NldHM7XHJcbiAgICAgICAgICAgIHRoaXMuZGVidWcoXCJpc1N1cHBvcnRlZCgpIHJldHVybnMgezB9LlwiLCByZXN1bHQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbmplY3QoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdER5bmFtaWNBc3NldCA9IF8odGhpcy5maWx0ZXJlZEFzc2V0cygpLkR5bmFtaWNWaWRlb0Fzc2V0cykuZmlyc3QoKTtcclxuICAgICAgICAgICAgdmFyIGZpcnN0VGh1bWJuYWlsQXNzZXQgPSBfKHRoaXMuZmlsdGVyZWRBc3NldHMoKS5UaHVtYm5haWxBc3NldHMpLmZpcnN0KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRlYnVnKFwiSW5qZWN0aW5nIHBsYXllciBpbnRvIGVsZW1lbnQgJ3swfScuXCIsIHRoaXMuY29udGFpbmVyLmlkKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB2aWRlb0VsZW1lbnQgPSAkKFwiPHZpZGVvIGNvbnRyb2xzPlwiKS5hdHRyKFwid2lkdGhcIiwgdGhpcy5wbGF5ZXJXaWR0aCkuYXR0cihcImhlaWdodFwiLCB0aGlzLnBsYXllckhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmIChmaXJzdFRodW1ibmFpbEFzc2V0KVxyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50LmF0dHIoXCJwb3N0ZXJcIiwgZmlyc3RUaHVtYm5haWxBc3NldC5NYWluRmlsZVVybCk7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5hcHBlbmRUbyh0aGlzLmNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICB2YXIgdXJsID0gZmlyc3REeW5hbWljQXNzZXQuTXBlZ0Rhc2hVcmw7XHJcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IERhc2guZGkuRGFzaENvbnRleHQoKTtcclxuICAgICAgICAgICAgdmFyIHBsYXllciA9IG5ldyBNZWRpYVBsYXllcihjb250ZXh0KTtcclxuICAgICAgICAgICAgcGxheWVyLnN0YXJ0dXAoKTtcclxuXHJcbiAgICAgICAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKGU6IFBsYXllckVycm9yRXZlbnRBcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnKFwiRXJyb3Igb2YgdHlwZSAnezB9JyBkZXRlY3RlZDsgY2xlYW5pbmcgdXAgY29udGFpbmVyIGFuZCBmYXVsdGluZyB0aGlzIGluamVjdG9yLlwiLCBlLmVycm9yKTtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IEJlIGEgbGl0dGxlIG1vcmUgc2VsZWN0aXZlIGhlcmUsIGRvbid0IGZhaWwgb24gYW55IGVycm9yLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5mYXVsdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHBsYXllci5kZWJ1Zy5zZXRMb2dUb0Jyb3dzZXJDb25zb2xlKGZhbHNlKTtcclxuICAgICAgICAgICAgcGxheWVyLmF0dGFjaFZpZXcodmlkZW9FbGVtZW50WzBdKTtcclxuICAgICAgICAgICAgcGxheWVyLmF0dGFjaFNvdXJjZSh1cmwpO1xyXG4gICAgICAgICAgICBwbGF5ZXIuc2V0QXV0b1BsYXkodGhpcy5hdXRvUGxheSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZGVidWcobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5kZWJ1ZyhcIkRhc2hJbmplY3RvcjogXCIgKyBtZXNzYWdlLCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0gIl19
