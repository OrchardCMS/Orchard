/// <reference path="Typings/jquery.d.ts" />
/// <reference path="Typings/underscore.d.ts" />
var Orchard;
(function (Orchard) {
    var Azure;
    (function (Azure) {
        var MediaServices;
        (function (MediaServices) {
            var VideoPlayer;
            (function (VideoPlayer) {
                var Injectors = Orchard.Azure.MediaServices.VideoPlayer.Injectors;
                $(function () {
                    $(".cloudmedia-videoplayer-container").each(function (index, elem) {
                        var container = elem;
                        var assetData = $(elem).data("cloudvideo-player-assetdata");
                        var playerWidth = $(elem).data("cloudvideo-player-width");
                        var playerHeight = $(elem).data("cloudvideo-player-height");
                        var applyMediaQueries = $(elem).data("cloudvideo-player-applymediaqueries");
                        var autoPlay = $(elem).data("cloudvideo-player-autoplay");
                        var contentBaseUrl = $(elem).data("cloudvideo-player-content-baseurl");
                        var errorText = $(elem).data("cloudvideo-player-errortext");
                        var altText = $(elem).data("cloudvideo-player-alttext");
                        var retryText = $(elem).data("cloudvideo-player-retrytext");
                        function invokeInjectors() {
                            $(container).empty();
                            var alternateContent = [
                                $("<span>").addClass("cloudvideo-player-error-text").text(errorText),
                                $("<button>").addClass("cloudvideo-player-retry-button").text(retryText).click(function () {
                                    invokeInjectors();
                                }),
                                $("<span>").addClass("cloudvideo-player-alt-text").text(altText)
                            ];
                            // Construct a chain of injectors (each will invoke the next on failure).
                            var altInjector = new Injectors.AltInjector(container, playerWidth, playerHeight, assetData, applyMediaQueries, true, null, alternateContent);
                            var html5Injector = new Injectors.Html5Injector(container, playerWidth, playerHeight, autoPlay, assetData, applyMediaQueries, true, altInjector);
                            var dashInjector = new Injectors.DashInjector(container, playerWidth, playerHeight, autoPlay, assetData, applyMediaQueries, true, html5Injector);
                            var smpInjector = new Injectors.SmpInjector(container, playerWidth, playerHeight, autoPlay, assetData, applyMediaQueries, true, dashInjector, contentBaseUrl);
                            var firstInjector = smpInjector;
                            firstInjector.invoke();
                        }
                        invokeInjectors();
                    });
                });
            })(VideoPlayer = MediaServices.VideoPlayer || (MediaServices.VideoPlayer = {}));
        })(MediaServices = Azure.MediaServices || (Azure.MediaServices = {}));
    })(Azure = Orchard.Azure || (Orchard.Azure = {}));
})(Orchard || (Orchard = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItbWFpbi50cyJdLCJuYW1lcyI6WyJPcmNoYXJkIiwiT3JjaGFyZC5BenVyZSIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcyIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllciIsImludm9rZUluamVjdG9ycyJdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBQzVDLGdEQUFnRDtBQUVoRCxJQUFPLE9BQU8sQ0E0Q2I7QUE1Q0QsV0FBTyxPQUFPO0lBQUNBLElBQUFBLEtBQUtBLENBNENuQkE7SUE1Q2NBLFdBQUFBLEtBQUtBO1FBQUNDLElBQUFBLGFBQWFBLENBNENqQ0E7UUE1Q29CQSxXQUFBQSxhQUFhQTtZQUFDQyxJQUFBQSxXQUFXQSxDQTRDN0NBO1lBNUNrQ0EsV0FBQUEsV0FBV0EsRUFBQ0EsQ0FBQ0E7Z0JBRzVDQyxJQUFPQSxTQUFTQSxHQUFHQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxXQUFXQSxDQUFDQSxTQUFTQSxDQUFDQTtnQkFFckVBLENBQUNBLENBQUNBO29CQUNFLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssRUFBRSxJQUFJO3dCQUM3RCxJQUFJLFNBQVMsR0FBZ0IsSUFBSSxDQUFDO3dCQUVsQyxJQUFJLFNBQVMsR0FBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO3dCQUM3RSxJQUFJLFdBQVcsR0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7d0JBQ2xFLElBQUksWUFBWSxHQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQzt3QkFDcEUsSUFBSSxpQkFBaUIsR0FBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxD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QUFLQSxLQUFMQSxhQUFLQSxRQTRDbkJBO0FBQURBLENBQUNBLEVBNUNNLE9BQU8sS0FBUCxPQUFPLFFBNENiIiwiZmlsZSI6ImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJUeXBpbmdzL2pxdWVyeS5kLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlR5cGluZ3MvdW5kZXJzY29yZS5kLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIge1xyXG5cclxuICAgIGltcG9ydCBEYXRhID0gT3JjaGFyZC5BenVyZS5NZWRpYVNlcnZpY2VzLlZpZGVvUGxheWVyLkRhdGE7XHJcbiAgICBpbXBvcnQgSW5qZWN0b3JzID0gT3JjaGFyZC5BenVyZS5NZWRpYVNlcnZpY2VzLlZpZGVvUGxheWVyLkluamVjdG9ycztcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKFwiLmNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItY29udGFpbmVyXCIpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSA8SFRNTEVsZW1lbnQ+ZWxlbTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhc3NldERhdGE6IERhdGEuSUFzc2V0RGF0YSA9ICQoZWxlbSkuZGF0YShcImNsb3VkdmlkZW8tcGxheWVyLWFzc2V0ZGF0YVwiKTtcclxuICAgICAgICAgICAgdmFyIHBsYXllcldpZHRoOiBudW1iZXIgPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci13aWR0aFwiKTtcclxuICAgICAgICAgICAgdmFyIHBsYXllckhlaWdodDogbnVtYmVyID0gJChlbGVtKS5kYXRhKFwiY2xvdWR2aWRlby1wbGF5ZXItaGVpZ2h0XCIpO1xyXG4gICAgICAgICAgICB2YXIgYXBwbHlNZWRpYVF1ZXJpZXM6IGJvb2xlYW4gPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci1hcHBseW1lZGlhcXVlcmllc1wiKTtcclxuICAgICAgICAgICAgdmFyIGF1dG9QbGF5OiBib29sZWFuID0gJChlbGVtKS5kYXRhKFwiY2xvdWR2aWRlby1wbGF5ZXItYXV0b3BsYXlcIik7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50QmFzZVVybDogc3RyaW5nID0gJChlbGVtKS5kYXRhKFwiY2xvdWR2aWRlby1wbGF5ZXItY29udGVudC1iYXNldXJsXCIpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JUZXh0OiBzdHJpbmcgPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci1lcnJvcnRleHRcIik7XHJcbiAgICAgICAgICAgIHZhciBhbHRUZXh0OiBzdHJpbmcgPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci1hbHR0ZXh0XCIpO1xyXG4gICAgICAgICAgICB2YXIgcmV0cnlUZXh0OiBzdHJpbmcgPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci1yZXRyeXRleHRcIik7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBpbnZva2VJbmplY3RvcnMoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJChjb250YWluZXIpLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0ZUNvbnRlbnQgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIjxzcGFuPlwiKS5hZGRDbGFzcyhcImNsb3VkdmlkZW8tcGxheWVyLWVycm9yLXRleHRcIikudGV4dChlcnJvclRleHQpLFxyXG4gICAgICAgICAgICAgICAgICAgICQoXCI8YnV0dG9uPlwiKS5hZGRDbGFzcyhcImNsb3VkdmlkZW8tcGxheWVyLXJldHJ5LWJ1dHRvblwiKS50ZXh0KHJldHJ5VGV4dCkuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VJbmplY3RvcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAkKFwiPHNwYW4+XCIpLmFkZENsYXNzKFwiY2xvdWR2aWRlby1wbGF5ZXItYWx0LXRleHRcIikudGV4dChhbHRUZXh0KVxyXG4gICAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgYSBjaGFpbiBvZiBpbmplY3RvcnMgKGVhY2ggd2lsbCBpbnZva2UgdGhlIG5leHQgb24gZmFpbHVyZSkuXHJcbiAgICAgICAgICAgICAgICB2YXIgYWx0SW5qZWN0b3IgPSBuZXcgSW5qZWN0b3JzLkFsdEluamVjdG9yKGNvbnRhaW5lciwgcGxheWVyV2lkdGgsIHBsYXllckhlaWdodCwgYXNzZXREYXRhLCBhcHBseU1lZGlhUXVlcmllcywgdHJ1ZSwgbnVsbCwgYWx0ZXJuYXRlQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHRtbDVJbmplY3RvciA9IG5ldyBJbmplY3RvcnMuSHRtbDVJbmplY3Rvcihjb250YWluZXIsIHBsYXllcldpZHRoLCBwbGF5ZXJIZWlnaHQsIGF1dG9QbGF5LCBhc3NldERhdGEsIGFwcGx5TWVkaWFRdWVyaWVzLCB0cnVlLCBhbHRJbmplY3Rvcik7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGFzaEluamVjdG9yID0gbmV3IEluamVjdG9ycy5EYXNoSW5qZWN0b3IoY29udGFpbmVyLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0LCBhdXRvUGxheSwgYXNzZXREYXRhLCBhcHBseU1lZGlhUXVlcmllcywgdHJ1ZSwgaHRtbDVJbmplY3Rvcik7XHJcbiAgICAgICAgICAgICAgICB2YXIgc21wSW5qZWN0b3IgPSBuZXcgSW5qZWN0b3JzLlNtcEluamVjdG9yKGNvbnRhaW5lciwgcGxheWVyV2lkdGgsIHBsYXllckhlaWdodCwgYXV0b1BsYXksIGFzc2V0RGF0YSwgYXBwbHlNZWRpYVF1ZXJpZXMsIHRydWUsIGRhc2hJbmplY3RvciwgY29udGVudEJhc2VVcmwpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBmaXJzdEluamVjdG9yOiBJbmplY3RvcnMuSW5qZWN0b3IgPSBzbXBJbmplY3RvcjtcclxuICAgICAgICAgICAgICAgIGZpcnN0SW5qZWN0b3IuaW52b2tlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGludm9rZUluamVjdG9ycygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=