/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

/// <reference path="Typings/jquery.d.ts" />
/// <reference path="Typings/underscore.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Orchard;
(function (Orchard) {
    var Azure;
    (function (Azure) {
        var MediaServices;
        (function (MediaServices) {
            var VideoPlayer;
            (function (VideoPlayer) {
                var Injectors;
                (function (Injectors) {
                    var AltInjector = (function (_super) {
                        __extends(AltInjector, _super);
                        function AltInjector(container, playerWidth, playerHeight, assetData, applyMediaQueries, debugToConsole, nextInjector, alternateContent) {
                            var _this = _super.call(this, container, playerWidth, playerHeight, false, assetData, applyMediaQueries, debugToConsole, nextInjector) || this;
                            _this.alternateContent = alternateContent;
                            return _this;
                        }
                        AltInjector.prototype.isSupported = function () {
                            return true;
                        };
                        AltInjector.prototype.inject = function () {
                            var firstThumbnailAsset = _(this.filteredAssets().ThumbnailAssets).first();
                            this.debug("Injecting alternate content into element '{0}'.", this.container.id);
                            var wrapper = $("<div>")
                                .addClass("cloudvideo-player-alt-wrapper")
                                .css("width", this.playerWidth)
                                .css("height", this.playerHeight);
                            if (firstThumbnailAsset)
                                wrapper.css("background-image", "url('" + firstThumbnailAsset.MainFileUrl + "')");
                            var inner = $("<div>").addClass("cloudvideo-player-alt-inner").appendTo(wrapper);
                            if (this.alternateContent)
                                _(this.alternateContent).each(function (elem) { $(elem).appendTo(inner); });
                            wrapper.appendTo(this.container);
                        };
                        AltInjector.prototype.debug = function (message) {
                            var args = [];
                            for (var _i = 1; _i < arguments.length; _i++) {
                                args[_i - 1] = arguments[_i];
                            }
                            _super.prototype.debug.call(this, "AltInjector: " + message, args);
                        };
                        return AltInjector;
                    }(Injectors.Injector));
                    Injectors.AltInjector = AltInjector;
                })(Injectors = VideoPlayer.Injectors || (VideoPlayer.Injectors = {}));
            })(VideoPlayer = MediaServices.VideoPlayer || (MediaServices.VideoPlayer = {}));
        })(MediaServices = Azure.MediaServices || (Azure.MediaServices = {}));
    })(Azure = Orchard.Azure || (Orchard.Azure = {}));
})(Orchard || (Orchard = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItaW5qZWN0b3JzLWFsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRDQUE0QztBQUM1QyxnREFBZ0Q7Ozs7OztBQUVoRCxJQUFPLE9BQU8sQ0E0Q2I7QUE1Q0QsV0FBTyxPQUFPO0lBQUMsSUFBQSxLQUFLLENBNENuQjtJQTVDYyxXQUFBLEtBQUs7UUFBQyxJQUFBLGFBQWEsQ0E0Q2pDO1FBNUNvQixXQUFBLGFBQWE7WUFBQyxJQUFBLFdBQVcsQ0E0QzdDO1lBNUNrQyxXQUFBLFdBQVc7Z0JBQUMsSUFBQSxTQUFTLENBNEN2RDtnQkE1QzhDLFdBQUEsU0FBUztvQkFJcEQ7d0JBQWlDLCtCQUFRO3dCQUVyQyxxQkFDSSxTQUFzQixFQUN0QixXQUFtQixFQUNuQixZQUFvQixFQUNwQixTQUEwQixFQUMxQixpQkFBMEIsRUFDMUIsY0FBdUIsRUFDdkIsWUFBc0IsRUFDZCxnQkFBMEI7NEJBUnRDLFlBUTBDLGtCQUFNLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLFlBQVksQ0FBQyxTQUFHOzRCQUEvSSxzQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVU7O3dCQUFvSCxDQUFDO3dCQUVwSixpQ0FBVyxHQUFsQjs0QkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUVNLDRCQUFNLEdBQWI7NEJBQ0ksSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUUzRSxJQUFJLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBRWpGLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7aUNBQ25CLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQztpQ0FDekMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDO2lDQUM5QixHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzs0QkFDdEMsRUFBRSxDQUFDLENBQUMsbUJBQW1CLENBQUM7Z0NBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxHQUFHLG1CQUFtQixDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQzs0QkFFdEYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs0QkFFakYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2dDQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFFeEUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQ3JDLENBQUM7d0JBRU0sMkJBQUssR0FBWixVQUFhLE9BQWU7NEJBQUUsY0FBYztpQ0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO2dDQUFkLDZCQUFjOzs0QkFDeEMsaUJBQU0sS0FBSyxZQUFDLGVBQWUsR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7d0JBQ2pELENBQUM7d0JBQ0wsa0JBQUM7b0JBQUQsQ0F2Q0EsQUF1Q0MsQ0F2Q2dDLFVBQUEsUUFBUSxHQXVDeEM7b0JBdkNZLHFCQUFXLGNBdUN2QixDQUFBO2dCQUNMLENBQUMsRUE1QzhDLFNBQVMsR0FBVCxxQkFBUyxLQUFULHFCQUFTLFFBNEN2RDtZQUFELENBQUMsRUE1Q2tDLFdBQVcsR0FBWCx5QkFBVyxLQUFYLHlCQUFXLFFBNEM3QztRQUFELENBQUMsRUE1Q29CLGFBQWEsR0FBYixtQkFBYSxLQUFiLG1CQUFhLFFBNENqQztJQUFELENBQUMsRUE1Q2MsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBNENuQjtBQUFELENBQUMsRUE1Q00sT0FBTyxLQUFQLE9BQU8sUUE0Q2IiLCJmaWxlIjoiY2xvdWRtZWRpYS12aWRlb3BsYXllci1pbmplY3RvcnMtYWx0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlR5cGluZ3MvanF1ZXJ5LmQudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiVHlwaW5ncy91bmRlcnNjb3JlLmQudHNcIiAvPlxyXG5cclxubW9kdWxlIE9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMge1xyXG5cclxuICAgIGltcG9ydCBEYXRhID0gT3JjaGFyZC5BenVyZS5NZWRpYVNlcnZpY2VzLlZpZGVvUGxheWVyLkRhdGE7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEFsdEluamVjdG9yIGV4dGVuZHMgSW5qZWN0b3Ige1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAgICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuICAgICAgICAgICAgcGxheWVyV2lkdGg6IG51bWJlcixcclxuICAgICAgICAgICAgcGxheWVySGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgICAgICAgIGFzc2V0RGF0YTogRGF0YS5JQXNzZXREYXRhLFxyXG4gICAgICAgICAgICBhcHBseU1lZGlhUXVlcmllczogYm9vbGVhbixcclxuICAgICAgICAgICAgZGVidWdUb0NvbnNvbGU6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgIG5leHRJbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgICAgIHByaXZhdGUgYWx0ZXJuYXRlQ29udGVudDogSlF1ZXJ5W10pIHsgc3VwZXIoY29udGFpbmVyLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0LCBmYWxzZSwgYXNzZXREYXRhLCBhcHBseU1lZGlhUXVlcmllcywgZGVidWdUb0NvbnNvbGUsIG5leHRJbmplY3Rvcik7IH1cclxuXHJcbiAgICAgICAgcHVibGljIGlzU3VwcG9ydGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbmplY3QoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdFRodW1ibmFpbEFzc2V0ID0gXyh0aGlzLmZpbHRlcmVkQXNzZXRzKCkuVGh1bWJuYWlsQXNzZXRzKS5maXJzdCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhcIkluamVjdGluZyBhbHRlcm5hdGUgY29udGVudCBpbnRvIGVsZW1lbnQgJ3swfScuXCIsIHRoaXMuY29udGFpbmVyLmlkKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gJChcIjxkaXY+XCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJjbG91ZHZpZGVvLXBsYXllci1hbHQtd3JhcHBlclwiKVxyXG4gICAgICAgICAgICAgICAgLmNzcyhcIndpZHRoXCIsIHRoaXMucGxheWVyV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuY3NzKFwiaGVpZ2h0XCIsIHRoaXMucGxheWVySGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKGZpcnN0VGh1bWJuYWlsQXNzZXQpXHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmNzcyhcImJhY2tncm91bmQtaW1hZ2VcIiwgXCJ1cmwoJ1wiICsgZmlyc3RUaHVtYm5haWxBc3NldC5NYWluRmlsZVVybCArIFwiJylcIik7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW5uZXIgPSAkKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJjbG91ZHZpZGVvLXBsYXllci1hbHQtaW5uZXJcIikuYXBwZW5kVG8od3JhcHBlcik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5hbHRlcm5hdGVDb250ZW50KVxyXG4gICAgICAgICAgICAgICAgXyh0aGlzLmFsdGVybmF0ZUNvbnRlbnQpLmVhY2goZWxlbSA9PiB7ICQoZWxlbSkuYXBwZW5kVG8oaW5uZXIpOyB9KTtcclxuXHJcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kVG8odGhpcy5jb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGRlYnVnKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgICAgICAgICAgc3VwZXIuZGVidWcoXCJBbHRJbmplY3RvcjogXCIgKyBtZXNzYWdlLCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0gIl19
