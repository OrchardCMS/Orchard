/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

/// <reference path="Typings/jquery.d.ts" />
/// <reference path="Typings/underscore.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Orchard;
(function (Orchard) {
    var Azure;
    (function (Azure) {
        var MediaServices;
        (function (MediaServices) {
            var VideoPlayer;
            (function (VideoPlayer) {
                var Injectors;
                (function (Injectors) {
                    var AltInjector = (function (_super) {
                        __extends(AltInjector, _super);
                        function AltInjector(container, playerWidth, playerHeight, assetData, applyMediaQueries, debugToConsole, nextInjector, alternateContent) {
                            _super.call(this, container, playerWidth, playerHeight, false, assetData, applyMediaQueries, debugToConsole, nextInjector);
                            this.alternateContent = alternateContent;
                        }
                        AltInjector.prototype.isSupported = function () {
                            return true;
                        };
                        AltInjector.prototype.inject = function () {
                            var firstThumbnailAsset = _(this.filteredAssets().ThumbnailAssets).first();
                            this.debug("Injecting alternate content into element '{0}'.", this.container.id);
                            var wrapper = $("<div>")
                                .addClass("cloudvideo-player-alt-wrapper")
                                .css("width", this.playerWidth)
                                .css("height", this.playerHeight);
                            if (firstThumbnailAsset)
                                wrapper.css("background-image", "url('" + firstThumbnailAsset.MainFileUrl + "')");
                            var inner = $("<div>").addClass("cloudvideo-player-alt-inner").appendTo(wrapper);
                            if (this.alternateContent)
                                _(this.alternateContent).each(function (elem) { $(elem).appendTo(inner); });
                            wrapper.appendTo(this.container);
                        };
                        AltInjector.prototype.debug = function (message) {
                            var args = [];
                            for (var _i = 1; _i < arguments.length; _i++) {
                                args[_i - 1] = arguments[_i];
                            }
                            _super.prototype.debug.call(this, "AltInjector: " + message, args);
                        };
                        return AltInjector;
                    })(Injectors.Injector);
                    Injectors.AltInjector = AltInjector;
                })(Injectors = VideoPlayer.Injectors || (VideoPlayer.Injectors = {}));
            })(VideoPlayer = MediaServices.VideoPlayer || (MediaServices.VideoPlayer = {}));
        })(MediaServices = Azure.MediaServices || (Azure.MediaServices = {}));
    })(Azure = Orchard.Azure || (Orchard.Azure = {}));
})(Orchard || (Orchard = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItaW5qZWN0b3JzLWFsdC5qcyIsImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItaW5qZWN0b3JzLWFsdC50cyJdLCJuYW1lcyI6WyJPcmNoYXJkIiwiT3JjaGFyZC5BenVyZSIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcyIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllciIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMiLCJPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuSW5qZWN0b3JzLkFsdEluamVjdG9yIiwiT3JjaGFyZC5BenVyZS5NZWRpYVNlcnZpY2VzLlZpZGVvUGxheWVyLkluamVjdG9ycy5BbHRJbmplY3Rvci5jb25zdHJ1Y3RvciIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMuQWx0SW5qZWN0b3IuaXNTdXBwb3J0ZWQiLCJPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuSW5qZWN0b3JzLkFsdEluamVjdG9yLmluamVjdCIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMuQWx0SW5qZWN0b3IuZGVidWciXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQ0xBLDRDQUE0QztBQUM1QyxnREFBZ0Q7Ozs7OztBQUVoRCxJQUFPLE9BQU8sQ0E0Q2I7QUE1Q0QsV0FBTyxPQUFPO0lBQUNBLElBQUFBLEtBQUtBLENBNENuQkE7SUE1Q2NBLFdBQUFBLEtBQUtBO1FBQUNDLElBQUFBLGFBQWFBLENBNENqQ0E7UUE1Q29CQSxXQUFBQSxhQUFhQTtZQUFDQyxJQUFBQSxXQUFXQSxDQTRDN0NBO1lBNUNrQ0EsV0FBQUEsV0FBV0E7Z0JBQUNDLElBQUFBLFNBQVNBLENBNEN2REE7Z0JBNUM4Q0EsV0FBQUEsU0FBU0EsRUFBQ0EsQ0FBQ0E7b0JBSXREQzt3QkFBaUNDLCtCQUFRQTt3QkFFckNBLHFCQUNJQSxTQUFzQkEsRUFDdEJBLFdBQW1CQSxFQUNuQkEsWUFBb0JBLEVBQ3BCQSxTQUEwQkEsRUFDMUJBLGlCQUEwQkEsRUFDMUJBLGNBQXVCQSxFQUN2QkEsWUFBc0JBLEVBQ2RBLGdCQUEwQkE7NEJBQUlDLGtCQUFNQSxTQUFTQSxFQUFFQSxXQUFXQSxFQUFFQSxZQUFZQSxFQUFFQSxLQUFLQSxFQUFFQSxTQUFTQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGNBQWNBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBOzRCQUE3SUEscUJBQWdCQSxHQUFoQkEsZ0JBQWdCQSxDQUFVQTt3QkFBb0hBLENBQUNBO3dCQUVwSkQsaUNBQVdBLEdBQWxCQTs0QkFDSUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7d0JBQ2hCQSxDQUFDQTt3QkFFTUYsNEJBQU1BLEdBQWJBOzRCQUNJRyxJQUFJQSxtQkFBbUJBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLEVBQUVBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBOzRCQUUzRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsaURBQWlEQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTs0QkFFakZBLElBQUlBLE9BQU9BLEdBQUdBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBO2lDQUNuQkEsUUFBUUEsQ0FBQ0EsK0JBQStCQSxDQUFDQTtpQ0FDekNBLEdBQUdBLENBQUNBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO2lDQUM5QkEsR0FBR0EsQ0FBQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7NEJBQ3RDQSxFQUFFQSxDQUFDQSxDQUFDQSxtQkFBbUJBLENBQUNBO2dDQUNwQkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxPQUFPQSxHQUFHQSxtQkFBbUJBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBOzRCQUV0RkEsSUFBSUEsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsNkJBQTZCQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTs0QkFFakZBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0E7Z0NBQ3RCQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQUFBLElBQUlBLElBQU1BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBOzRCQUV4RUEsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3JDQSxDQUFDQTt3QkFFTUgsMkJBQUtBLEdBQVpBLFVBQWFBLE9BQWVBOzRCQUFFSSxjQUFjQTtpQ0FBZEEsV0FBY0EsQ0FBZEEsc0JBQWNBLENBQWRBLElBQWNBO2dDQUFkQSw2QkFBY0E7OzRCQUN4Q0EsZ0JBQUtBLENBQUNBLEtBQUtBLFlBQUNBLGVBQWVBLEdBQUdBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO3dCQUNqREEsQ0FBQ0E7d0JBQ0xKLGtCQUFDQTtvQkFBREEsQ0F2Q0FELEFBdUNDQyxFQXZDZ0NELGtCQUFRQSxFQXVDeENBO29CQXZDWUEscUJBQVdBLGNBdUN2QkEsQ0FBQUE7Z0JBQ0xBLENBQUNBLEVBNUM4Q0QsU0FBU0EsR0FBVEEscUJBQVNBLEtBQVRBLHFCQUFTQSxRQTRDdkRBO1lBQURBLENBQUNBLEVBNUNrQ0QsV0FBV0EsR0FBWEEseUJBQVdBLEtBQVhBLHlCQUFXQSxRQTRDN0NBO1FBQURBLENBQUNBLEVBNUNvQkQsYUFBYUEsR0FBYkEsbUJBQWFBLEtBQWJBLG1CQUFhQSxRQTRDakNBO0lBQURBLENBQUNBLEVBNUNjRCxLQUFLQSxHQUFMQSxhQUFLQSxLQUFMQSxhQUFLQSxRQTRDbkJBO0FBQURBLENBQUNBLEVBNUNNLE9BQU8sS0FBUCxPQUFPLFFBNENiIiwiZmlsZSI6ImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItaW5qZWN0b3JzLWFsdC5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlR5cGluZ3MvanF1ZXJ5LmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlR5cGluZ3MvdW5kZXJzY29yZS5kLnRzXCIgLz5cblxubW9kdWxlIE9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMge1xuXG4gICAgaW1wb3J0IERhdGEgPSBPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuRGF0YTtcblxuICAgIGV4cG9ydCBjbGFzcyBBbHRJbmplY3RvciBleHRlbmRzIEluamVjdG9yIHtcblxuICAgICAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICBwbGF5ZXJXaWR0aDogbnVtYmVyLFxuICAgICAgICAgICAgcGxheWVySGVpZ2h0OiBudW1iZXIsXG4gICAgICAgICAgICBhc3NldERhdGE6IERhdGEuSUFzc2V0RGF0YSxcbiAgICAgICAgICAgIGFwcGx5TWVkaWFRdWVyaWVzOiBib29sZWFuLFxuICAgICAgICAgICAgZGVidWdUb0NvbnNvbGU6IGJvb2xlYW4sXG4gICAgICAgICAgICBuZXh0SW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICAgICAgcHJpdmF0ZSBhbHRlcm5hdGVDb250ZW50OiBKUXVlcnlbXSkgeyBzdXBlcihjb250YWluZXIsIHBsYXllcldpZHRoLCBwbGF5ZXJIZWlnaHQsIGZhbHNlLCBhc3NldERhdGEsIGFwcGx5TWVkaWFRdWVyaWVzLCBkZWJ1Z1RvQ29uc29sZSwgbmV4dEluamVjdG9yKTsgfVxuXG4gICAgICAgIHB1YmxpYyBpc1N1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGluamVjdCgpOiB2b2lkIHtcbiAgICAgICAgICAgIHZhciBmaXJzdFRodW1ibmFpbEFzc2V0ID0gXyh0aGlzLmZpbHRlcmVkQXNzZXRzKCkuVGh1bWJuYWlsQXNzZXRzKS5maXJzdCgpO1xuXG4gICAgICAgICAgICB0aGlzLmRlYnVnKFwiSW5qZWN0aW5nIGFsdGVybmF0ZSBjb250ZW50IGludG8gZWxlbWVudCAnezB9Jy5cIiwgdGhpcy5jb250YWluZXIuaWQpO1xuXG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9ICQoXCI8ZGl2PlwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImNsb3VkdmlkZW8tcGxheWVyLWFsdC13cmFwcGVyXCIpXG4gICAgICAgICAgICAgICAgLmNzcyhcIndpZHRoXCIsIHRoaXMucGxheWVyV2lkdGgpXG4gICAgICAgICAgICAgICAgLmNzcyhcImhlaWdodFwiLCB0aGlzLnBsYXllckhlaWdodCk7XG4gICAgICAgICAgICBpZiAoZmlyc3RUaHVtYm5haWxBc3NldClcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmNzcyhcImJhY2tncm91bmQtaW1hZ2VcIiwgXCJ1cmwoJ1wiICsgZmlyc3RUaHVtYm5haWxBc3NldC5NYWluRmlsZVVybCArIFwiJylcIik7XG5cbiAgICAgICAgICAgIHZhciBpbm5lciA9ICQoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcImNsb3VkdmlkZW8tcGxheWVyLWFsdC1pbm5lclwiKS5hcHBlbmRUbyh3cmFwcGVyKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWx0ZXJuYXRlQ29udGVudClcbiAgICAgICAgICAgICAgICBfKHRoaXMuYWx0ZXJuYXRlQ29udGVudCkuZWFjaChlbGVtID0+IHsgJChlbGVtKS5hcHBlbmRUbyhpbm5lcik7IH0pO1xuXG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZFRvKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkZWJ1ZyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5kZWJ1ZyhcIkFsdEluamVjdG9yOiBcIiArIG1lc3NhZ2UsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxufSAiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
