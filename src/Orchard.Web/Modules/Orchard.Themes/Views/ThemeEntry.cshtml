@using Orchard.Themes.Models
@using Orchard.Mvc.Html
@using Orchard.Environment.Extensions.Models
@using Orchard.Utility.Extensions;

@{
    Script.Require("ShapesBase").AtFoot();

    Orchard.Themes.Models.ThemeEntry theme = Model.Theme;
    var themeClasses = theme.IsRecentlyInstalled ? "class=\"recentlyInstalledTheme\"" : String.Empty;
}

<div class="container-fluid">
    <div class="row">
        <h3 @Html.Raw(themeClasses)>@theme.Name</h3>

        @Html.Image(Href(Html.ThemePath((ExtensionDescriptor)theme.Descriptor, "/Theme.png")), Html.Encode((string)theme.Name), new { @class = "img-thumbnail" })
        <div class="row">
            <div class="col-sm-12 form-group clearfix">
                @using (Html.BeginFormAntiForgeryPost(Url.Action("Activate"), FormMethod.Post, new { @class = "pull-left" })) {
                    @Html.Hidden("themeId", (string)theme.Descriptor.Id)
                    <button class="btn btn-primary" type="submit" title="@T("Activate")">@T("Set Current")</button>
                }
                @using (Html.BeginFormAntiForgeryPost(Url.Action("Preview"), FormMethod.Post, new { @class = "pull-right" })) {
                    @Html.Hidden("themeId", (string)theme.Descriptor.Id)
                    <button class="btn btn-default" type="submit" title="@T("Preview")">@T("Preview")</button>
                }
            </div>

            <div class="col-sm-12 form-group">
                @T("By") @theme.Descriptor.Author<br />
                @T("Version:") @theme.Descriptor.Version<br />
                @theme.Descriptor.Description<br />
                @if (theme.Descriptor.WebSite != null) {
                    <a href="@theme.Descriptor.WebSite">@theme.Descriptor.WebSite</a><br />
                }
            </div>

            @if (theme.Notifications != null && theme.Notifications.Count > 0) {
                <ul class="notifications">
                    @foreach (string notification in theme.Notifications) {
                        <li>@notification</li>
                    }
                </ul>
            }
            <div class="col-sm-12 row form-group">
                <div class="col-xs-4 text-left">
                    @if (theme.Enabled) {
                using (Html.BeginFormAntiForgeryPost(Url.Action("Disable"), FormMethod.Post, new { @class = "inline link" })) {
                            @Html.Hidden("themeId", (string)theme.Descriptor.Id)
                            <button type="submit" class="btn btn-danger" title="Disable">@T("Disable")</button>
                        }
                    } else {
                        using (Html.BeginFormAntiForgeryPost(Url.Action("Enable"), FormMethod.Post, new { @class = "inline link" })) {
                            @Html.Hidden("themeId", (string)theme.Descriptor.Id)
                            <button type="submit" class="btn btn-primary" title="Enable">@T("Enable")</button>
                        }
                    }
                </div>
                <div class="col-xs-4 text-center">
                    <button type="submit" class="btn btn-primary">@T("Update")</button>
                    @if (theme.NeedsUpdate) {
                using (Html.BeginFormAntiForgeryPost(Url.Action("Update"), FormMethod.Post, new { @class = "inline link" })) {
                            @Html.Hidden("themeId", (string)theme.Descriptor.Id)
                            <button type="submit" class="btn btn-primary">@T("Update")</button>
                        }
                    }
                </div>
                <div class="col-xs-4 text-right">
                    @if (theme.CanUninstall) {
                        @Html.ActionLink(
            T("Uninstall").Text,
            "UninstallTheme",
            "PackagingServices",
            new { ThemeId = theme.Descriptor.Id, ReturnUrl = Request.ToUrlString(), Area = "Orchard.Packaging" },
            new { itemprop = "RemoveUrl UnsafeUrl", @class = "btn btn-danger" })
                    }
                </div>
            </div>
        </div>
    </div>
</div>