@using Orchard.CustomForms.ViewModels
@using Orchard.Utility.Extensions
@model Orchard.CustomForms.ViewModels.CustomFormIndexViewModel

@{
    Layout.Title = T("Manage Custom Forms").Text;
    var formIndex = 0;

    var pageSizes = new List<int?>() { 10, 50, 100 };
    var defaultPageSize = WorkContext.CurrentSite.PageSize;
    if (!pageSizes.Contains(defaultPageSize)) {
        pageSizes.Add(defaultPageSize);
    }
}
<div class="panel panel-default">
    @using (Html.BeginFormAntiForgeryPost()) {
        @Html.ValidationSummary()
        <div class="panel-heading">
            <div class="row">
                <div class="col-sm-4">
                    <fieldset>
                        <input id="publishActions" name="@Html.NameOf(m => m.Options.BulkAction)" type="hidden" value="@CustomFormBulkAction.None" />
                        <button name="submit.BulkEdit" type="submit" class="hidden" value="@T("Apply")">@T("Apply")</button>
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                                Bulk Actions <span class="caret"></span>
                            </button>&nbsp;
                            <ul class="dropdown-menu" role="menu">
                                <li><a id="btn-bulk-delete" href="#" data-confirm="@T("Are you sure you want to delete these items?")" data-action="@CustomFormBulkAction.Delete">@T("Delete").ToString()</a></li>
                            </ul>
                        </div>
                    </fieldset>
                </div>
                <div class="col-sm-4">
                    &nbsp;
                    <fieldset class="bulk-actions">
                        @* No need to filter if there is only one option in the dropdownlist *@
                        @*<label for="filterResults">@T("Sort by:")</label>
                            <select id="filterResults" name="@Html.NameOf(m => m.Options.Order)">
                                @Html.SelectOption(Model.Options.Order, CustomFormOrder.Creation, T("Creation date").ToString())
                            </select>*@
                    </fieldset>
                </div>
                <div class="col-sm-4 text-right">@Html.ActionLink(T("Add a new Custom Form").ToString(), "Create", "Admin", new { area = "Contents", id = "CustomForm", returUrl = Request.RawUrl }, new { @class = "btn btn-primary" })</div>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="table-responsive table-with-footer">
                    <table class="table table-fw-widget data-table table-striped dataTable no-footer">
                        <thead>
                            <tr>
                                <th scope="col">
                                    <div class="am-checkbox am-select-all inline">
                                        <input id="checkAll" class="check-all" type="checkbox">
                                        <label for="checkAll">@T("Select all")</label>
                                    </div>
                                </th>
                                <th scope="col">@T("Title")</th>
                                <th scope="col">@T("Content Type")</th>
                                <th scope="col">&nbsp;</th>
                            </tr>
                        </thead>
                        @foreach (var entry in Model.CustomForms) {
                            var checkboxId = Html.IdFor(m => m.CustomForms[formIndex].CustomForm.Id);
                            <tr>
                                <td>
                                    <div class="am-checkbox">
                                        <input type="hidden" value="@Model.CustomForms[formIndex].CustomForm.Id" name="@Html.NameOf(m => m.CustomForms[formIndex].CustomForm.Id)" />
                                        <input type="hidden" value="@Model.CustomForms[formIndex].CustomForm.ContentType" name="@Html.NameOf(m => m.CustomForms[formIndex].CustomForm.ContentType)" />
                                        <input id="@checkboxId" type="checkbox" value="true" name="@Html.NameOf(m => m.CustomForms[formIndex].IsChecked)" />
                                        <label for="@checkboxId"></label>
                                    </div>
                                </td>
                                <td>
                                    @Html.ItemEditLink(entry.CustomForm.Title, entry.CustomForm.ContentItem)
                                    @if (entry.CustomForm.ContentItem.ContentType == "CustomFormWidget") {
                                        @T("-")<text> </text>@T("Widget")
                                    }
                                </td>
                                <td>
                                    @entry.CustomForm.ContentType.CamelFriendly()
                                </td>
                                <td>
                                    @Html.ActionLink(T("Submissions").Text, "Item", "Admin", new { area = "Orchard.CustomForms", id = entry.CustomForm.Id }, new { @class = "btn btn-default" })
                                    @Html.ItemEditLink(T("Edit").Text, entry.CustomForm.ContentItem, null, new { @class = "btn btn-primary" })
                                    @Html.Link(T("Delete").Text, Url.ItemRemoveUrl(entry.CustomForm.ContentItem, new { returnUrl = Request.RawUrl }), new Dictionary<string, Object> { { "class", "btn btn-danger" }, { "data-confirm", T("Are you sure you want to delete this item?") } })
                                </td>
                            </tr>
                            formIndex++;
                        }
                    </table>
                </div>
                <div class="row am-datatable-footer">
                    <div class="col-sm-12">
                        @Display(Model.Pager)
                    </div>
                </div>
            </div>
        </div>
        @Display.Modal()
    }
</div>
