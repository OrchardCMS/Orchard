@model Orchard.Autoroute.Settings.AutorouteSettings
@{
    Script.Require("AutorouteBrowser");
    Style.Require("AutorouteSettings");
    int patternCount = 0;
    int patternCultureCount = 0;
}

<div class="form-group">
    <div class="or-checkbox">
        @Html.CheckBoxFor(m => m.AllowCustomPattern)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.AllowCustomPattern)">@T("Allow custom patterns")</label>
        <span class="help-block">@T("Allow the user to change the pattern on each item")</span>
    </div>
    
</div>
<div class="form-group">
    <div class="or-checkbox">
        @Html.CheckBoxFor(m => m.AutomaticAdjustmentOnEdit)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.AutomaticAdjustmentOnEdit)">@T("Automatically regenerate when editing content")</label>
        <span class="help-block">@T("This option will cause the Url to automatically be regenerated when you edit existing content and publish it again, otherwise it will always keep the old route, or you have to perform bulk update in the Autoroute admin.")</span>
    </div>
</div>
@if (Model.SiteCultures.Count > 1) {
    <div class="form-group">
        <div class="or-checkbox">
            @Html.CheckBoxFor(m => m.UseCulturePattern, new { @class = "use-culture-pattern" })
            <label class="forcheckbox" for="@Html.FieldIdFor(m => m.UseCulturePattern)">@T("Use culture pattern(s)")</label>
            <span class="help-block">@T("Allow to set pattern(s) for each culture. If left unchecked this means it will use the default website culture pattern(s).")</span>
        </div>
    </div>
}

<h4>@T("Patterns")</h4>

<div class="form-group">
    <div class="autoroute-settings-wrapper">
        <div class="tab-container">
            <ul class="nav nav-tabs">
                @{
                    int i = 1;
                    string cssClass = "";
                }
                <li class="active">
                    <a data-toggle="tab" class="culture" href="#cat-@Model.DefaultSiteCulture">@Model.DefaultSiteCulture</a>
                </li>
                @foreach (var culture in Model.SiteCultures) {
                if (culture != Model.DefaultSiteCulture) {
                        <li style="@(Model.UseCulturePattern == false ? "display:none;" : "")">
                            <a data-toggle="tab" class="culture" href="#cat-@culture">@culture</a>
                        </li>
                    }
                }
            </ul>
            <div class="tab-content">
                @foreach (var culture in Model.SiteCultures) {
                    <div id="cat-@culture" class="tab-pane @(culture == Model.DefaultSiteCulture ? "active" : "")">
                        <table class="autoroute-settings-patterns">
                            <tr>
                                <th class="autoroute-settings-default">@T("Default")</th>
                                <th class="autoroute-settings-name">@T("Name")<span class="help-block">@T("Name of the pattern")</span></th>
                                <th class="autoroute-settings-pat">@T("Pattern")<span class="help-block">@T("The definition of the pattern")</span></th>
                                <th class="autoroute-settings-desc">@T("Description")<span class="help-block">@T("The description of the pattern, displayed in the editor")</span></th>
                                <th class="autoroute-settings-actions">&nbsp;</th>
                            </tr>
                            @for (int index = 0; index < Model.Patterns.Where(x => x.Culture == culture).Count(); index++) {
                                var radioId = Html.IdFor(m => m.DefaultPatterns[Model.SiteCultures.IndexOf(culture)].Culture) + "|" + patternCultureCount;
                                <tr>
                                    <td>
                                        <div class="or-radio">
                                            <input type="radio" id="@radioId" name="@Html.NameFor(m => m.DefaultPatterns[Model.SiteCultures.IndexOf(culture)].Culture)" value="@(culture + "|" + patternCultureCount)" @if (patternCultureCount.ToString() == Model.DefaultPatterns[Model.SiteCultures.IndexOf(culture)].PatternIndex) { <text>checked="checked"</text>} />
                                            <label for="@radioId"></label>
                                        </div>
                                    </td>
                                    <td>@Html.TextBoxFor(m => m.Patterns[patternCount].Name, new { @class = "text" })</td>
                                    <td>@Html.TextBoxFor(m => m.Patterns[patternCount].Pattern, new { @class = "tokenized text" })</td>
                                    <td>@Html.TextBoxFor(m => m.Patterns[patternCount].Description, new { @class = "text" })</td>
                                    <td>@Html.HiddenFor(m => m.Patterns[patternCount].Culture)&nbsp;</td>
                                </tr>
                                if (Model.Patterns[patternCount].Pattern != null) { patternCultureCount++; } else { patternCultureCount = 0; }
                                patternCount++;
                            }
                            <tr></tr>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@Display.TokenHint()
