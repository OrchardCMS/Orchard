@using Orchard.DisplayManagement.Shapes
@using Orchard.DynamicForms.Elements
@using Orchard.Layouts.Helpers
@{
    var element = (Taxonomy)Model.Element;
    string parentTaxonomyElementName = Model.ParentTaxonomyElementName;
    string parentTaxonomyElementInputType = Model.ParentTaxonomyElementInputType;
    var attributes = (IDictionary<string, object>)TagBuilderExtensions.GetCommonElementAttributes(Model);
    if (!string.IsNullOrWhiteSpace(parentTaxonomyElementName)) {
        Script.Require("DynamicForms.TaxonomyElement").AtFoot();
        if (attributes.ContainsKey("class")) {
            attributes["class"] += " taxonomy-element";
        }
        else {
            attributes.Add("class", "taxonomy-element");
        }
        attributes["data-taxonomy-element-ajax-url"] = Url.Action("GetChildrenTerms", "TaxonomyElement", new { contentId = Model.ContentItem.Id, formName = element.Form.Name, elementName = element.Name, area = "Orchard.DynamicForms" });
        attributes["data-taxonomy-element-input-type"] = "CheckList";
        attributes["data-taxonomy-element-parent-name"] = parentTaxonomyElementName;
        attributes["data-taxonomy-element-parent-input-type"] = parentTaxonomyElementInputType;
    }
    var name = String.IsNullOrWhiteSpace((string)Model.ProcessedName) ? "CheckList1" : (string)Model.ProcessedName;
    var tagBuilder = (OrchardTagBuilder)TagBuilderExtensions.CreateElementTagBuilder(Model, "ol");
    tagBuilder.Attributes.Add("id",name);
    foreach (var attribute in attributes) {
        tagBuilder.Attributes.Add(attribute.Key, attribute.Value.ToString());
    }
    var index = 0;
}
@if (element.ShowLabel) {
    <label>@Html.Raw(Model.ProcessedLabel)</label>
}
@tagBuilder.StartElement
@foreach (var option in Model.TermOptions) {
    var inputTagBuilder = new OrchardTagBuilder("input");
    inputTagBuilder.Attributes["type"] = "checkbox";
    inputTagBuilder.Attributes["name"] = element.Name;
    inputTagBuilder.Attributes["value"] = option.Value;

    if (option.Selected) {
        inputTagBuilder.Attributes["checked"] = "checked";
    }

    if (element.ValidationSettings.Required == true && index == 0) {
        inputTagBuilder.AddClientValidationAttributes((IDictionary<string, string>)Model.ClientValidationAttributes);
    }
    <li>
        <label>
            @inputTagBuilder.ToHtmlString(TagRenderMode.SelfClosing)
            @option.Text
        </label>
    </li>
    ++index;
}
@tagBuilder.EndElement
@if (element.ValidationSettings.ShowValidationMessage == true) {
    @Html.ValidationMessage(name)
}