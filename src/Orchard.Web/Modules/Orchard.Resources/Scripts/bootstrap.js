/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): util.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("util", ["require", "exports", "jquery"], function (require, exports, jquery_1) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Private TransitionEnd Helpers
     * ------------------------------------------------------------------------
     */
    var TRANSITION_END = 'transitionend';
    var MAX_UID = 1000000;
    var MILLISECONDS_MULTIPLIER = 1000;
    // Shoutout AngusCroll (https://goo.gl/pxwQGp)
    function toType(obj) {
        return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
    }
    function getSpecialTransitionEndEvent() {
        return {
            bindType: TRANSITION_END,
            delegateType: TRANSITION_END,
            handle: function (event) {
                if (jquery_1["default"](event.target).is(this)) {
                    return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
                }
                return undefined; // eslint-disable-line no-undefined
            }
        };
    }
    function transitionEndEmulator(duration) {
        var _this = this;
        var called = false;
        jquery_1["default"](this).one(Util.TRANSITION_END, function () {
            called = true;
        });
        setTimeout(function () {
            if (!called) {
                Util.triggerTransitionEnd(_this);
            }
        }, duration);
        return this;
    }
    function setTransitionEndSupport() {
        jquery_1["default"].fn.emulateTransitionEnd = transitionEndEmulator;
        jquery_1["default"].event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
    }
    /**
     * --------------------------------------------------------------------------
     * Public Util Api
     * --------------------------------------------------------------------------
     */
    var Util = {
        TRANSITION_END: 'bsTransitionEnd',
        getUID: function (prefix) {
            do {
                // eslint-disable-next-line no-bitwise
                prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
            } while (document.getElementById(prefix));
            return prefix;
        },
        getSelectorFromElement: function (element) {
            var selector = element.getAttribute('data-target');
            if (!selector || selector === '#') {
                var hrefAttr = element.getAttribute('href');
                selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
            }
            try {
                return document.querySelector(selector) ? selector : null;
            }
            catch (err) {
                return null;
            }
        },
        getTransitionDurationFromElement: function (element) {
            if (!element) {
                return 0;
            }
            // Get transition-duration of the element
            var transitionDuration = jquery_1["default"](element).css('transition-duration');
            var transitionDelay = jquery_1["default"](element).css('transition-delay');
            var floatTransitionDuration = parseFloat(transitionDuration);
            var floatTransitionDelay = parseFloat(transitionDelay);
            // Return 0 if element or transition duration is not found
            if (!floatTransitionDuration && !floatTransitionDelay) {
                return 0;
            }
            // If multiple durations are defined, take the first
            transitionDuration = transitionDuration.split(',')[0];
            transitionDelay = transitionDelay.split(',')[0];
            return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
        },
        reflow: function (element) {
            return element.offsetHeight;
        },
        triggerTransitionEnd: function (element) {
            jquery_1["default"](element).trigger(TRANSITION_END);
        },
        // TODO: Remove in v5
        supportsTransitionEnd: function () {
            return Boolean(TRANSITION_END);
        },
        isElement: function (obj) {
            return (obj[0] || obj).nodeType;
        },
        typeCheckConfig: function (componentName, config, configTypes) {
            for (var property in configTypes) {
                if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                    var expectedTypes = configTypes[property];
                    var value = config[property];
                    var valueType = value && Util.isElement(value)
                        ? 'element' : toType(value);
                    if (!new RegExp(expectedTypes).test(valueType)) {
                        throw new Error(componentName.toUpperCase() + ": " +
                            ("Option \"" + property + "\" provided type \"" + valueType + "\" ") +
                            ("but expected type \"" + expectedTypes + "\"."));
                    }
                }
            }
        },
        findShadowRoot: function (element) {
            if (!document.documentElement.attachShadow) {
                return null;
            }
            // Can find the shadow root otherwise it'll return the document
            if (typeof element.getRootNode === 'function') {
                var root = element.getRootNode();
                return root instanceof ShadowRoot ? root : null;
            }
            if (element instanceof ShadowRoot) {
                return element;
            }
            // when we don't find a shadow root
            if (!element.parentNode) {
                return null;
            }
            return Util.findShadowRoot(element.parentNode);
        }
    };
    setTransitionEndSupport();
    exports.__esModule = true;
    exports["default"] = Util;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("alert", ["require", "exports", "jquery", "util"], function (require, exports, jquery_2, util_1) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'alert';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.alert';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_2["default"].fn[NAME];
    var Selector = {
        DISMISS: '[data-dismiss="alert"]'
    };
    var Event = {
        CLOSE: "close" + EVENT_KEY,
        CLOSED: "closed" + EVENT_KEY,
        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        ALERT: 'alert',
        FADE: 'fade',
        SHOW: 'show'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Alert = (function () {
        function Alert(element) {
            this._element = element;
        }
        Object.defineProperty(Alert, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Alert.prototype.close = function (element) {
            var rootElement = this._element;
            if (element) {
                rootElement = this._getRootElement(element);
            }
            var customEvent = this._triggerCloseEvent(rootElement);
            if (customEvent.isDefaultPrevented()) {
                return;
            }
            this._removeElement(rootElement);
        };
        Alert.prototype.dispose = function () {
            jquery_2["default"].removeData(this._element, DATA_KEY);
            this._element = null;
        };
        // Private
        Alert.prototype._getRootElement = function (element) {
            var selector = util_1["default"].getSelectorFromElement(element);
            var parent = false;
            if (selector) {
                parent = document.querySelector(selector);
            }
            if (!parent) {
                parent = jquery_2["default"](element).closest("." + ClassName.ALERT)[0];
            }
            return parent;
        };
        Alert.prototype._triggerCloseEvent = function (element) {
            var closeEvent = jquery_2["default"].Event(Event.CLOSE);
            jquery_2["default"](element).trigger(closeEvent);
            return closeEvent;
        };
        Alert.prototype._removeElement = function (element) {
            var _this = this;
            jquery_2["default"](element).removeClass(ClassName.SHOW);
            if (!jquery_2["default"](element).hasClass(ClassName.FADE)) {
                this._destroyElement(element);
                return;
            }
            var transitionDuration = util_1["default"].getTransitionDurationFromElement(element);
            jquery_2["default"](element)
                .one(util_1["default"].TRANSITION_END, function (event) { return _this._destroyElement(element, event); })
                .emulateTransitionEnd(transitionDuration);
        };
        Alert.prototype._destroyElement = function (element) {
            jquery_2["default"](element)
                .detach()
                .trigger(Event.CLOSED)
                .remove();
        };
        // Static
        Alert._jQueryInterface = function (config) {
            return this.each(function () {
                var $element = jquery_2["default"](this);
                var data = $element.data(DATA_KEY);
                if (!data) {
                    data = new Alert(this);
                    $element.data(DATA_KEY, data);
                }
                if (config === 'close') {
                    data[config](this);
                }
            });
        };
        Alert._handleDismiss = function (alertInstance) {
            return function (event) {
                if (event) {
                    event.preventDefault();
                }
                alertInstance.close(this);
            };
        };
        return Alert;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_2["default"](document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_2["default"].fn[NAME] = Alert._jQueryInterface;
    jquery_2["default"].fn[NAME].Constructor = Alert;
    jquery_2["default"].fn[NAME].noConflict = function () {
        jquery_2["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Alert._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Alert;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("button", ["require", "exports", "jquery"], function (require, exports, jquery_3) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'button';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.button';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_3["default"].fn[NAME];
    var ClassName = {
        ACTIVE: 'active',
        BUTTON: 'btn',
        FOCUS: 'focus'
    };
    var Selector = {
        DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
        DATA_TOGGLE: '[data-toggle="buttons"]',
        INPUT: 'input:not([type="hidden"])',
        ACTIVE: '.active',
        BUTTON: '.btn'
    };
    var Event = {
        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
        FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " +
            ("blur" + EVENT_KEY + DATA_API_KEY)
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Button = (function () {
        function Button(element) {
            this._element = element;
        }
        Object.defineProperty(Button, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Button.prototype.toggle = function () {
            var triggerChangeEvent = true;
            var addAriaPressed = true;
            var rootElement = jquery_3["default"](this._element).closest(Selector.DATA_TOGGLE)[0];
            if (rootElement) {
                var input = this._element.querySelector(Selector.INPUT);
                if (input) {
                    if (input.type === 'radio') {
                        if (input.checked &&
                            this._element.classList.contains(ClassName.ACTIVE)) {
                            triggerChangeEvent = false;
                        }
                        else {
                            var activeElement = rootElement.querySelector(Selector.ACTIVE);
                            if (activeElement) {
                                jquery_3["default"](activeElement).removeClass(ClassName.ACTIVE);
                            }
                        }
                    }
                    if (triggerChangeEvent) {
                        if (input.hasAttribute('disabled') ||
                            rootElement.hasAttribute('disabled') ||
                            input.classList.contains('disabled') ||
                            rootElement.classList.contains('disabled')) {
                            return;
                        }
                        input.checked = !this._element.classList.contains(ClassName.ACTIVE);
                        jquery_3["default"](input).trigger('change');
                    }
                    input.focus();
                    addAriaPressed = false;
                }
            }
            if (addAriaPressed) {
                this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName.ACTIVE));
            }
            if (triggerChangeEvent) {
                jquery_3["default"](this._element).toggleClass(ClassName.ACTIVE);
            }
        };
        Button.prototype.dispose = function () {
            jquery_3["default"].removeData(this._element, DATA_KEY);
            this._element = null;
        };
        // Static
        Button._jQueryInterface = function (config) {
            return this.each(function () {
                var data = jquery_3["default"](this).data(DATA_KEY);
                if (!data) {
                    data = new Button(this);
                    jquery_3["default"](this).data(DATA_KEY, data);
                }
                if (config === 'toggle') {
                    data[config]();
                }
            });
        };
        return Button;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_3["default"](document)
        .on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
        event.preventDefault();
        var button = event.target;
        if (!jquery_3["default"](button).hasClass(ClassName.BUTTON)) {
            button = jquery_3["default"](button).closest(Selector.BUTTON);
        }
        Button._jQueryInterface.call(jquery_3["default"](button), 'toggle');
    })
        .on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
        var button = jquery_3["default"](event.target).closest(Selector.BUTTON)[0];
        jquery_3["default"](button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_3["default"].fn[NAME] = Button._jQueryInterface;
    jquery_3["default"].fn[NAME].Constructor = Button;
    jquery_3["default"].fn[NAME].noConflict = function () {
        jquery_3["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Button._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Button;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("carousel", ["require", "exports", "jquery", "util"], function (require, exports, jquery_4, util_2) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'carousel';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.carousel';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_4["default"].fn[NAME];
    var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key
    var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key
    var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch
    var SWIPE_THRESHOLD = 40;
    var Default = {
        interval: 5000,
        keyboard: true,
        slide: false,
        pause: 'hover',
        wrap: true,
        touch: true
    };
    var DefaultType = {
        interval: '(number|boolean)',
        keyboard: 'boolean',
        slide: '(boolean|string)',
        pause: '(string|boolean)',
        wrap: 'boolean',
        touch: 'boolean'
    };
    var Direction = {
        NEXT: 'next',
        PREV: 'prev',
        LEFT: 'left',
        RIGHT: 'right'
    };
    var Event = {
        SLIDE: "slide" + EVENT_KEY,
        SLID: "slid" + EVENT_KEY,
        KEYDOWN: "keydown" + EVENT_KEY,
        MOUSEENTER: "mouseenter" + EVENT_KEY,
        MOUSELEAVE: "mouseleave" + EVENT_KEY,
        TOUCHSTART: "touchstart" + EVENT_KEY,
        TOUCHMOVE: "touchmove" + EVENT_KEY,
        TOUCHEND: "touchend" + EVENT_KEY,
        POINTERDOWN: "pointerdown" + EVENT_KEY,
        POINTERUP: "pointerup" + EVENT_KEY,
        DRAG_START: "dragstart" + EVENT_KEY,
        LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        CAROUSEL: 'carousel',
        ACTIVE: 'active',
        SLIDE: 'slide',
        RIGHT: 'carousel-item-right',
        LEFT: 'carousel-item-left',
        NEXT: 'carousel-item-next',
        PREV: 'carousel-item-prev',
        ITEM: 'carousel-item',
        POINTER_EVENT: 'pointer-event'
    };
    var Selector = {
        ACTIVE: '.active',
        ACTIVE_ITEM: '.active.carousel-item',
        ITEM: '.carousel-item',
        ITEM_IMG: '.carousel-item img',
        NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
        INDICATORS: '.carousel-indicators',
        DATA_SLIDE: '[data-slide], [data-slide-to]',
        DATA_RIDE: '[data-ride="carousel"]'
    };
    var PointerType = {
        TOUCH: 'touch',
        PEN: 'pen'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Carousel = (function () {
        function Carousel(element, config) {
            this._items = null;
            this._interval = null;
            this._activeElement = null;
            this._isPaused = false;
            this._isSliding = false;
            this.touchTimeout = null;
            this.touchStartX = 0;
            this.touchDeltaX = 0;
            this._config = this._getConfig(config);
            this._element = element;
            this._indicatorsElement = this._element.querySelector(Selector.INDICATORS);
            this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
            this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);
            this._addEventListeners();
        }
        Object.defineProperty(Carousel, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carousel, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Carousel.prototype.next = function () {
            if (!this._isSliding) {
                this._slide(Direction.NEXT);
            }
        };
        Carousel.prototype.nextWhenVisible = function () {
            // Don't call next when the page isn't visible
            // or the carousel or its parent isn't visible
            if (!document.hidden &&
                (jquery_4["default"](this._element).is(':visible') && jquery_4["default"](this._element).css('visibility') !== 'hidden')) {
                this.next();
            }
        };
        Carousel.prototype.prev = function () {
            if (!this._isSliding) {
                this._slide(Direction.PREV);
            }
        };
        Carousel.prototype.pause = function (event) {
            if (!event) {
                this._isPaused = true;
            }
            if (this._element.querySelector(Selector.NEXT_PREV)) {
                util_2["default"].triggerTransitionEnd(this._element);
                this.cycle(true);
            }
            clearInterval(this._interval);
            this._interval = null;
        };
        Carousel.prototype.cycle = function (event) {
            if (!event) {
                this._isPaused = false;
            }
            if (this._interval) {
                clearInterval(this._interval);
                this._interval = null;
            }
            if (this._config.interval && !this._isPaused) {
                this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
            }
        };
        Carousel.prototype.to = function (index) {
            var _this = this;
            this._activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);
            var activeIndex = this._getItemIndex(this._activeElement);
            if (index > this._items.length - 1 || index < 0) {
                return;
            }
            if (this._isSliding) {
                jquery_4["default"](this._element).one(Event.SLID, function () { return _this.to(index); });
                return;
            }
            if (activeIndex === index) {
                this.pause();
                this.cycle();
                return;
            }
            var direction = index > activeIndex
                ? Direction.NEXT
                : Direction.PREV;
            this._slide(direction, this._items[index]);
        };
        Carousel.prototype.dispose = function () {
            jquery_4["default"](this._element).off(EVENT_KEY);
            jquery_4["default"].removeData(this._element, DATA_KEY);
            this._items = null;
            this._config = null;
            this._element = null;
            this._interval = null;
            this._isPaused = null;
            this._isSliding = null;
            this._activeElement = null;
            this._indicatorsElement = null;
        };
        // Private
        Carousel.prototype._getConfig = function (config) {
            config = __assign({}, Default, config);
            util_2["default"].typeCheckConfig(NAME, config, DefaultType);
            return config;
        };
        Carousel.prototype._handleSwipe = function () {
            var absDeltax = Math.abs(this.touchDeltaX);
            if (absDeltax <= SWIPE_THRESHOLD) {
                return;
            }
            var direction = absDeltax / this.touchDeltaX;
            // swipe left
            if (direction > 0) {
                this.prev();
            }
            // swipe right
            if (direction < 0) {
                this.next();
            }
        };
        Carousel.prototype._addEventListeners = function () {
            var _this = this;
            if (this._config.keyboard) {
                jquery_4["default"](this._element)
                    .on(Event.KEYDOWN, function (event) { return _this._keydown(event); });
            }
            if (this._config.pause === 'hover') {
                jquery_4["default"](this._element)
                    .on(Event.MOUSEENTER, function (event) { return _this.pause(event); })
                    .on(Event.MOUSELEAVE, function (event) { return _this.cycle(event); });
            }
            if (this._config.touch) {
                this._addTouchEventListeners();
            }
        };
        Carousel.prototype._addTouchEventListeners = function () {
            var _this = this;
            if (!this._touchSupported) {
                return;
            }
            var start = function (event) {
                if (_this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                    _this.touchStartX = event.originalEvent.clientX;
                }
                else if (!_this._pointerEvent) {
                    _this.touchStartX = event.originalEvent.touches[0].clientX;
                }
            };
            var move = function (event) {
                // ensure swiping with one touch and not pinching
                if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
                    _this.touchDeltaX = 0;
                }
                else {
                    _this.touchDeltaX = event.originalEvent.touches[0].clientX - _this.touchStartX;
                }
            };
            var end = function (event) {
                if (_this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                    _this.touchDeltaX = event.originalEvent.clientX - _this.touchStartX;
                }
                _this._handleSwipe();
                if (_this._config.pause === 'hover') {
                    // If it's a touch-enabled device, mouseenter/leave are fired as
                    // part of the mouse compatibility events on first tap - the carousel
                    // would stop cycling until user tapped out of it;
                    // here, we listen for touchend, explicitly pause the carousel
                    // (as if it's the second time we tap on it, mouseenter compat event
                    // is NOT fired) and after a timeout (to allow for mouse compatibility
                    // events to fire) we explicitly restart cycling
                    _this.pause();
                    if (_this.touchTimeout) {
                        clearTimeout(_this.touchTimeout);
                    }
                    _this.touchTimeout = setTimeout(function (event) { return _this.cycle(event); }, TOUCHEVENT_COMPAT_WAIT + _this._config.interval);
                }
            };
            jquery_4["default"](this._element.querySelectorAll(Selector.ITEM_IMG)).on(Event.DRAG_START, function (e) { return e.preventDefault(); });
            if (this._pointerEvent) {
                jquery_4["default"](this._element).on(Event.POINTERDOWN, function (event) { return start(event); });
                jquery_4["default"](this._element).on(Event.POINTERUP, function (event) { return end(event); });
                this._element.classList.add(ClassName.POINTER_EVENT);
            }
            else {
                jquery_4["default"](this._element).on(Event.TOUCHSTART, function (event) { return start(event); });
                jquery_4["default"](this._element).on(Event.TOUCHMOVE, function (event) { return move(event); });
                jquery_4["default"](this._element).on(Event.TOUCHEND, function (event) { return end(event); });
            }
        };
        Carousel.prototype._keydown = function (event) {
            if (/input|textarea/i.test(event.target.tagName)) {
                return;
            }
            switch (event.which) {
                case ARROW_LEFT_KEYCODE:
                    event.preventDefault();
                    this.prev();
                    break;
                case ARROW_RIGHT_KEYCODE:
                    event.preventDefault();
                    this.next();
                    break;
                default:
            }
        };
        Carousel.prototype._getItemIndex = function (element) {
            this._items = element && element.parentNode
                ? [].slice.call(element.parentNode.querySelectorAll(Selector.ITEM))
                : [];
            return this._items.indexOf(element);
        };
        Carousel.prototype._getItemByDirection = function (direction, activeElement) {
            var isNextDirection = direction === Direction.NEXT;
            var isPrevDirection = direction === Direction.PREV;
            var activeIndex = this._getItemIndex(activeElement);
            var lastItemIndex = this._items.length - 1;
            var isGoingToWrap = isPrevDirection && activeIndex === 0 ||
                isNextDirection && activeIndex === lastItemIndex;
            if (isGoingToWrap && !this._config.wrap) {
                return activeElement;
            }
            var delta = direction === Direction.PREV ? -1 : 1;
            var itemIndex = (activeIndex + delta) % this._items.length;
            return itemIndex === -1
                ? this._items[this._items.length - 1] : this._items[itemIndex];
        };
        Carousel.prototype._triggerSlideEvent = function (relatedTarget, eventDirectionName) {
            var targetIndex = this._getItemIndex(relatedTarget);
            var fromIndex = this._getItemIndex(this._element.querySelector(Selector.ACTIVE_ITEM));
            var slideEvent = jquery_4["default"].Event(Event.SLIDE, {
                relatedTarget: relatedTarget,
                direction: eventDirectionName,
                from: fromIndex,
                to: targetIndex
            });
            jquery_4["default"](this._element).trigger(slideEvent);
            return slideEvent;
        };
        Carousel.prototype._setActiveIndicatorElement = function (element) {
            if (this._indicatorsElement) {
                var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector.ACTIVE));
                jquery_4["default"](indicators)
                    .removeClass(ClassName.ACTIVE);
                var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];
                if (nextIndicator) {
                    jquery_4["default"](nextIndicator).addClass(ClassName.ACTIVE);
                }
            }
        };
        Carousel.prototype._slide = function (direction, element) {
            var _this = this;
            var activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);
            var activeElementIndex = this._getItemIndex(activeElement);
            var nextElement = element || activeElement &&
                this._getItemByDirection(direction, activeElement);
            var nextElementIndex = this._getItemIndex(nextElement);
            var isCycling = Boolean(this._interval);
            var directionalClassName;
            var orderClassName;
            var eventDirectionName;
            if (direction === Direction.NEXT) {
                directionalClassName = ClassName.LEFT;
                orderClassName = ClassName.NEXT;
                eventDirectionName = Direction.LEFT;
            }
            else {
                directionalClassName = ClassName.RIGHT;
                orderClassName = ClassName.PREV;
                eventDirectionName = Direction.RIGHT;
            }
            if (nextElement && jquery_4["default"](nextElement).hasClass(ClassName.ACTIVE)) {
                this._isSliding = false;
                return;
            }
            var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
            if (slideEvent.isDefaultPrevented()) {
                return;
            }
            if (!activeElement || !nextElement) {
                // Some weirdness is happening, so we bail
                return;
            }
            this._isSliding = true;
            if (isCycling) {
                this.pause();
            }
            this._setActiveIndicatorElement(nextElement);
            var slidEvent = jquery_4["default"].Event(Event.SLID, {
                relatedTarget: nextElement,
                direction: eventDirectionName,
                from: activeElementIndex,
                to: nextElementIndex
            });
            if (jquery_4["default"](this._element).hasClass(ClassName.SLIDE)) {
                jquery_4["default"](nextElement).addClass(orderClassName);
                util_2["default"].reflow(nextElement);
                jquery_4["default"](activeElement).addClass(directionalClassName);
                jquery_4["default"](nextElement).addClass(directionalClassName);
                var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);
                if (nextElementInterval) {
                    this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
                    this._config.interval = nextElementInterval;
                }
                else {
                    this._config.interval = this._config.defaultInterval || this._config.interval;
                }
                var transitionDuration = util_2["default"].getTransitionDurationFromElement(activeElement);
                jquery_4["default"](activeElement)
                    .one(util_2["default"].TRANSITION_END, function () {
                    jquery_4["default"](nextElement)
                        .removeClass(directionalClassName + " " + orderClassName)
                        .addClass(ClassName.ACTIVE);
                    jquery_4["default"](activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
                    _this._isSliding = false;
                    setTimeout(function () { return jquery_4["default"](_this._element).trigger(slidEvent); }, 0);
                })
                    .emulateTransitionEnd(transitionDuration);
            }
            else {
                jquery_4["default"](activeElement).removeClass(ClassName.ACTIVE);
                jquery_4["default"](nextElement).addClass(ClassName.ACTIVE);
                this._isSliding = false;
                jquery_4["default"](this._element).trigger(slidEvent);
            }
            if (isCycling) {
                this.cycle();
            }
        };
        // Static
        Carousel._jQueryInterface = function (config) {
            return this.each(function () {
                var data = jquery_4["default"](this).data(DATA_KEY);
                var _config = __assign({}, Default, jquery_4["default"](this).data());
                if (typeof config === 'object') {
                    _config = __assign({}, _config, config);
                }
                var action = typeof config === 'string' ? config : _config.slide;
                if (!data) {
                    data = new Carousel(this, _config);
                    jquery_4["default"](this).data(DATA_KEY, data);
                }
                if (typeof config === 'number') {
                    data.to(config);
                }
                else if (typeof action === 'string') {
                    if (typeof data[action] === 'undefined') {
                        throw new TypeError("No method named \"" + action + "\"");
                    }
                    data[action]();
                }
                else if (_config.interval && _config.ride) {
                    data.pause();
                    data.cycle();
                }
            });
        };
        Carousel._dataApiClickHandler = function (event) {
            var selector = util_2["default"].getSelectorFromElement(this);
            if (!selector) {
                return;
            }
            var target = jquery_4["default"](selector)[0];
            if (!target || !jquery_4["default"](target).hasClass(ClassName.CAROUSEL)) {
                return;
            }
            var config = __assign({}, jquery_4["default"](target).data(), jquery_4["default"](this).data());
            var slideIndex = this.getAttribute('data-slide-to');
            if (slideIndex) {
                config.interval = false;
            }
            Carousel._jQueryInterface.call(jquery_4["default"](target), config);
            if (slideIndex) {
                jquery_4["default"](target).data(DATA_KEY).to(slideIndex);
            }
            event.preventDefault();
        };
        return Carousel;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_4["default"](document)
        .on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
    jquery_4["default"](window).on(Event.LOAD_DATA_API, function () {
        var carousels = [].slice.call(document.querySelectorAll(Selector.DATA_RIDE));
        for (var i = 0, len = carousels.length; i < len; i++) {
            var $carousel = jquery_4["default"](carousels[i]);
            Carousel._jQueryInterface.call($carousel, $carousel.data());
        }
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_4["default"].fn[NAME] = Carousel._jQueryInterface;
    jquery_4["default"].fn[NAME].Constructor = Carousel;
    jquery_4["default"].fn[NAME].noConflict = function () {
        jquery_4["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Carousel._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Carousel;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("collapse", ["require", "exports", "jquery", "util"], function (require, exports, jquery_5, util_3) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'collapse';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.collapse';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_5["default"].fn[NAME];
    var Default = {
        toggle: true,
        parent: ''
    };
    var DefaultType = {
        toggle: 'boolean',
        parent: '(string|element)'
    };
    var Event = {
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY,
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        SHOW: 'show',
        COLLAPSE: 'collapse',
        COLLAPSING: 'collapsing',
        COLLAPSED: 'collapsed'
    };
    var Dimension = {
        WIDTH: 'width',
        HEIGHT: 'height'
    };
    var Selector = {
        ACTIVES: '.show, .collapsing',
        DATA_TOGGLE: '[data-toggle="collapse"]'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Collapse = (function () {
        function Collapse(element, config) {
            this._isTransitioning = false;
            this._element = element;
            this._config = this._getConfig(config);
            this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," +
                ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
            var toggleList = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));
            for (var i = 0, len = toggleList.length; i < len; i++) {
                var elem = toggleList[i];
                var selector = util_3["default"].getSelectorFromElement(elem);
                var filterElement = [].slice.call(document.querySelectorAll(selector))
                    .filter(function (foundElem) { return foundElem === element; });
                if (selector !== null && filterElement.length > 0) {
                    this._selector = selector;
                    this._triggerArray.push(elem);
                }
            }
            this._parent = this._config.parent ? this._getParent() : null;
            if (!this._config.parent) {
                this._addAriaAndCollapsedClass(this._element, this._triggerArray);
            }
            if (this._config.toggle) {
                this.toggle();
            }
        }
        Object.defineProperty(Collapse, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collapse, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Collapse.prototype.toggle = function () {
            if (jquery_5["default"](this._element).hasClass(ClassName.SHOW)) {
                this.hide();
            }
            else {
                this.show();
            }
        };
        Collapse.prototype.show = function () {
            var _this = this;
            if (this._isTransitioning ||
                jquery_5["default"](this._element).hasClass(ClassName.SHOW)) {
                return;
            }
            var actives;
            var activesData;
            if (this._parent) {
                actives = [].slice.call(this._parent.querySelectorAll(Selector.ACTIVES))
                    .filter(function (elem) {
                    if (typeof _this._config.parent === 'string') {
                        return elem.getAttribute('data-parent') === _this._config.parent;
                    }
                    return elem.classList.contains(ClassName.COLLAPSE);
                });
                if (actives.length === 0) {
                    actives = null;
                }
            }
            if (actives) {
                activesData = jquery_5["default"](actives).not(this._selector).data(DATA_KEY);
                if (activesData && activesData._isTransitioning) {
                    return;
                }
            }
            var startEvent = jquery_5["default"].Event(Event.SHOW);
            jquery_5["default"](this._element).trigger(startEvent);
            if (startEvent.isDefaultPrevented()) {
                return;
            }
            if (actives) {
                Collapse._jQueryInterface.call(jquery_5["default"](actives).not(this._selector), 'hide');
                if (!activesData) {
                    jquery_5["default"](actives).data(DATA_KEY, null);
                }
            }
            var dimension = this._getDimension();
            jquery_5["default"](this._element)
                .removeClass(ClassName.COLLAPSE)
                .addClass(ClassName.COLLAPSING);
            this._element.style[dimension] = 0;
            if (this._triggerArray.length) {
                jquery_5["default"](this._triggerArray)
                    .removeClass(ClassName.COLLAPSED)
                    .attr('aria-expanded', true);
            }
            this.setTransitioning(true);
            var complete = function () {
                jquery_5["default"](_this._element)
                    .removeClass(ClassName.COLLAPSING)
                    .addClass(ClassName.COLLAPSE)
                    .addClass(ClassName.SHOW);
                _this._element.style[dimension] = '';
                _this.setTransitioning(false);
                jquery_5["default"](_this._element).trigger(Event.SHOWN);
            };
            var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
            var scrollSize = "scroll" + capitalizedDimension;
            var transitionDuration = util_3["default"].getTransitionDurationFromElement(this._element);
            jquery_5["default"](this._element)
                .one(util_3["default"].TRANSITION_END, complete)
                .emulateTransitionEnd(transitionDuration);
            this._element.style[dimension] = this._element[scrollSize] + "px";
        };
        Collapse.prototype.hide = function () {
            var _this = this;
            if (this._isTransitioning ||
                !jquery_5["default"](this._element).hasClass(ClassName.SHOW)) {
                return;
            }
            var startEvent = jquery_5["default"].Event(Event.HIDE);
            jquery_5["default"](this._element).trigger(startEvent);
            if (startEvent.isDefaultPrevented()) {
                return;
            }
            var dimension = this._getDimension();
            this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
            util_3["default"].reflow(this._element);
            jquery_5["default"](this._element)
                .addClass(ClassName.COLLAPSING)
                .removeClass(ClassName.COLLAPSE)
                .removeClass(ClassName.SHOW);
            var triggerArrayLength = this._triggerArray.length;
            if (triggerArrayLength > 0) {
                for (var i = 0; i < triggerArrayLength; i++) {
                    var trigger = this._triggerArray[i];
                    var selector = util_3["default"].getSelectorFromElement(trigger);
                    if (selector !== null) {
                        var $elem = jquery_5["default"]([].slice.call(document.querySelectorAll(selector)));
                        if (!$elem.hasClass(ClassName.SHOW)) {
                            jquery_5["default"](trigger).addClass(ClassName.COLLAPSED)
                                .attr('aria-expanded', false);
                        }
                    }
                }
            }
            this.setTransitioning(true);
            var complete = function () {
                _this.setTransitioning(false);
                jquery_5["default"](_this._element)
                    .removeClass(ClassName.COLLAPSING)
                    .addClass(ClassName.COLLAPSE)
                    .trigger(Event.HIDDEN);
            };
            this._element.style[dimension] = '';
            var transitionDuration = util_3["default"].getTransitionDurationFromElement(this._element);
            jquery_5["default"](this._element)
                .one(util_3["default"].TRANSITION_END, complete)
                .emulateTransitionEnd(transitionDuration);
        };
        Collapse.prototype.setTransitioning = function (isTransitioning) {
            this._isTransitioning = isTransitioning;
        };
        Collapse.prototype.dispose = function () {
            jquery_5["default"].removeData(this._element, DATA_KEY);
            this._config = null;
            this._parent = null;
            this._element = null;
            this._triggerArray = null;
            this._isTransitioning = null;
        };
        // Private
        Collapse.prototype._getConfig = function (config) {
            config = __assign({}, Default, config);
            config.toggle = Boolean(config.toggle); // Coerce string values
            util_3["default"].typeCheckConfig(NAME, config, DefaultType);
            return config;
        };
        Collapse.prototype._getDimension = function () {
            var hasWidth = jquery_5["default"](this._element).hasClass(Dimension.WIDTH);
            return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
        };
        Collapse.prototype._getParent = function () {
            var _this = this;
            var parent;
            if (util_3["default"].isElement(this._config.parent)) {
                parent = this._config.parent;
                // It's a jQuery object
                if (typeof this._config.parent.jquery !== 'undefined') {
                    parent = this._config.parent[0];
                }
            }
            else {
                parent = document.querySelector(this._config.parent);
            }
            var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
            var children = [].slice.call(parent.querySelectorAll(selector));
            jquery_5["default"](children).each(function (i, element) {
                _this._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
            });
            return parent;
        };
        Collapse.prototype._addAriaAndCollapsedClass = function (element, triggerArray) {
            var isOpen = jquery_5["default"](element).hasClass(ClassName.SHOW);
            if (triggerArray.length) {
                jquery_5["default"](triggerArray)
                    .toggleClass(ClassName.COLLAPSED, !isOpen)
                    .attr('aria-expanded', isOpen);
            }
        };
        // Static
        Collapse._getTargetFromElement = function (element) {
            var selector = util_3["default"].getSelectorFromElement(element);
            return selector ? document.querySelector(selector) : null;
        };
        Collapse._jQueryInterface = function (config) {
            return this.each(function () {
                var $this = jquery_5["default"](this);
                var data = $this.data(DATA_KEY);
                var _config = __assign({}, Default, $this.data(), typeof config === 'object' && config ? config : {});
                if (!data && _config.toggle && /show|hide/.test(config)) {
                    _config.toggle = false;
                }
                if (!data) {
                    data = new Collapse(this, _config);
                    $this.data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        return Collapse;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_5["default"](document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
        if (event.currentTarget.tagName === 'A') {
            event.preventDefault();
        }
        var $trigger = jquery_5["default"](this);
        var selector = util_3["default"].getSelectorFromElement(this);
        var selectors = [].slice.call(document.querySelectorAll(selector));
        jquery_5["default"](selectors).each(function () {
            var $target = jquery_5["default"](this);
            var data = $target.data(DATA_KEY);
            var config = data ? 'toggle' : $trigger.data();
            Collapse._jQueryInterface.call($target, config);
        });
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_5["default"].fn[NAME] = Collapse._jQueryInterface;
    jquery_5["default"].fn[NAME].Constructor = Collapse;
    jquery_5["default"].fn[NAME].noConflict = function () {
        jquery_5["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Collapse._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Collapse;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("dropdown", ["require", "exports", "jquery", "popper.js", "util"], function (require, exports, jquery_6, popper_js_1, util_4) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'dropdown';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.dropdown';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_6["default"].fn[NAME];
    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key
    var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key
    var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key
    var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key
    var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key
    var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)
    var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
    var Event = {
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY,
        CLICK: "click" + EVENT_KEY,
        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
        KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
        KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        DISABLED: 'disabled',
        SHOW: 'show',
        DROPUP: 'dropup',
        DROPRIGHT: 'dropright',
        DROPLEFT: 'dropleft',
        MENURIGHT: 'dropdown-menu-right',
        MENULEFT: 'dropdown-menu-left',
        POSITION_STATIC: 'position-static'
    };
    var Selector = {
        DATA_TOGGLE: '[data-toggle="dropdown"]',
        FORM_CHILD: '.dropdown form',
        MENU: '.dropdown-menu',
        NAVBAR_NAV: '.navbar-nav',
        VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
    };
    var AttachmentMap = {
        TOP: 'top-start',
        TOPEND: 'top-end',
        BOTTOM: 'bottom-start',
        BOTTOMEND: 'bottom-end',
        RIGHT: 'right-start',
        RIGHTEND: 'right-end',
        LEFT: 'left-start',
        LEFTEND: 'left-end'
    };
    var Default = {
        offset: 0,
        flip: true,
        boundary: 'scrollParent',
        reference: 'toggle',
        display: 'dynamic'
    };
    var DefaultType = {
        offset: '(number|string|function)',
        flip: 'boolean',
        boundary: '(string|element)',
        reference: '(string|element)',
        display: 'string'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Dropdown = (function () {
        function Dropdown(element, config) {
            this._element = element;
            this._popper = null;
            this._config = this._getConfig(config);
            this._menu = this._getMenuElement();
            this._inNavbar = this._detectNavbar();
            this._addEventListeners();
        }
        Object.defineProperty(Dropdown, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dropdown, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dropdown, "DefaultType", {
            get: function () {
                return DefaultType;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Dropdown.prototype.toggle = function () {
            if (this._element.disabled || jquery_6["default"](this._element).hasClass(ClassName.DISABLED)) {
                return;
            }
            var parent = Dropdown._getParentFromElement(this._element);
            var isActive = jquery_6["default"](this._menu).hasClass(ClassName.SHOW);
            Dropdown._clearMenus();
            if (isActive) {
                return;
            }
            var relatedTarget = {
                relatedTarget: this._element
            };
            var showEvent = jquery_6["default"].Event(Event.SHOW, relatedTarget);
            jquery_6["default"](parent).trigger(showEvent);
            if (showEvent.isDefaultPrevented()) {
                return;
            }
            // Disable totally Popper.js for Dropdown in Navbar
            if (!this._inNavbar) {
                /**
                 * Check for Popper dependency
                 * Popper - https://popper.js.org
                 */
                if (typeof popper_js_1["default"] === 'undefined') {
                    throw new TypeError('Bootstrap\'s dropdowns require Popper.js (https://popper.js.org/)');
                }
                var referenceElement = this._element;
                if (this._config.reference === 'parent') {
                    referenceElement = parent;
                }
                else if (util_4["default"].isElement(this._config.reference)) {
                    referenceElement = this._config.reference;
                    // Check if it's jQuery element
                    if (typeof this._config.reference.jquery !== 'undefined') {
                        referenceElement = this._config.reference[0];
                    }
                }
                // If boundary is not `scrollParent`, then set position to `static`
                // to allow the menu to "escape" the scroll parent's boundaries
                // https://github.com/twbs/bootstrap/issues/24251
                if (this._config.boundary !== 'scrollParent') {
                    jquery_6["default"](parent).addClass(ClassName.POSITION_STATIC);
                }
                this._popper = new popper_js_1["default"](referenceElement, this._menu, this._getPopperConfig());
            }
            // If this is a touch-enabled device we add extra
            // empty mouseover listeners to the body's immediate children;
            // only needed because of broken event delegation on iOS
            // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
            if ('ontouchstart' in document.documentElement &&
                jquery_6["default"](parent).closest(Selector.NAVBAR_NAV).length === 0) {
                jquery_6["default"](document.body).children().on('mouseover', null, jquery_6["default"].noop);
            }
            this._element.focus();
            this._element.setAttribute('aria-expanded', true);
            jquery_6["default"](this._menu).toggleClass(ClassName.SHOW);
            jquery_6["default"](parent)
                .toggleClass(ClassName.SHOW)
                .trigger(jquery_6["default"].Event(Event.SHOWN, relatedTarget));
        };
        Dropdown.prototype.show = function () {
            if (this._element.disabled || jquery_6["default"](this._element).hasClass(ClassName.DISABLED) || jquery_6["default"](this._menu).hasClass(ClassName.SHOW)) {
                return;
            }
            var relatedTarget = {
                relatedTarget: this._element
            };
            var showEvent = jquery_6["default"].Event(Event.SHOW, relatedTarget);
            var parent = Dropdown._getParentFromElement(this._element);
            jquery_6["default"](parent).trigger(showEvent);
            if (showEvent.isDefaultPrevented()) {
                return;
            }
            jquery_6["default"](this._menu).toggleClass(ClassName.SHOW);
            jquery_6["default"](parent)
                .toggleClass(ClassName.SHOW)
                .trigger(jquery_6["default"].Event(Event.SHOWN, relatedTarget));
        };
        Dropdown.prototype.hide = function () {
            if (this._element.disabled || jquery_6["default"](this._element).hasClass(ClassName.DISABLED) || !jquery_6["default"](this._menu).hasClass(ClassName.SHOW)) {
                return;
            }
            var relatedTarget = {
                relatedTarget: this._element
            };
            var hideEvent = jquery_6["default"].Event(Event.HIDE, relatedTarget);
            var parent = Dropdown._getParentFromElement(this._element);
            jquery_6["default"](parent).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
                return;
            }
            jquery_6["default"](this._menu).toggleClass(ClassName.SHOW);
            jquery_6["default"](parent)
                .toggleClass(ClassName.SHOW)
                .trigger(jquery_6["default"].Event(Event.HIDDEN, relatedTarget));
        };
        Dropdown.prototype.dispose = function () {
            jquery_6["default"].removeData(this._element, DATA_KEY);
            jquery_6["default"](this._element).off(EVENT_KEY);
            this._element = null;
            this._menu = null;
            if (this._popper !== null) {
                this._popper.destroy();
                this._popper = null;
            }
        };
        Dropdown.prototype.update = function () {
            this._inNavbar = this._detectNavbar();
            if (this._popper !== null) {
                this._popper.scheduleUpdate();
            }
        };
        // Private
        Dropdown.prototype._addEventListeners = function () {
            var _this = this;
            jquery_6["default"](this._element).on(Event.CLICK, function (event) {
                event.preventDefault();
                event.stopPropagation();
                _this.toggle();
            });
        };
        Dropdown.prototype._getConfig = function (config) {
            config = __assign({}, this.constructor.Default, jquery_6["default"](this._element).data(), config);
            util_4["default"].typeCheckConfig(NAME, config, this.constructor.DefaultType);
            return config;
        };
        Dropdown.prototype._getMenuElement = function () {
            if (!this._menu) {
                var parent_1 = Dropdown._getParentFromElement(this._element);
                if (parent_1) {
                    this._menu = parent_1.querySelector(Selector.MENU);
                }
            }
            return this._menu;
        };
        Dropdown.prototype._getPlacement = function () {
            var $parentDropdown = jquery_6["default"](this._element.parentNode);
            var placement = AttachmentMap.BOTTOM;
            // Handle dropup
            if ($parentDropdown.hasClass(ClassName.DROPUP)) {
                placement = AttachmentMap.TOP;
                if (jquery_6["default"](this._menu).hasClass(ClassName.MENURIGHT)) {
                    placement = AttachmentMap.TOPEND;
                }
            }
            else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
                placement = AttachmentMap.RIGHT;
            }
            else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
                placement = AttachmentMap.LEFT;
            }
            else if (jquery_6["default"](this._menu).hasClass(ClassName.MENURIGHT)) {
                placement = AttachmentMap.BOTTOMEND;
            }
            return placement;
        };
        Dropdown.prototype._detectNavbar = function () {
            return jquery_6["default"](this._element).closest('.navbar').length > 0;
        };
        Dropdown.prototype._getOffset = function () {
            var _this = this;
            var offset = {};
            if (typeof this._config.offset === 'function') {
                offset.fn = function (data) {
                    data.offsets = __assign({}, data.offsets, _this._config.offset(data.offsets, _this._element) || {});
                    return data;
                };
            }
            else {
                offset.offset = this._config.offset;
            }
            return offset;
        };
        Dropdown.prototype._getPopperConfig = function () {
            var popperConfig = {
                placement: this._getPlacement(),
                modifiers: {
                    offset: this._getOffset(),
                    flip: {
                        enabled: this._config.flip
                    },
                    preventOverflow: {
                        boundariesElement: this._config.boundary
                    }
                }
            };
            // Disable Popper.js if we have a static display
            if (this._config.display === 'static') {
                popperConfig.modifiers.applyStyle = {
                    enabled: false
                };
            }
            return popperConfig;
        };
        // Static
        Dropdown._jQueryInterface = function (config) {
            return this.each(function () {
                var data = jquery_6["default"](this).data(DATA_KEY);
                var _config = typeof config === 'object' ? config : null;
                if (!data) {
                    data = new Dropdown(this, _config);
                    jquery_6["default"](this).data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        Dropdown._clearMenus = function (event) {
            if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH ||
                event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
                return;
            }
            var toggles = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));
            for (var i = 0, len = toggles.length; i < len; i++) {
                var parent_2 = Dropdown._getParentFromElement(toggles[i]);
                var context = jquery_6["default"](toggles[i]).data(DATA_KEY);
                var relatedTarget = {
                    relatedTarget: toggles[i]
                };
                if (event && event.type === 'click') {
                    relatedTarget.clickEvent = event;
                }
                if (!context) {
                    continue;
                }
                var dropdownMenu = context._menu;
                if (!jquery_6["default"](parent_2).hasClass(ClassName.SHOW)) {
                    continue;
                }
                if (event && (event.type === 'click' &&
                    /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) &&
                    jquery_6["default"].contains(parent_2, event.target)) {
                    continue;
                }
                var hideEvent = jquery_6["default"].Event(Event.HIDE, relatedTarget);
                jquery_6["default"](parent_2).trigger(hideEvent);
                if (hideEvent.isDefaultPrevented()) {
                    continue;
                }
                // If this is a touch-enabled device we remove the extra
                // empty mouseover listeners we added for iOS support
                if ('ontouchstart' in document.documentElement) {
                    jquery_6["default"](document.body).children().off('mouseover', null, jquery_6["default"].noop);
                }
                toggles[i].setAttribute('aria-expanded', 'false');
                jquery_6["default"](dropdownMenu).removeClass(ClassName.SHOW);
                jquery_6["default"](parent_2)
                    .removeClass(ClassName.SHOW)
                    .trigger(jquery_6["default"].Event(Event.HIDDEN, relatedTarget));
            }
        };
        Dropdown._getParentFromElement = function (element) {
            var parent;
            var selector = util_4["default"].getSelectorFromElement(element);
            if (selector) {
                parent = document.querySelector(selector);
            }
            return parent || element.parentNode;
        };
        // eslint-disable-next-line complexity
        Dropdown._dataApiKeydownHandler = function (event) {
            // If not input/textarea:
            //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
            // If input/textarea:
            //  - If space key => not a dropdown command
            //  - If key is other than escape
            //    - If key is not up or down => not a dropdown command
            //    - If trigger inside the menu => not a dropdown command
            if (/input|textarea/i.test(event.target.tagName)
                ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE &&
                    (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE ||
                        jquery_6["default"](event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            if (this.disabled || jquery_6["default"](this).hasClass(ClassName.DISABLED)) {
                return;
            }
            var parent = Dropdown._getParentFromElement(this);
            var isActive = jquery_6["default"](parent).hasClass(ClassName.SHOW);
            if (!isActive || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                if (event.which === ESCAPE_KEYCODE) {
                    var toggle = parent.querySelector(Selector.DATA_TOGGLE);
                    jquery_6["default"](toggle).trigger('focus');
                }
                jquery_6["default"](this).trigger('click');
                return;
            }
            var items = [].slice.call(parent.querySelectorAll(Selector.VISIBLE_ITEMS));
            if (items.length === 0) {
                return;
            }
            var index = items.indexOf(event.target);
            if (event.which === ARROW_UP_KEYCODE && index > 0) {
                index--;
            }
            if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                index++;
            }
            if (index < 0) {
                index = 0;
            }
            items[index].focus();
        };
        return Dropdown;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_6["default"](document)
        .on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler)
        .on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler)
        .on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus)
        .on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
        event.preventDefault();
        event.stopPropagation();
        Dropdown._jQueryInterface.call(jquery_6["default"](this), 'toggle');
    })
        .on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
        e.stopPropagation();
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_6["default"].fn[NAME] = Dropdown._jQueryInterface;
    jquery_6["default"].fn[NAME].Constructor = Dropdown;
    jquery_6["default"].fn[NAME].noConflict = function () {
        jquery_6["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Dropdown._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Dropdown;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("modal", ["require", "exports", "jquery", "util"], function (require, exports, jquery_7, util_5) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'modal';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.modal';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_7["default"].fn[NAME];
    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key
    var Default = {
        backdrop: true,
        keyboard: true,
        focus: true,
        show: true
    };
    var DefaultType = {
        backdrop: '(boolean|string)',
        keyboard: 'boolean',
        focus: 'boolean',
        show: 'boolean'
    };
    var Event = {
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY,
        FOCUSIN: "focusin" + EVENT_KEY,
        RESIZE: "resize" + EVENT_KEY,
        CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
        KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
        MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
        MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        SCROLLABLE: 'modal-dialog-scrollable',
        SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
        BACKDROP: 'modal-backdrop',
        OPEN: 'modal-open',
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector = {
        DIALOG: '.modal-dialog',
        MODAL_BODY: '.modal-body',
        DATA_TOGGLE: '[data-toggle="modal"]',
        DATA_DISMISS: '[data-dismiss="modal"]',
        FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
        STICKY_CONTENT: '.sticky-top'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Modal = (function () {
        function Modal(element, config) {
            this._config = this._getConfig(config);
            this._element = element;
            this._dialog = element.querySelector(Selector.DIALOG);
            this._backdrop = null;
            this._isShown = false;
            this._isBodyOverflowing = false;
            this._ignoreBackdropClick = false;
            this._isTransitioning = false;
            this._scrollbarWidth = 0;
        }
        Object.defineProperty(Modal, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Modal.prototype.toggle = function (relatedTarget) {
            return this._isShown ? this.hide() : this.show(relatedTarget);
        };
        Modal.prototype.show = function (relatedTarget) {
            var _this = this;
            if (this._isShown || this._isTransitioning) {
                return;
            }
            if (jquery_7["default"](this._element).hasClass(ClassName.FADE)) {
                this._isTransitioning = true;
            }
            var showEvent = jquery_7["default"].Event(Event.SHOW, {
                relatedTarget: relatedTarget
            });
            jquery_7["default"](this._element).trigger(showEvent);
            if (this._isShown || showEvent.isDefaultPrevented()) {
                return;
            }
            this._isShown = true;
            this._checkScrollbar();
            this._setScrollbar();
            this._adjustDialog();
            this._setEscapeEvent();
            this._setResizeEvent();
            jquery_7["default"](this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) { return _this.hide(event); });
            jquery_7["default"](this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
                jquery_7["default"](_this._element).one(Event.MOUSEUP_DISMISS, function (event) {
                    if (jquery_7["default"](event.target).is(_this._element)) {
                        _this._ignoreBackdropClick = true;
                    }
                });
            });
            this._showBackdrop(function () { return _this._showElement(relatedTarget); });
        };
        Modal.prototype.hide = function (event) {
            var _this = this;
            if (event) {
                event.preventDefault();
            }
            if (!this._isShown || this._isTransitioning) {
                return;
            }
            var hideEvent = jquery_7["default"].Event(Event.HIDE);
            jquery_7["default"](this._element).trigger(hideEvent);
            if (!this._isShown || hideEvent.isDefaultPrevented()) {
                return;
            }
            this._isShown = false;
            var transition = jquery_7["default"](this._element).hasClass(ClassName.FADE);
            if (transition) {
                this._isTransitioning = true;
            }
            this._setEscapeEvent();
            this._setResizeEvent();
            jquery_7["default"](document).off(Event.FOCUSIN);
            jquery_7["default"](this._element).removeClass(ClassName.SHOW);
            jquery_7["default"](this._element).off(Event.CLICK_DISMISS);
            jquery_7["default"](this._dialog).off(Event.MOUSEDOWN_DISMISS);
            if (transition) {
                var transitionDuration = util_5["default"].getTransitionDurationFromElement(this._element);
                jquery_7["default"](this._element)
                    .one(util_5["default"].TRANSITION_END, function (event) { return _this._hideModal(event); })
                    .emulateTransitionEnd(transitionDuration);
            }
            else {
                this._hideModal();
            }
        };
        Modal.prototype.dispose = function () {
            [window, this._element, this._dialog]
                .forEach(function (htmlElement) { return jquery_7["default"](htmlElement).off(EVENT_KEY); });
            /**
             * `document` has 2 events `Event.FOCUSIN` and `Event.CLICK_DATA_API`
             * Do not move `document` in `htmlElements` array
             * It will remove `Event.CLICK_DATA_API` event that should remain
             */
            jquery_7["default"](document).off(Event.FOCUSIN);
            jquery_7["default"].removeData(this._element, DATA_KEY);
            this._config = null;
            this._element = null;
            this._dialog = null;
            this._backdrop = null;
            this._isShown = null;
            this._isBodyOverflowing = null;
            this._ignoreBackdropClick = null;
            this._isTransitioning = null;
            this._scrollbarWidth = null;
        };
        Modal.prototype.handleUpdate = function () {
            this._adjustDialog();
        };
        // Private
        Modal.prototype._getConfig = function (config) {
            config = __assign({}, Default, config);
            util_5["default"].typeCheckConfig(NAME, config, DefaultType);
            return config;
        };
        Modal.prototype._showElement = function (relatedTarget) {
            var _this = this;
            var transition = jquery_7["default"](this._element).hasClass(ClassName.FADE);
            if (!this._element.parentNode ||
                this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                // Don't move modal's DOM position
                document.body.appendChild(this._element);
            }
            this._element.style.display = 'block';
            this._element.removeAttribute('aria-hidden');
            this._element.setAttribute('aria-modal', true);
            if (jquery_7["default"](this._dialog).hasClass(ClassName.SCROLLABLE)) {
                this._dialog.querySelector(Selector.MODAL_BODY).scrollTop = 0;
            }
            else {
                this._element.scrollTop = 0;
            }
            if (transition) {
                util_5["default"].reflow(this._element);
            }
            jquery_7["default"](this._element).addClass(ClassName.SHOW);
            if (this._config.focus) {
                this._enforceFocus();
            }
            var shownEvent = jquery_7["default"].Event(Event.SHOWN, {
                relatedTarget: relatedTarget
            });
            var transitionComplete = function () {
                if (_this._config.focus) {
                    _this._element.focus();
                }
                _this._isTransitioning = false;
                jquery_7["default"](_this._element).trigger(shownEvent);
            };
            if (transition) {
                var transitionDuration = util_5["default"].getTransitionDurationFromElement(this._dialog);
                jquery_7["default"](this._dialog)
                    .one(util_5["default"].TRANSITION_END, transitionComplete)
                    .emulateTransitionEnd(transitionDuration);
            }
            else {
                transitionComplete();
            }
        };
        Modal.prototype._enforceFocus = function () {
            var _this = this;
            jquery_7["default"](document)
                .off(Event.FOCUSIN) // Guard against infinite focus loop
                .on(Event.FOCUSIN, function (event) {
                if (document !== event.target &&
                    _this._element !== event.target &&
                    jquery_7["default"](_this._element).has(event.target).length === 0) {
                    _this._element.focus();
                }
            });
        };
        Modal.prototype._setEscapeEvent = function () {
            var _this = this;
            if (this._isShown && this._config.keyboard) {
                jquery_7["default"](this._element).on(Event.KEYDOWN_DISMISS, function (event) {
                    if (event.which === ESCAPE_KEYCODE) {
                        event.preventDefault();
                        _this.hide();
                    }
                });
            }
            else if (!this._isShown) {
                jquery_7["default"](this._element).off(Event.KEYDOWN_DISMISS);
            }
        };
        Modal.prototype._setResizeEvent = function () {
            var _this = this;
            if (this._isShown) {
                jquery_7["default"](window).on(Event.RESIZE, function (event) { return _this.handleUpdate(event); });
            }
            else {
                jquery_7["default"](window).off(Event.RESIZE);
            }
        };
        Modal.prototype._hideModal = function () {
            var _this = this;
            this._element.style.display = 'none';
            this._element.setAttribute('aria-hidden', true);
            this._element.removeAttribute('aria-modal');
            this._isTransitioning = false;
            this._showBackdrop(function () {
                jquery_7["default"](document.body).removeClass(ClassName.OPEN);
                _this._resetAdjustments();
                _this._resetScrollbar();
                jquery_7["default"](_this._element).trigger(Event.HIDDEN);
            });
        };
        Modal.prototype._removeBackdrop = function () {
            if (this._backdrop) {
                jquery_7["default"](this._backdrop).remove();
                this._backdrop = null;
            }
        };
        Modal.prototype._showBackdrop = function (callback) {
            var _this = this;
            var animate = jquery_7["default"](this._element).hasClass(ClassName.FADE)
                ? ClassName.FADE : '';
            if (this._isShown && this._config.backdrop) {
                this._backdrop = document.createElement('div');
                this._backdrop.className = ClassName.BACKDROP;
                if (animate) {
                    this._backdrop.classList.add(animate);
                }
                jquery_7["default"](this._backdrop).appendTo(document.body);
                jquery_7["default"](this._element).on(Event.CLICK_DISMISS, function (event) {
                    if (_this._ignoreBackdropClick) {
                        _this._ignoreBackdropClick = false;
                        return;
                    }
                    if (event.target !== event.currentTarget) {
                        return;
                    }
                    if (_this._config.backdrop === 'static') {
                        _this._element.focus();
                    }
                    else {
                        _this.hide();
                    }
                });
                if (animate) {
                    util_5["default"].reflow(this._backdrop);
                }
                jquery_7["default"](this._backdrop).addClass(ClassName.SHOW);
                if (!callback) {
                    return;
                }
                if (!animate) {
                    callback();
                    return;
                }
                var backdropTransitionDuration = util_5["default"].getTransitionDurationFromElement(this._backdrop);
                jquery_7["default"](this._backdrop)
                    .one(util_5["default"].TRANSITION_END, callback)
                    .emulateTransitionEnd(backdropTransitionDuration);
            }
            else if (!this._isShown && this._backdrop) {
                jquery_7["default"](this._backdrop).removeClass(ClassName.SHOW);
                var callbackRemove = function () {
                    _this._removeBackdrop();
                    if (callback) {
                        callback();
                    }
                };
                if (jquery_7["default"](this._element).hasClass(ClassName.FADE)) {
                    var backdropTransitionDuration = util_5["default"].getTransitionDurationFromElement(this._backdrop);
                    jquery_7["default"](this._backdrop)
                        .one(util_5["default"].TRANSITION_END, callbackRemove)
                        .emulateTransitionEnd(backdropTransitionDuration);
                }
                else {
                    callbackRemove();
                }
            }
            else if (callback) {
                callback();
            }
        };
        // ----------------------------------------------------------------------
        // the following methods are used to handle overflowing modals
        // todo (fat): these should probably be refactored out of modal.js
        // ----------------------------------------------------------------------
        Modal.prototype._adjustDialog = function () {
            var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
            if (!this._isBodyOverflowing && isModalOverflowing) {
                this._element.style.paddingLeft = this._scrollbarWidth + "px";
            }
            if (this._isBodyOverflowing && !isModalOverflowing) {
                this._element.style.paddingRight = this._scrollbarWidth + "px";
            }
        };
        Modal.prototype._resetAdjustments = function () {
            this._element.style.paddingLeft = '';
            this._element.style.paddingRight = '';
        };
        Modal.prototype._checkScrollbar = function () {
            var rect = document.body.getBoundingClientRect();
            this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
            this._scrollbarWidth = this._getScrollbarWidth();
        };
        Modal.prototype._setScrollbar = function () {
            var _this = this;
            if (this._isBodyOverflowing) {
                // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
                //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
                var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));
                var stickyContent = [].slice.call(document.querySelectorAll(Selector.STICKY_CONTENT));
                // Adjust fixed content padding
                jquery_7["default"](fixedContent).each(function (index, element) {
                    var actualPadding = element.style.paddingRight;
                    var calculatedPadding = jquery_7["default"](element).css('padding-right');
                    jquery_7["default"](element)
                        .data('padding-right', actualPadding)
                        .css('padding-right', parseFloat(calculatedPadding) + _this._scrollbarWidth + "px");
                });
                // Adjust sticky content margin
                jquery_7["default"](stickyContent).each(function (index, element) {
                    var actualMargin = element.style.marginRight;
                    var calculatedMargin = jquery_7["default"](element).css('margin-right');
                    jquery_7["default"](element)
                        .data('margin-right', actualMargin)
                        .css('margin-right', parseFloat(calculatedMargin) - _this._scrollbarWidth + "px");
                });
                // Adjust body padding
                var actualPadding = document.body.style.paddingRight;
                var calculatedPadding = jquery_7["default"](document.body).css('padding-right');
                jquery_7["default"](document.body)
                    .data('padding-right', actualPadding)
                    .css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
            }
            jquery_7["default"](document.body).addClass(ClassName.OPEN);
        };
        Modal.prototype._resetScrollbar = function () {
            // Restore fixed content padding
            var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));
            jquery_7["default"](fixedContent).each(function (index, element) {
                var padding = jquery_7["default"](element).data('padding-right');
                jquery_7["default"](element).removeData('padding-right');
                element.style.paddingRight = padding ? padding : '';
            });
            // Restore sticky content
            var elements = [].slice.call(document.querySelectorAll("" + Selector.STICKY_CONTENT));
            jquery_7["default"](elements).each(function (index, element) {
                var margin = jquery_7["default"](element).data('margin-right');
                if (typeof margin !== 'undefined') {
                    jquery_7["default"](element).css('margin-right', margin).removeData('margin-right');
                }
            });
            // Restore body padding
            var padding = jquery_7["default"](document.body).data('padding-right');
            jquery_7["default"](document.body).removeData('padding-right');
            document.body.style.paddingRight = padding ? padding : '';
        };
        Modal.prototype._getScrollbarWidth = function () {
            var scrollDiv = document.createElement('div');
            scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
            document.body.appendChild(scrollDiv);
            var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
            return scrollbarWidth;
        };
        // Static
        Modal._jQueryInterface = function (config, relatedTarget) {
            return this.each(function () {
                var data = jquery_7["default"](this).data(DATA_KEY);
                var _config = __assign({}, Default, jquery_7["default"](this).data(), typeof config === 'object' && config ? config : {});
                if (!data) {
                    data = new Modal(this, _config);
                    jquery_7["default"](this).data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config](relatedTarget);
                }
                else if (_config.show) {
                    data.show(relatedTarget);
                }
            });
        };
        return Modal;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_7["default"](document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
        var _this = this;
        var target;
        var selector = util_5["default"].getSelectorFromElement(this);
        if (selector) {
            target = document.querySelector(selector);
        }
        var config = jquery_7["default"](target).data(DATA_KEY)
            ? 'toggle' : __assign({}, jquery_7["default"](target).data(), jquery_7["default"](this).data());
        if (this.tagName === 'A' || this.tagName === 'AREA') {
            event.preventDefault();
        }
        var $target = jquery_7["default"](target).one(Event.SHOW, function (showEvent) {
            if (showEvent.isDefaultPrevented()) {
                // Only register focus restorer if modal will actually get shown
                return;
            }
            $target.one(Event.HIDDEN, function () {
                if (jquery_7["default"](_this).is(':visible')) {
                    _this.focus();
                }
            });
        });
        Modal._jQueryInterface.call(jquery_7["default"](target), config, this);
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_7["default"].fn[NAME] = Modal._jQueryInterface;
    jquery_7["default"].fn[NAME].Constructor = Modal;
    jquery_7["default"].fn[NAME].noConflict = function () {
        jquery_7["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Modal._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Modal;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): tools/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("tools/sanitizer", ["require", "exports"], function (require, exports) {
    "use strict";
    var uriAttrs = [
        'background',
        'cite',
        'href',
        'itemtype',
        'longdesc',
        'poster',
        'src',
        'xlink:href'
    ];
    var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
    exports.DefaultWhitelist = {
        // Global attributes allowed on any supplied element below.
        '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
        a: ['target', 'href', 'title', 'rel'],
        area: [],
        b: [],
        br: [],
        col: [],
        code: [],
        div: [],
        em: [],
        hr: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        i: [],
        img: ['src', 'alt', 'title', 'width', 'height'],
        li: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        u: [],
        ul: []
    };
    /**
     * A pattern that recognizes a commonly useful subset of URLs that are safe.
     *
     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
     */
    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    /**
     * A pattern that matches safe data URLs. Only matches image, video and audio types.
     *
     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
     */
    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;
    function allowedAttribute(attr, allowedAttributeList) {
        var attrName = attr.nodeName.toLowerCase();
        if (allowedAttributeList.indexOf(attrName) !== -1) {
            if (uriAttrs.indexOf(attrName) !== -1) {
                return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
            }
            return true;
        }
        var regExp = allowedAttributeList.filter(function (attrRegex) { return attrRegex instanceof RegExp; });
        // Check if a regular expression validates the attribute.
        for (var i = 0, l = regExp.length; i < l; i++) {
            if (attrName.match(regExp[i])) {
                return true;
            }
        }
        return false;
    }
    function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
        if (unsafeHtml.length === 0) {
            return unsafeHtml;
        }
        if (sanitizeFn && typeof sanitizeFn === 'function') {
            return sanitizeFn(unsafeHtml);
        }
        var domParser = new window.DOMParser();
        var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
        var whitelistKeys = Object.keys(whiteList);
        var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));
        var _loop_1 = function (i, len) {
            var el = elements[i];
            var elName = el.nodeName.toLowerCase();
            if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
                el.parentNode.removeChild(el);
                return "continue";
            }
            var attributeList = [].slice.call(el.attributes);
            var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
            attributeList.forEach(function (attr) {
                if (!allowedAttribute(attr, whitelistedAttributes)) {
                    el.removeAttribute(attr.nodeName);
                }
            });
        };
        for (var i = 0, len = elements.length; i < len; i++) {
            _loop_1(i, len);
        }
        return createdDocument.body.innerHTML;
    }
    exports.sanitizeHtml = sanitizeHtml;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("tooltip", ["require", "exports", "tools/sanitizer", "jquery", "popper.js", "util"], function (require, exports, sanitizer_1, jquery_8, popper_js_2, util_6) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'tooltip';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.tooltip';
    var EVENT_KEY = "." + DATA_KEY;
    var JQUERY_NO_CONFLICT = jquery_8["default"].fn[NAME];
    var CLASS_PREFIX = 'bs-tooltip';
    var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
    var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
    var DefaultType = {
        animation: 'boolean',
        template: 'string',
        title: '(string|element|function)',
        trigger: 'string',
        delay: '(number|object)',
        html: 'boolean',
        selector: '(string|boolean)',
        placement: '(string|function)',
        offset: '(number|string|function)',
        container: '(string|element|boolean)',
        fallbackPlacement: '(string|array)',
        boundary: '(string|element)',
        sanitize: 'boolean',
        sanitizeFn: '(null|function)',
        whiteList: 'object'
    };
    var AttachmentMap = {
        AUTO: 'auto',
        TOP: 'top',
        RIGHT: 'right',
        BOTTOM: 'bottom',
        LEFT: 'left'
    };
    var Default = {
        animation: true,
        template: '<div class="tooltip" role="tooltip">' +
            '<div class="arrow"></div>' +
            '<div class="tooltip-inner"></div></div>',
        trigger: 'hover focus',
        title: '',
        delay: 0,
        html: false,
        selector: false,
        placement: 'top',
        offset: 0,
        container: false,
        fallbackPlacement: 'flip',
        boundary: 'scrollParent',
        sanitize: true,
        sanitizeFn: null,
        whiteList: sanitizer_1.DefaultWhitelist
    };
    var HoverState = {
        SHOW: 'show',
        OUT: 'out'
    };
    var Event = {
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY,
        INSERTED: "inserted" + EVENT_KEY,
        CLICK: "click" + EVENT_KEY,
        FOCUSIN: "focusin" + EVENT_KEY,
        FOCUSOUT: "focusout" + EVENT_KEY,
        MOUSEENTER: "mouseenter" + EVENT_KEY,
        MOUSELEAVE: "mouseleave" + EVENT_KEY
    };
    var ClassName = {
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector = {
        TOOLTIP: '.tooltip',
        TOOLTIP_INNER: '.tooltip-inner',
        ARROW: '.arrow'
    };
    var Trigger = {
        HOVER: 'hover',
        FOCUS: 'focus',
        CLICK: 'click',
        MANUAL: 'manual'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Tooltip = (function () {
        function Tooltip(element, config) {
            /**
             * Check for Popper dependency
             * Popper - https://popper.js.org
             */
            if (typeof popper_js_2["default"] === 'undefined') {
                throw new TypeError('Bootstrap\'s tooltips require Popper.js (https://popper.js.org/)');
            }
            // private
            this._isEnabled = true;
            this._timeout = 0;
            this._hoverState = '';
            this._activeTrigger = {};
            this._popper = null;
            // Protected
            this.element = element;
            this.config = this._getConfig(config);
            this.tip = null;
            this._setListeners();
        }
        Object.defineProperty(Tooltip, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "NAME", {
            get: function () {
                return NAME;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "DATA_KEY", {
            get: function () {
                return DATA_KEY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "Event", {
            get: function () {
                return Event;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "EVENT_KEY", {
            get: function () {
                return EVENT_KEY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "DefaultType", {
            get: function () {
                return DefaultType;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Tooltip.prototype.enable = function () {
            this._isEnabled = true;
        };
        Tooltip.prototype.disable = function () {
            this._isEnabled = false;
        };
        Tooltip.prototype.toggleEnabled = function () {
            this._isEnabled = !this._isEnabled;
        };
        Tooltip.prototype.toggle = function (event) {
            if (!this._isEnabled) {
                return;
            }
            if (event) {
                var dataKey = this.constructor.DATA_KEY;
                var context = jquery_8["default"](event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    jquery_8["default"](event.currentTarget).data(dataKey, context);
                }
                context._activeTrigger.click = !context._activeTrigger.click;
                if (context._isWithActiveTrigger()) {
                    context._enter(null, context);
                }
                else {
                    context._leave(null, context);
                }
            }
            else {
                if (jquery_8["default"](this.getTipElement()).hasClass(ClassName.SHOW)) {
                    this._leave(null, this);
                    return;
                }
                this._enter(null, this);
            }
        };
        Tooltip.prototype.dispose = function () {
            clearTimeout(this._timeout);
            jquery_8["default"].removeData(this.element, this.constructor.DATA_KEY);
            jquery_8["default"](this.element).off(this.constructor.EVENT_KEY);
            jquery_8["default"](this.element).closest('.modal').off('hide.bs.modal');
            if (this.tip) {
                jquery_8["default"](this.tip).remove();
            }
            this._isEnabled = null;
            this._timeout = null;
            this._hoverState = null;
            this._activeTrigger = null;
            if (this._popper !== null) {
                this._popper.destroy();
            }
            this._popper = null;
            this.element = null;
            this.config = null;
            this.tip = null;
        };
        Tooltip.prototype.show = function () {
            var _this = this;
            if (jquery_8["default"](this.element).css('display') === 'none') {
                throw new Error('Please use show on visible elements');
            }
            var showEvent = jquery_8["default"].Event(this.constructor.Event.SHOW);
            if (this.isWithContent() && this._isEnabled) {
                jquery_8["default"](this.element).trigger(showEvent);
                var shadowRoot = util_6["default"].findShadowRoot(this.element);
                var isInTheDom = jquery_8["default"].contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);
                if (showEvent.isDefaultPrevented() || !isInTheDom) {
                    return;
                }
                var tip = this.getTipElement();
                var tipId = util_6["default"].getUID(this.constructor.NAME);
                tip.setAttribute('id', tipId);
                this.element.setAttribute('aria-describedby', tipId);
                this.setContent();
                if (this.config.animation) {
                    jquery_8["default"](tip).addClass(ClassName.FADE);
                }
                var placement = typeof this.config.placement === 'function'
                    ? this.config.placement.call(this, tip, this.element)
                    : this.config.placement;
                var attachment = this._getAttachment(placement);
                this.addAttachmentClass(attachment);
                var container = this._getContainer();
                jquery_8["default"](tip).data(this.constructor.DATA_KEY, this);
                if (!jquery_8["default"].contains(this.element.ownerDocument.documentElement, this.tip)) {
                    jquery_8["default"](tip).appendTo(container);
                }
                jquery_8["default"](this.element).trigger(this.constructor.Event.INSERTED);
                this._popper = new popper_js_2["default"](this.element, tip, {
                    placement: attachment,
                    modifiers: {
                        offset: this._getOffset(),
                        flip: {
                            behavior: this.config.fallbackPlacement
                        },
                        arrow: {
                            element: Selector.ARROW
                        },
                        preventOverflow: {
                            boundariesElement: this.config.boundary
                        }
                    },
                    onCreate: function (data) {
                        if (data.originalPlacement !== data.placement) {
                            _this._handlePopperPlacementChange(data);
                        }
                    },
                    onUpdate: function (data) { return _this._handlePopperPlacementChange(data); }
                });
                jquery_8["default"](tip).addClass(ClassName.SHOW);
                // If this is a touch-enabled device we add extra
                // empty mouseover listeners to the body's immediate children;
                // only needed because of broken event delegation on iOS
                // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
                if ('ontouchstart' in document.documentElement) {
                    jquery_8["default"](document.body).children().on('mouseover', null, jquery_8["default"].noop);
                }
                var complete = function () {
                    if (_this.config.animation) {
                        _this._fixTransition();
                    }
                    var prevHoverState = _this._hoverState;
                    _this._hoverState = null;
                    jquery_8["default"](_this.element).trigger(_this.constructor.Event.SHOWN);
                    if (prevHoverState === HoverState.OUT) {
                        _this._leave(null, _this);
                    }
                };
                if (jquery_8["default"](this.tip).hasClass(ClassName.FADE)) {
                    var transitionDuration = util_6["default"].getTransitionDurationFromElement(this.tip);
                    jquery_8["default"](this.tip)
                        .one(util_6["default"].TRANSITION_END, complete)
                        .emulateTransitionEnd(transitionDuration);
                }
                else {
                    complete();
                }
            }
        };
        Tooltip.prototype.hide = function (callback) {
            var _this = this;
            var tip = this.getTipElement();
            var hideEvent = jquery_8["default"].Event(this.constructor.Event.HIDE);
            var complete = function () {
                if (_this._hoverState !== HoverState.SHOW && tip.parentNode) {
                    tip.parentNode.removeChild(tip);
                }
                _this._cleanTipClass();
                _this.element.removeAttribute('aria-describedby');
                jquery_8["default"](_this.element).trigger(_this.constructor.Event.HIDDEN);
                if (_this._popper !== null) {
                    _this._popper.destroy();
                }
                if (callback) {
                    callback();
                }
            };
            jquery_8["default"](this.element).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
                return;
            }
            jquery_8["default"](tip).removeClass(ClassName.SHOW);
            // If this is a touch-enabled device we remove the extra
            // empty mouseover listeners we added for iOS support
            if ('ontouchstart' in document.documentElement) {
                jquery_8["default"](document.body).children().off('mouseover', null, jquery_8["default"].noop);
            }
            this._activeTrigger[Trigger.CLICK] = false;
            this._activeTrigger[Trigger.FOCUS] = false;
            this._activeTrigger[Trigger.HOVER] = false;
            if (jquery_8["default"](this.tip).hasClass(ClassName.FADE)) {
                var transitionDuration = util_6["default"].getTransitionDurationFromElement(tip);
                jquery_8["default"](tip)
                    .one(util_6["default"].TRANSITION_END, complete)
                    .emulateTransitionEnd(transitionDuration);
            }
            else {
                complete();
            }
            this._hoverState = '';
        };
        Tooltip.prototype.update = function () {
            if (this._popper !== null) {
                this._popper.scheduleUpdate();
            }
        };
        // Protected
        Tooltip.prototype.isWithContent = function () {
            return Boolean(this.getTitle());
        };
        Tooltip.prototype.addAttachmentClass = function (attachment) {
            jquery_8["default"](this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
        };
        Tooltip.prototype.getTipElement = function () {
            this.tip = this.tip || jquery_8["default"](this.config.template)[0];
            return this.tip;
        };
        Tooltip.prototype.setContent = function () {
            var tip = this.getTipElement();
            this.setElementContent(jquery_8["default"](tip.querySelectorAll(Selector.TOOLTIP_INNER)), this.getTitle());
            jquery_8["default"](tip).removeClass(ClassName.FADE + " " + ClassName.SHOW);
        };
        Tooltip.prototype.setElementContent = function ($element, content) {
            if (typeof content === 'object' && (content.nodeType || content.jquery)) {
                // Content is a DOM node or a jQuery
                if (this.config.html) {
                    if (!jquery_8["default"](content).parent().is($element)) {
                        $element.empty().append(content);
                    }
                }
                else {
                    $element.text(jquery_8["default"](content).text());
                }
                return;
            }
            if (this.config.html) {
                if (this.config.sanitize) {
                    content = sanitizer_1.sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
                }
                $element.html(content);
            }
            else {
                $element.text(content);
            }
        };
        Tooltip.prototype.getTitle = function () {
            var title = this.element.getAttribute('data-original-title');
            if (!title) {
                title = typeof this.config.title === 'function'
                    ? this.config.title.call(this.element)
                    : this.config.title;
            }
            return title;
        };
        // Private
        Tooltip.prototype._getOffset = function () {
            var _this = this;
            var offset = {};
            if (typeof this.config.offset === 'function') {
                offset.fn = function (data) {
                    data.offsets = __assign({}, data.offsets, _this.config.offset(data.offsets, _this.element) || {});
                    return data;
                };
            }
            else {
                offset.offset = this.config.offset;
            }
            return offset;
        };
        Tooltip.prototype._getContainer = function () {
            if (this.config.container === false) {
                return document.body;
            }
            if (util_6["default"].isElement(this.config.container)) {
                return jquery_8["default"](this.config.container);
            }
            return jquery_8["default"](document).find(this.config.container);
        };
        Tooltip.prototype._getAttachment = function (placement) {
            return AttachmentMap[placement.toUpperCase()];
        };
        Tooltip.prototype._setListeners = function () {
            var _this = this;
            var triggers = this.config.trigger.split(' ');
            triggers.forEach(function (trigger) {
                if (trigger === 'click') {
                    jquery_8["default"](_this.element).on(_this.constructor.Event.CLICK, _this.config.selector, function (event) { return _this.toggle(event); });
                }
                else if (trigger !== Trigger.MANUAL) {
                    var eventIn = trigger === Trigger.HOVER
                        ? _this.constructor.Event.MOUSEENTER
                        : _this.constructor.Event.FOCUSIN;
                    var eventOut = trigger === Trigger.HOVER
                        ? _this.constructor.Event.MOUSELEAVE
                        : _this.constructor.Event.FOCUSOUT;
                    jquery_8["default"](_this.element)
                        .on(eventIn, _this.config.selector, function (event) { return _this._enter(event); })
                        .on(eventOut, _this.config.selector, function (event) { return _this._leave(event); });
                }
            });
            jquery_8["default"](this.element).closest('.modal').on('hide.bs.modal', function () {
                if (_this.element) {
                    _this.hide();
                }
            });
            if (this.config.selector) {
                this.config = __assign({}, this.config, { trigger: 'manual', selector: '' });
            }
            else {
                this._fixTitle();
            }
        };
        Tooltip.prototype._fixTitle = function () {
            var titleType = typeof this.element.getAttribute('data-original-title');
            if (this.element.getAttribute('title') || titleType !== 'string') {
                this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
                this.element.setAttribute('title', '');
            }
        };
        Tooltip.prototype._enter = function (event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || jquery_8["default"](event.currentTarget).data(dataKey);
            if (!context) {
                context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                jquery_8["default"](event.currentTarget).data(dataKey, context);
            }
            if (event) {
                context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
            }
            if (jquery_8["default"](context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
                context._hoverState = HoverState.SHOW;
                return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HoverState.SHOW;
            if (!context.config.delay || !context.config.delay.show) {
                context.show();
                return;
            }
            context._timeout = setTimeout(function () {
                if (context._hoverState === HoverState.SHOW) {
                    context.show();
                }
            }, context.config.delay.show);
        };
        Tooltip.prototype._leave = function (event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || jquery_8["default"](event.currentTarget).data(dataKey);
            if (!context) {
                context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                jquery_8["default"](event.currentTarget).data(dataKey, context);
            }
            if (event) {
                context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
            }
            if (context._isWithActiveTrigger()) {
                return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HoverState.OUT;
            if (!context.config.delay || !context.config.delay.hide) {
                context.hide();
                return;
            }
            context._timeout = setTimeout(function () {
                if (context._hoverState === HoverState.OUT) {
                    context.hide();
                }
            }, context.config.delay.hide);
        };
        Tooltip.prototype._isWithActiveTrigger = function () {
            for (var trigger in this._activeTrigger) {
                if (this._activeTrigger[trigger]) {
                    return true;
                }
            }
            return false;
        };
        Tooltip.prototype._getConfig = function (config) {
            var dataAttributes = jquery_8["default"](this.element).data();
            Object.keys(dataAttributes)
                .forEach(function (dataAttr) {
                if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
                    delete dataAttributes[dataAttr];
                }
            });
            config = __assign({}, this.constructor.Default, dataAttributes, typeof config === 'object' && config ? config : {});
            if (typeof config.delay === 'number') {
                config.delay = {
                    show: config.delay,
                    hide: config.delay
                };
            }
            if (typeof config.title === 'number') {
                config.title = config.title.toString();
            }
            if (typeof config.content === 'number') {
                config.content = config.content.toString();
            }
            util_6["default"].typeCheckConfig(NAME, config, this.constructor.DefaultType);
            if (config.sanitize) {
                config.template = sanitizer_1.sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
            }
            return config;
        };
        Tooltip.prototype._getDelegateConfig = function () {
            var config = {};
            if (this.config) {
                for (var key in this.config) {
                    if (this.constructor.Default[key] !== this.config[key]) {
                        config[key] = this.config[key];
                    }
                }
            }
            return config;
        };
        Tooltip.prototype._cleanTipClass = function () {
            var $tip = jquery_8["default"](this.getTipElement());
            var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
            if (tabClass !== null && tabClass.length) {
                $tip.removeClass(tabClass.join(''));
            }
        };
        Tooltip.prototype._handlePopperPlacementChange = function (popperData) {
            var popperInstance = popperData.instance;
            this.tip = popperInstance.popper;
            this._cleanTipClass();
            this.addAttachmentClass(this._getAttachment(popperData.placement));
        };
        Tooltip.prototype._fixTransition = function () {
            var tip = this.getTipElement();
            var initConfigAnimation = this.config.animation;
            if (tip.getAttribute('x-placement') !== null) {
                return;
            }
            jquery_8["default"](tip).removeClass(ClassName.FADE);
            this.config.animation = false;
            this.hide();
            this.show();
            this.config.animation = initConfigAnimation;
        };
        // Static
        Tooltip._jQueryInterface = function (config) {
            return this.each(function () {
                var data = jquery_8["default"](this).data(DATA_KEY);
                var _config = typeof config === 'object' && config;
                if (!data && /dispose|hide/.test(config)) {
                    return;
                }
                if (!data) {
                    data = new Tooltip(this, _config);
                    jquery_8["default"](this).data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        return Tooltip;
    }());
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_8["default"].fn[NAME] = Tooltip._jQueryInterface;
    jquery_8["default"].fn[NAME].Constructor = Tooltip;
    jquery_8["default"].fn[NAME].noConflict = function () {
        jquery_8["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Tooltip._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Tooltip;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("popover", ["require", "exports", "jquery", "tooltip"], function (require, exports, jquery_9, tooltip_1) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'popover';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.popover';
    var EVENT_KEY = "." + DATA_KEY;
    var JQUERY_NO_CONFLICT = jquery_9["default"].fn[NAME];
    var CLASS_PREFIX = 'bs-popover';
    var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
    var Default = __assign({}, tooltip_1["default"].Default, { placement: 'right', trigger: 'click', content: '', template: '<div class="popover" role="tooltip">' +
            '<div class="arrow"></div>' +
            '<h3 class="popover-header"></h3>' +
            '<div class="popover-body"></div></div>' });
    var DefaultType = __assign({}, tooltip_1["default"].DefaultType, { content: '(string|element|function)' });
    var ClassName = {
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector = {
        TITLE: '.popover-header',
        CONTENT: '.popover-body'
    };
    var Event = {
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY,
        INSERTED: "inserted" + EVENT_KEY,
        CLICK: "click" + EVENT_KEY,
        FOCUSIN: "focusin" + EVENT_KEY,
        FOCUSOUT: "focusout" + EVENT_KEY,
        MOUSEENTER: "mouseenter" + EVENT_KEY,
        MOUSELEAVE: "mouseleave" + EVENT_KEY
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Popover = (function (_super) {
        __extends(Popover, _super);
        function Popover() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Popover, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover, "NAME", {
            get: function () {
                return NAME;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover, "DATA_KEY", {
            get: function () {
                return DATA_KEY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover, "Event", {
            get: function () {
                return Event;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover, "EVENT_KEY", {
            get: function () {
                return EVENT_KEY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover, "DefaultType", {
            get: function () {
                return DefaultType;
            },
            enumerable: true,
            configurable: true
        });
        // Overrides
        Popover.prototype.isWithContent = function () {
            return this.getTitle() || this._getContent();
        };
        Popover.prototype.addAttachmentClass = function (attachment) {
            jquery_9["default"](this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
        };
        Popover.prototype.getTipElement = function () {
            this.tip = this.tip || jquery_9["default"](this.config.template)[0];
            return this.tip;
        };
        Popover.prototype.setContent = function () {
            var $tip = jquery_9["default"](this.getTipElement());
            // We use append for html objects to maintain js events
            this.setElementContent($tip.find(Selector.TITLE), this.getTitle());
            var content = this._getContent();
            if (typeof content === 'function') {
                content = content.call(this.element);
            }
            this.setElementContent($tip.find(Selector.CONTENT), content);
            $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
        };
        // Private
        Popover.prototype._getContent = function () {
            return this.element.getAttribute('data-content') ||
                this.config.content;
        };
        Popover.prototype._cleanTipClass = function () {
            var $tip = jquery_9["default"](this.getTipElement());
            var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
            if (tabClass !== null && tabClass.length > 0) {
                $tip.removeClass(tabClass.join(''));
            }
        };
        // Static
        Popover._jQueryInterface = function (config) {
            return this.each(function () {
                var data = jquery_9["default"](this).data(DATA_KEY);
                var _config = typeof config === 'object' ? config : null;
                if (!data && /dispose|hide/.test(config)) {
                    return;
                }
                if (!data) {
                    data = new Popover(this, _config);
                    jquery_9["default"](this).data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        return Popover;
    }(tooltip_1["default"]));
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_9["default"].fn[NAME] = Popover._jQueryInterface;
    jquery_9["default"].fn[NAME].Constructor = Popover;
    jquery_9["default"].fn[NAME].noConflict = function () {
        jquery_9["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Popover._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Popover;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("scrollspy", ["require", "exports", "jquery", "util"], function (require, exports, jquery_10, util_7) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'scrollspy';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.scrollspy';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_10["default"].fn[NAME];
    var Default = {
        offset: 10,
        method: 'auto',
        target: ''
    };
    var DefaultType = {
        offset: 'number',
        method: 'string',
        target: '(string|element)'
    };
    var Event = {
        ACTIVATE: "activate" + EVENT_KEY,
        SCROLL: "scroll" + EVENT_KEY,
        LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        DROPDOWN_ITEM: 'dropdown-item',
        DROPDOWN_MENU: 'dropdown-menu',
        ACTIVE: 'active'
    };
    var Selector = {
        DATA_SPY: '[data-spy="scroll"]',
        ACTIVE: '.active',
        NAV_LIST_GROUP: '.nav, .list-group',
        NAV_LINKS: '.nav-link',
        NAV_ITEMS: '.nav-item',
        LIST_ITEMS: '.list-group-item',
        DROPDOWN: '.dropdown',
        DROPDOWN_ITEMS: '.dropdown-item',
        DROPDOWN_TOGGLE: '.dropdown-toggle'
    };
    var OffsetMethod = {
        OFFSET: 'offset',
        POSITION: 'position'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var ScrollSpy = (function () {
        function ScrollSpy(element, config) {
            var _this = this;
            this._element = element;
            this._scrollElement = element.tagName === 'BODY' ? window : element;
            this._config = this._getConfig(config);
            this._selector = this._config.target + " " + Selector.NAV_LINKS + "," +
                (this._config.target + " " + Selector.LIST_ITEMS + ",") +
                (this._config.target + " " + Selector.DROPDOWN_ITEMS);
            this._offsets = [];
            this._targets = [];
            this._activeTarget = null;
            this._scrollHeight = 0;
            jquery_10["default"](this._scrollElement).on(Event.SCROLL, function (event) { return _this._process(event); });
            this.refresh();
            this._process();
        }
        Object.defineProperty(ScrollSpy, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollSpy, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        ScrollSpy.prototype.refresh = function () {
            var _this = this;
            var autoMethod = this._scrollElement === this._scrollElement.window
                ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
            var offsetMethod = this._config.method === 'auto'
                ? autoMethod : this._config.method;
            var offsetBase = offsetMethod === OffsetMethod.POSITION
                ? this._getScrollTop() : 0;
            this._offsets = [];
            this._targets = [];
            this._scrollHeight = this._getScrollHeight();
            var targets = [].slice.call(document.querySelectorAll(this._selector));
            targets
                .map(function (element) {
                var target;
                var targetSelector = util_7["default"].getSelectorFromElement(element);
                if (targetSelector) {
                    target = document.querySelector(targetSelector);
                }
                if (target) {
                    var targetBCR = target.getBoundingClientRect();
                    if (targetBCR.width || targetBCR.height) {
                        // TODO (fat): remove sketch reliance on jQuery position/offset
                        return [
                            jquery_10["default"](target)[offsetMethod]().top + offsetBase,
                            targetSelector
                        ];
                    }
                }
                return null;
            })
                .filter(function (item) { return item; })
                .sort(function (a, b) { return a[0] - b[0]; })
                .forEach(function (item) {
                _this._offsets.push(item[0]);
                _this._targets.push(item[1]);
            });
        };
        ScrollSpy.prototype.dispose = function () {
            jquery_10["default"].removeData(this._element, DATA_KEY);
            jquery_10["default"](this._scrollElement).off(EVENT_KEY);
            this._element = null;
            this._scrollElement = null;
            this._config = null;
            this._selector = null;
            this._offsets = null;
            this._targets = null;
            this._activeTarget = null;
            this._scrollHeight = null;
        };
        // Private
        ScrollSpy.prototype._getConfig = function (config) {
            config = __assign({}, Default, typeof config === 'object' && config ? config : {});
            if (typeof config.target !== 'string') {
                var id = jquery_10["default"](config.target).attr('id');
                if (!id) {
                    id = util_7["default"].getUID(NAME);
                    jquery_10["default"](config.target).attr('id', id);
                }
                config.target = "#" + id;
            }
            util_7["default"].typeCheckConfig(NAME, config, DefaultType);
            return config;
        };
        ScrollSpy.prototype._getScrollTop = function () {
            return this._scrollElement === window
                ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
        };
        ScrollSpy.prototype._getScrollHeight = function () {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
        };
        ScrollSpy.prototype._getOffsetHeight = function () {
            return this._scrollElement === window
                ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
        };
        ScrollSpy.prototype._process = function () {
            var scrollTop = this._getScrollTop() + this._config.offset;
            var scrollHeight = this._getScrollHeight();
            var maxScroll = this._config.offset +
                scrollHeight -
                this._getOffsetHeight();
            if (this._scrollHeight !== scrollHeight) {
                this.refresh();
            }
            if (scrollTop >= maxScroll) {
                var target = this._targets[this._targets.length - 1];
                if (this._activeTarget !== target) {
                    this._activate(target);
                }
                return;
            }
            if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                this._activeTarget = null;
                this._clear();
                return;
            }
            var offsetLength = this._offsets.length;
            for (var i = offsetLength; i--;) {
                var isActiveTarget = this._activeTarget !== this._targets[i] &&
                    scrollTop >= this._offsets[i] &&
                    (typeof this._offsets[i + 1] === 'undefined' ||
                        scrollTop < this._offsets[i + 1]);
                if (isActiveTarget) {
                    this._activate(this._targets[i]);
                }
            }
        };
        ScrollSpy.prototype._activate = function (target) {
            this._activeTarget = target;
            this._clear();
            var queries = this._selector
                .split(',')
                .map(function (selector) { return selector + "[data-target=\"" + target + "\"]," + selector + "[href=\"" + target + "\"]"; });
            var $link = jquery_10["default"]([].slice.call(document.querySelectorAll(queries.join(','))));
            if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
                $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                $link.addClass(ClassName.ACTIVE);
            }
            else {
                // Set triggered link as active
                $link.addClass(ClassName.ACTIVE);
                // Set triggered links parents as active
                // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
                $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE);
                // Handle special case when .nav-link is inside .nav-item
                $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
            }
            jquery_10["default"](this._scrollElement).trigger(Event.ACTIVATE, {
                relatedTarget: target
            });
        };
        ScrollSpy.prototype._clear = function () {
            [].slice.call(document.querySelectorAll(this._selector))
                .filter(function (node) { return node.classList.contains(ClassName.ACTIVE); })
                .forEach(function (node) { return node.classList.remove(ClassName.ACTIVE); });
        };
        // Static
        ScrollSpy._jQueryInterface = function (config) {
            return this.each(function () {
                var data = jquery_10["default"](this).data(DATA_KEY);
                var _config = typeof config === 'object' && config;
                if (!data) {
                    data = new ScrollSpy(this, _config);
                    jquery_10["default"](this).data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        return ScrollSpy;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_10["default"](window).on(Event.LOAD_DATA_API, function () {
        var scrollSpys = [].slice.call(document.querySelectorAll(Selector.DATA_SPY));
        var scrollSpysLength = scrollSpys.length;
        for (var i = scrollSpysLength; i--;) {
            var $spy = jquery_10["default"](scrollSpys[i]);
            ScrollSpy._jQueryInterface.call($spy, $spy.data());
        }
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_10["default"].fn[NAME] = ScrollSpy._jQueryInterface;
    jquery_10["default"].fn[NAME].Constructor = ScrollSpy;
    jquery_10["default"].fn[NAME].noConflict = function () {
        jquery_10["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return ScrollSpy._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = ScrollSpy;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("tab", ["require", "exports", "jquery", "util"], function (require, exports, jquery_11, util_8) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'tab';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.tab';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = jquery_11["default"].fn[NAME];
    var Event = {
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY,
        CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        DROPDOWN_MENU: 'dropdown-menu',
        ACTIVE: 'active',
        DISABLED: 'disabled',
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector = {
        DROPDOWN: '.dropdown',
        NAV_LIST_GROUP: '.nav, .list-group',
        ACTIVE: '.active',
        ACTIVE_UL: '> li > .active',
        DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
        DROPDOWN_TOGGLE: '.dropdown-toggle',
        DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Tab = (function () {
        function Tab(element) {
            this._element = element;
        }
        Object.defineProperty(Tab, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Tab.prototype.show = function () {
            var _this = this;
            if (this._element.parentNode &&
                this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
                jquery_11["default"](this._element).hasClass(ClassName.ACTIVE) ||
                jquery_11["default"](this._element).hasClass(ClassName.DISABLED)) {
                return;
            }
            var target;
            var previous;
            var listElement = jquery_11["default"](this._element).closest(Selector.NAV_LIST_GROUP)[0];
            var selector = util_8["default"].getSelectorFromElement(this._element);
            if (listElement) {
                var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
                previous = jquery_11["default"].makeArray(jquery_11["default"](listElement).find(itemSelector));
                previous = previous[previous.length - 1];
            }
            var hideEvent = jquery_11["default"].Event(Event.HIDE, {
                relatedTarget: this._element
            });
            var showEvent = jquery_11["default"].Event(Event.SHOW, {
                relatedTarget: previous
            });
            if (previous) {
                jquery_11["default"](previous).trigger(hideEvent);
            }
            jquery_11["default"](this._element).trigger(showEvent);
            if (showEvent.isDefaultPrevented() ||
                hideEvent.isDefaultPrevented()) {
                return;
            }
            if (selector) {
                target = document.querySelector(selector);
            }
            this._activate(this._element, listElement);
            var complete = function () {
                var hiddenEvent = jquery_11["default"].Event(Event.HIDDEN, {
                    relatedTarget: _this._element
                });
                var shownEvent = jquery_11["default"].Event(Event.SHOWN, {
                    relatedTarget: previous
                });
                jquery_11["default"](previous).trigger(hiddenEvent);
                jquery_11["default"](_this._element).trigger(shownEvent);
            };
            if (target) {
                this._activate(target, target.parentNode, complete);
            }
            else {
                complete();
            }
        };
        Tab.prototype.dispose = function () {
            jquery_11["default"].removeData(this._element, DATA_KEY);
            this._element = null;
        };
        // Private
        Tab.prototype._activate = function (element, container, callback) {
            var _this = this;
            var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL')
                ? jquery_11["default"](container).find(Selector.ACTIVE_UL)
                : jquery_11["default"](container).children(Selector.ACTIVE);
            var active = activeElements[0];
            var isTransitioning = callback && (active && jquery_11["default"](active).hasClass(ClassName.FADE));
            var complete = function () { return _this._transitionComplete(element, active, callback); };
            if (active && isTransitioning) {
                var transitionDuration = util_8["default"].getTransitionDurationFromElement(active);
                jquery_11["default"](active)
                    .removeClass(ClassName.SHOW)
                    .one(util_8["default"].TRANSITION_END, complete)
                    .emulateTransitionEnd(transitionDuration);
            }
            else {
                complete();
            }
        };
        Tab.prototype._transitionComplete = function (element, active, callback) {
            if (active) {
                jquery_11["default"](active).removeClass(ClassName.ACTIVE);
                var dropdownChild = jquery_11["default"](active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];
                if (dropdownChild) {
                    jquery_11["default"](dropdownChild).removeClass(ClassName.ACTIVE);
                }
                if (active.getAttribute('role') === 'tab') {
                    active.setAttribute('aria-selected', false);
                }
            }
            jquery_11["default"](element).addClass(ClassName.ACTIVE);
            if (element.getAttribute('role') === 'tab') {
                element.setAttribute('aria-selected', true);
            }
            util_8["default"].reflow(element);
            if (element.classList.contains(ClassName.FADE)) {
                element.classList.add(ClassName.SHOW);
            }
            if (element.parentNode && jquery_11["default"](element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
                var dropdownElement = jquery_11["default"](element).closest(Selector.DROPDOWN)[0];
                if (dropdownElement) {
                    var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector.DROPDOWN_TOGGLE));
                    jquery_11["default"](dropdownToggleList).addClass(ClassName.ACTIVE);
                }
                element.setAttribute('aria-expanded', true);
            }
            if (callback) {
                callback();
            }
        };
        // Static
        Tab._jQueryInterface = function (config) {
            return this.each(function () {
                var $this = jquery_11["default"](this);
                var data = $this.data(DATA_KEY);
                if (!data) {
                    data = new Tab(this);
                    $this.data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        return Tab;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    jquery_11["default"](document)
        .on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
        event.preventDefault();
        Tab._jQueryInterface.call(jquery_11["default"](this), 'show');
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_11["default"].fn[NAME] = Tab._jQueryInterface;
    jquery_11["default"].fn[NAME].Constructor = Tab;
    jquery_11["default"].fn[NAME].noConflict = function () {
        jquery_11["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Tab._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Tab;
});
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
define("toast", ["require", "exports", "jquery", "util"], function (require, exports, jquery_12, util_9) {
    "use strict";
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'toast';
    var VERSION = '4.3.1';
    var DATA_KEY = 'bs.toast';
    var EVENT_KEY = "." + DATA_KEY;
    var JQUERY_NO_CONFLICT = jquery_12["default"].fn[NAME];
    var Event = {
        CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY
    };
    var ClassName = {
        FADE: 'fade',
        HIDE: 'hide',
        SHOW: 'show',
        SHOWING: 'showing'
    };
    var DefaultType = {
        animation: 'boolean',
        autohide: 'boolean',
        delay: 'number'
    };
    var Default = {
        animation: true,
        autohide: true,
        delay: 500
    };
    var Selector = {
        DATA_DISMISS: '[data-dismiss="toast"]'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Toast = (function () {
        function Toast(element, config) {
            this._element = element;
            this._config = this._getConfig(config);
            this._timeout = null;
            this._setListeners();
        }
        Object.defineProperty(Toast, "VERSION", {
            // Getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toast, "DefaultType", {
            get: function () {
                return DefaultType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toast, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        // Public
        Toast.prototype.show = function () {
            var _this = this;
            jquery_12["default"](this._element).trigger(Event.SHOW);
            if (this._config.animation) {
                this._element.classList.add(ClassName.FADE);
            }
            var complete = function () {
                _this._element.classList.remove(ClassName.SHOWING);
                _this._element.classList.add(ClassName.SHOW);
                jquery_12["default"](_this._element).trigger(Event.SHOWN);
                if (_this._config.autohide) {
                    _this.hide();
                }
            };
            this._element.classList.remove(ClassName.HIDE);
            this._element.classList.add(ClassName.SHOWING);
            if (this._config.animation) {
                var transitionDuration = util_9["default"].getTransitionDurationFromElement(this._element);
                jquery_12["default"](this._element)
                    .one(util_9["default"].TRANSITION_END, complete)
                    .emulateTransitionEnd(transitionDuration);
            }
            else {
                complete();
            }
        };
        Toast.prototype.hide = function (withoutTimeout) {
            var _this = this;
            if (!this._element.classList.contains(ClassName.SHOW)) {
                return;
            }
            jquery_12["default"](this._element).trigger(Event.HIDE);
            if (withoutTimeout) {
                this._close();
            }
            else {
                this._timeout = setTimeout(function () {
                    _this._close();
                }, this._config.delay);
            }
        };
        Toast.prototype.dispose = function () {
            clearTimeout(this._timeout);
            this._timeout = null;
            if (this._element.classList.contains(ClassName.SHOW)) {
                this._element.classList.remove(ClassName.SHOW);
            }
            jquery_12["default"](this._element).off(Event.CLICK_DISMISS);
            jquery_12["default"].removeData(this._element, DATA_KEY);
            this._element = null;
            this._config = null;
        };
        // Private
        Toast.prototype._getConfig = function (config) {
            config = __assign({}, Default, jquery_12["default"](this._element).data(), typeof config === 'object' && config ? config : {});
            util_9["default"].typeCheckConfig(NAME, config, this.constructor.DefaultType);
            return config;
        };
        Toast.prototype._setListeners = function () {
            var _this = this;
            jquery_12["default"](this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function () { return _this.hide(true); });
        };
        Toast.prototype._close = function () {
            var _this = this;
            var complete = function () {
                _this._element.classList.add(ClassName.HIDE);
                jquery_12["default"](_this._element).trigger(Event.HIDDEN);
            };
            this._element.classList.remove(ClassName.SHOW);
            if (this._config.animation) {
                var transitionDuration = util_9["default"].getTransitionDurationFromElement(this._element);
                jquery_12["default"](this._element)
                    .one(util_9["default"].TRANSITION_END, complete)
                    .emulateTransitionEnd(transitionDuration);
            }
            else {
                complete();
            }
        };
        // Static
        Toast._jQueryInterface = function (config) {
            return this.each(function () {
                var $element = jquery_12["default"](this);
                var data = $element.data(DATA_KEY);
                var _config = typeof config === 'object' && config;
                if (!data) {
                    data = new Toast(this, _config);
                    $element.data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (typeof data[config] === 'undefined') {
                        throw new TypeError("No method named \"" + config + "\"");
                    }
                    data[config](this);
                }
            });
        };
        return Toast;
    }());
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    jquery_12["default"].fn[NAME] = Toast._jQueryInterface;
    jquery_12["default"].fn[NAME].Constructor = Toast;
    jquery_12["default"].fn[NAME].noConflict = function () {
        jquery_12["default"].fn[NAME] = JQUERY_NO_CONFLICT;
        return Toast._jQueryInterface;
    };
    exports.__esModule = true;
    exports["default"] = Toast;
});
define("index", ["require", "exports", "jquery", "alert", "button", "carousel", "collapse", "dropdown", "modal", "popover", "scrollspy", "tab", "toast", "tooltip", "util"], function (require, exports, jquery_13, alert_1, button_1, carousel_1, collapse_1, dropdown_1, modal_1, popover_1, scrollspy_1, tab_1, toast_1, tooltip_2, util_10) {
    "use strict";
    exports.Alert = alert_1["default"];
    exports.Button = button_1["default"];
    exports.Carousel = carousel_1["default"];
    exports.Collapse = collapse_1["default"];
    exports.Dropdown = dropdown_1["default"];
    exports.Modal = modal_1["default"];
    exports.Popover = popover_1["default"];
    exports.Scrollspy = scrollspy_1["default"];
    exports.Tab = tab_1["default"];
    exports.Toast = toast_1["default"];
    exports.Tooltip = tooltip_2["default"];
    exports.Util = util_10["default"];
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.3.1): index.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */
    (function () {
        if (typeof jquery_13["default"] === 'undefined') {
            throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
        }
        var version = jquery_13["default"].fn.jquery.split(' ')[0].split('.');
        var minMajor = 1;
        var ltMajor = 2;
        var minMinor = 9;
        var minPatch = 1;
        var maxMajor = 4;
        if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
            throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
        }
    })();
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
