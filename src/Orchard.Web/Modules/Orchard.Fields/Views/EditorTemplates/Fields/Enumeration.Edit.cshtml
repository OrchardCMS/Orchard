@model Orchard.Fields.Fields.EnumerationField
@using Orchard.Fields.Settings;
@{
    var settings = Model.PartFieldDefinition.Settings.GetModel<EnumerationFieldSettings>();
    string[] options = (!String.IsNullOrWhiteSpace(settings.Options)) ? settings.Options.Split(new string[] { System.Environment.NewLine }, StringSplitOptions.None) : new string[] { T("Select an option").ToString() };
    var isRequired = settings.Required && String.IsNullOrWhiteSpace(settings.DefaultValue);
}
<fieldset>
    <label for="@Html.FieldIdFor(m => m.Value)" @if (settings.Required) { <text> class="required" </text>    }>@Model.DisplayName</label>
    @switch (settings.ListMode) {
        case ListMode.Dropdown:
            @Html.DropDownListFor(m => m.Value, new SelectList(options, Model.Value), isRequired ? new { required = "required" } : null)
            break;

        case ListMode.Radiobutton:
            int indexRadio = 0;
            foreach (var option in options) {
                indexRadio++;
                <div class="or-radio">
                    <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="@Html.FieldIdFor(m => m.Value)-@indexRadio" value="@option" @if (option == Model.Value) { <text> checked="checked" </text>  } /> <label for="@Html.FieldIdFor(m => m.Value)-@indexRadio">@option</label>
                </div>
            }
            break;

        case ListMode.Listbox:
            <input name="@Html.FieldNameFor(m => m.SelectedValues)" type="hidden" />
            @Html.ListBoxFor(m => m.SelectedValues, new MultiSelectList(options, Model.SelectedValues), isRequired ? new { required = "required" } : null)
            break;

        case ListMode.Checkbox:
            int index = 0;
            <input name="@Html.FieldNameFor(m => m.SelectedValues)" type="hidden" />
            foreach (var option in options) {
                index++;
                if (!string.IsNullOrWhiteSpace(option)) {
                    <div class="or-checkbox">
                        <input type="checkbox" name="@Html.FieldNameFor(m => m.SelectedValues)" value="@option" @((Model.SelectedValues != null && Model.SelectedValues.Contains(option)) ? "checked=\"checked\"" : "") class="check-box" id="@Html.FieldIdFor(m => m.SelectedValues)-@index" />
                        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.SelectedValues)-@index">@T(option)</label>
                    </div>
                }
            }
            break;
    }

    @Html.ValidationMessageFor(m => m.SelectedValues)
    @if (HasText(settings.Hint)) {
        <span class="help-block">@settings.Hint</span>
    }
    @if (!String.IsNullOrWhiteSpace(settings.DefaultValue)) {
        <span class="help-block">@T("If no option is selected then the default value will be used.")</span>
    }
</fieldset>