/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

var LayoutEditor;
(function (LayoutEditor) {
    Array.prototype.move = function (from, to) {
        this.splice(to, 0, this.splice(from, 1)[0]);
    };
    LayoutEditor.childrenFrom = function (values) {
        return _(values).map(function (value) {
            return LayoutEditor.elementFrom(value);
        });
    };
    var registerFactory = LayoutEditor.registerFactory = function (type, factory) {
        var factories = LayoutEditor.factories = LayoutEditor.factories || {};
        factories[type] = factory;
    };
    registerFactory("Canvas", function (value) { return LayoutEditor.Canvas.from(value); });
    registerFactory("Grid", function (value) { return LayoutEditor.Grid.from(value); });
    registerFactory("Row", function (value) { return LayoutEditor.Row.from(value); });
    registerFactory("Column", function (value) { return LayoutEditor.Column.from(value); });
    registerFactory("Content", function (value) { return LayoutEditor.Content.from(value); });
    LayoutEditor.elementFrom = function (value) {
        var factory = LayoutEditor.factories[value.type];
        if (!factory)
            throw new Error("No element with type \"" + value.type + "\" was found.");
        var element = factory(value);
        return element;
    };
    LayoutEditor.setModel = function (elementSelector, model) {
        $(elementSelector).scope().element = model;
    };
    LayoutEditor.getModel = function (elementSelector) {
        return $(elementSelector).scope().element;
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Editor = function (config, canvasData) {
        this.config = config;
        this.canvas = LayoutEditor.Canvas.from(canvasData);
        this.initialState = JSON.stringify(this.canvas.toObject());
        this.activeElement = null;
        this.focusedElement = null;
        this.dropTargetElement = null;
        this.isDragging = false;
        this.isResizing = false;
        this.recycleBin = new LayoutEditor.RecycleBin();
        this.resetToolboxElements = function () {
            this.toolboxElements = [
                LayoutEditor.Row.from({
                    children: []
                })
            ];
        };
        this.isDirty = function () {
            var currentState = JSON.stringify(this.canvas.toObject());
            return this.initialState != currentState;
        };
        this.resetToolboxElements();
        this.canvas.setEditor(this);
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.RecycleBin = function () {
        this.elements = [];
        this.add = function (element) {
            this.elements.push(element);
        };
        this.toObject = function () {
            var result = {
                type: "RecycleBin",
                children: []
            };
            for (var i = 0; i < this.elements.length; i++) {
                var element = this.elements[i];
                var dto = element.toObject();
                result.children.push(dto);
            }
            return result;
        };
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Element = function (type, data, htmlId, htmlClass, htmlStyle, isTemplated, rule) {
        if (!type)
            throw new Error("Parameter 'type' is required.");
        var self = this;
        this.type = type;
        this.data = data;
        this.htmlId = htmlId;
        this.htmlClass = htmlClass;
        this.htmlStyle = htmlStyle;
        this.isTemplated = isTemplated;
        this.rule = rule;
        this.templateStyles = {};
        this.editor = null;
        this.parent = null;
        this.setIsFocusedEventHandlers = [];
        this.setEditor = function (editor) {
            this.editor = editor;
            if (!!this.children && _.isArray(this.children)) {
                _(this.children).each(function (child) {
                    child.setEditor(editor);
                });
            }
        };
        this.setParent = function (parentElement) {
            this.parent = parentElement;
            this.parent.onChildAdded(this);
            var currentAncestor = parentElement;
            while (!!currentAncestor) {
                currentAncestor.onDescendantAdded(this, parentElement);
                currentAncestor = currentAncestor.parent;
            }
        };
        this.setIsTemplated = function (value) {
            this.isTemplated = value;
            if (!!this.children && _.isArray(this.children)) {
                _(this.children).each(function (child) {
                    child.setIsTemplated(value);
                });
            }
        };
        this.applyElementEditorModel = function () { };
        this.getIsActive = function () {
            if (!this.editor)
                return false;
            return this.editor.activeElement === this && !this.getIsFocused();
        };
        this.setIsActive = function (value) {
            if (!this.editor)
                return;
            if (this.editor.isDragging || this.editor.isResizing)
                return;
            if (value)
                this.editor.activeElement = this;
            else
                this.editor.activeElement = this.parent;
        };
        this.getIsFocused = function () {
            if (!this.editor)
                return false;
            return this.editor.focusedElement === this;
        };
        this.setIsFocused = function () {
            if (!this.editor)
                return;
            if (!this.children && this.isTemplated)
                return;
            if (this.editor.isDragging || this.editor.isResizing)
                return;
            this.editor.focusedElement = this;
            _(this.setIsFocusedEventHandlers).each(function (item) {
                try {
                    item();
                }
                catch (ex) {
                }
            });
        };
        this.getIsSelected = function () {
            if (this.getIsFocused())
                return true;
            if (!!this.children && _.isArray(this.children)) {
                return _(this.children).any(function (child) {
                    return child.getIsSelected();
                });
            }
            return false;
        };
        this.getIsDropTarget = function () {
            if (!this.editor)
                return false;
            return this.editor.dropTargetElement === this;
        };
        this.setIsDropTarget = function (value) {
            if (!this.editor)
                return;
            if (value)
                this.editor.dropTargetElement = this;
            else
                this.editor.dropTargetElement = null;
        };
        this.canDelete = function () {
            if (this.isTemplated || !this.parent)
                return false;
            return true;
        };
        this["delete"] = function () {
            if (!this.canDelete())
                return;
            this.parent.deleteChild(this);
        };
        this.canMoveUp = function () {
            if (this.isTemplated || !this.parent)
                return false;
            return this.parent.canMoveChildUp(this);
        };
        this.moveUp = function () {
            if (!this.canMoveUp())
                return;
            this.parent.moveChildUp(this);
        };
        this.canMoveDown = function () {
            if (this.isTemplated || !this.parent)
                return false;
            return this.parent.canMoveChildDown(this);
        };
        this.moveDown = function () {
            if (!this.canMoveDown())
                return;
            this.parent.moveChildDown(this);
        };
        this.elementToObject = function () {
            return {
                type: this.type,
                data: this.data,
                htmlId: this.htmlId,
                htmlClass: this.htmlClass,
                htmlStyle: this.htmlStyle,
                isTemplated: this.isTemplated,
                rule: this.rule,
                contentType: this.contentType,
                hasEditor: this.hasEditor
            };
        };
        this.getEditorObject = function () {
            return {};
        };
        this.toObject = function () {
            return self.elementToObject();
        };
        this.copy = function (clipboardData) {
            var text = this.getInnerText();
            clipboardData.setData("text/plain", text);
            var data = this.toObject();
            var json = JSON.stringify(data, null, "\t");
            clipboardData.setData("text/json", json);
        };
        this.cut = function (clipboardData) {
            if (this.canDelete()) {
                this.copy(clipboardData);
                this["delete"]();
            }
        };
        this.paste = function (clipboardData) {
            if (!!this.parent)
                this.parent.paste(clipboardData);
        };
        this.getTemplateStyles = function () {
            var styles = this.templateStyles || {};
            var css = "";
            for (var property in styles) {
                css += property + ":" + styles[property] + ";";
            }
            return css;
        };
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Container = function (allowedChildTypes, children) {
        this.allowedChildTypes = allowedChildTypes;
        this.children = children;
        this.isContainer = true;
        this.containerTemplateStyles = {};
        var self = this;
        this.onChildAdded = function (element) { };
        this.onDescendantAdded = function (element, parentElement) { };
        this.setChildren = function (children) {
            this.children = children;
            _(this.children).each(function (child) {
                child.setParent(self);
            });
        };
        this.setChildren(children);
        this.getIsSealed = function () {
            return _(this.children).any(function (child) {
                return child.isTemplated;
            });
        };
        var _baseSetIsFocused = this.setIsFocused;
        this.setIsFocused = function () {
            if (this.getIsSealed())
                return;
            _baseSetIsFocused.call(this);
        };
        this.addChild = function (child) {
            if (!_(this.children).contains(child) && (_(this.allowedChildTypes).contains(child.type) || child.isContainable))
                this.children.push(child);
            child.setEditor(this.editor);
            child.setIsTemplated(false);
            child.setParent(this);
        };
        this.deleteChild = function (child) {
            var index = _(this.children).indexOf(child);
            if (index >= 0) {
                this.children.splice(index, 1);
                this.editor.recycleBin.add(child);
                if (child.getIsActive())
                    this.editor.activeElement = null;
                if (child.getIsFocused()) {
                    // If the deleted child was focused, try to set new focus to the most appropriate sibling or parent.
                    if (this.children.length > index)
                        this.children[index].setIsFocused();
                    else if (index > 0)
                        this.children[index - 1].setIsFocused();
                    else
                        this.setIsFocused();
                }
            }
        };
        this.moveFocusPrevChild = function (child) {
            if (this.children.length < 2)
                return;
            var index = _(this.children).indexOf(child);
            if (index > 0)
                this.children[index - 1].setIsFocused();
        };
        this.moveFocusNextChild = function (child) {
            if (this.children.length < 2)
                return;
            var index = _(this.children).indexOf(child);
            if (index < this.children.length - 1)
                this.children[index + 1].setIsFocused();
        };
        this.insertChild = function (child, afterChild) {
            if (!_(this.children).contains(child)) {
                var index = Math.max(_(this.children).indexOf(afterChild), 0);
                this.children.splice(index + 1, 0, child);
                child.setEditor(this.editor);
                child.parent = this;
            }
        };
        this.moveChildUp = function (child) {
            if (!this.canMoveChildUp(child))
                return;
            var index = _(this.children).indexOf(child);
            this.children.move(index, index - 1);
        };
        this.moveChildDown = function (child) {
            if (!this.canMoveChildDown(child))
                return;
            var index = _(this.children).indexOf(child);
            this.children.move(index, index + 1);
        };
        this.canMoveChildUp = function (child) {
            var index = _(this.children).indexOf(child);
            return index > 0;
        };
        this.canMoveChildDown = function (child) {
            var index = _(this.children).indexOf(child);
            return index < this.children.length - 1;
        };
        this.childrenToObject = function () {
            return _(this.children).map(function (child) {
                return child.toObject();
            });
        };
        this.getInnerText = function () {
            return _(this.children).reduce(function (memo, child) {
                return memo + "\n" + child.getInnerText();
            }, "");
        };
        this.paste = function (clipboardData) {
            var json = clipboardData.getData("text/json");
            if (!!json) {
                var data = JSON.parse(json);
                var child = LayoutEditor.elementFrom(data);
                this.pasteChild(child);
            }
        };
        this.pasteChild = function (child) {
            if (_(this.allowedChildTypes).contains(child.type) || child.isContainable) {
                this.addChild(child);
                child.setIsFocused();
            }
            else if (!!this.parent)
                this.parent.pasteChild(child);
        };
        this.getContainerTemplateStyles = function () {
            var styles = this.containerTemplateStyles || {};
            var css = "";
            for (var property in styles) {
                css += property + ":" + styles[property] + ";";
            }
            return css;
        };
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Canvas = function (data, htmlId, htmlClass, htmlStyle, isTemplated, rule, children) {
        LayoutEditor.Element.call(this, "Canvas", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);
        LayoutEditor.Container.call(this, ["Canvas", "Grid", "Content"], children);
        this.isContainable = true;
        this.toObject = function () {
            var result = this.elementToObject();
            result.children = this.childrenToObject();
            return result;
        };
    };
    LayoutEditor.Canvas.from = function (value) {
        var result = new LayoutEditor.Canvas(value.data, value.htmlId, value.htmlClass, value.htmlStyle, value.isTemplated, value.rule, LayoutEditor.childrenFrom(value.children));
        result.toolboxIcon = value.toolboxIcon;
        result.toolboxLabel = value.toolboxLabel;
        result.toolboxDescription = value.toolboxDescription;
        return result;
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Grid = function (data, htmlId, htmlClass, htmlStyle, isTemplated, rule, children) {
        LayoutEditor.Element.call(this, "Grid", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);
        LayoutEditor.Container.call(this, ["Row"], children);
        this.toObject = function () {
            var result = this.elementToObject();
            result.children = this.childrenToObject();
            return result;
        };
    };
    LayoutEditor.Grid.from = function (value) {
        var result = new LayoutEditor.Grid(value.data, value.htmlId, value.htmlClass, value.htmlStyle, value.isTemplated, value.rule, LayoutEditor.childrenFrom(value.children));
        result.toolboxIcon = value.toolboxIcon;
        result.toolboxLabel = value.toolboxLabel;
        result.toolboxDescription = value.toolboxDescription;
        return result;
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Row = function (data, htmlId, htmlClass, htmlStyle, isTemplated, rule, children) {
        LayoutEditor.Element.call(this, "Row", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);
        LayoutEditor.Container.call(this, ["Column"], children);
        var _self = this;
        function _getTotalColumnsWidth() {
            return _(_self.children).reduce(function (memo, child) {
                return memo + child.offset + child.width;
            }, 0);
        }
        // Implements a simple algorithm to distribute space (either positive or negative)
        // between the child columns of the row. Negative space is distributed when making
        // room for a new column (e.c. clipboard paste or dropping from the toolbox) while
        // positive space is distributed when filling the grap of a removed column.
        function _distributeSpace(space) {
            if (space == 0)
                return true;
            var undistributedSpace = space;
            if (undistributedSpace < 0) {
                var vacantSpace = 12 - _getTotalColumnsWidth();
                undistributedSpace += vacantSpace;
                if (undistributedSpace > 0)
                    undistributedSpace = 0;
            }
            // If space is negative, try to decrease offsets first.
            while (undistributedSpace < 0 && _(_self.children).any(function (column) { return column.offset > 0; })) {
                for (i = 0; i < _self.children.length && undistributedSpace < 0; i++) {
                    var column = _self.children[i];
                    if (column.offset > 0) {
                        column.offset--;
                        undistributedSpace++;
                    }
                }
            }
            function hasWidth(column) {
                if (undistributedSpace > 0)
                    return column.width < 12;
                else if (undistributedSpace < 0)
                    return column.width > 1;
                return false;
            }
            // Try to distribute remaining space (could be negative or positive) using widths.
            while (undistributedSpace != 0) {
                // Any more column width available for distribution?
                if (!_(_self.children).any(hasWidth))
                    break;
                for (i = 0; i < _self.children.length && undistributedSpace != 0; i++) {
                    var column = _self.children[i % _self.children.length];
                    if (hasWidth(column)) {
                        var delta = undistributedSpace / Math.abs(undistributedSpace);
                        column.width += delta;
                        undistributedSpace -= delta;
                    }
                }
            }
            return undistributedSpace == 0;
        }
        var _isAddingColumn = false;
        this.canAddColumn = function () {
            return this.children.length < 12;
        };
        this.beginAddColumn = function (newColumnWidth) {
            if (!!_isAddingColumn)
                throw new Error("Column add operation is already in progress.");
            _(this.children).each(function (column) {
                column.beginChange();
            });
            if (_distributeSpace(-newColumnWidth)) {
                _isAddingColumn = true;
                return true;
            }
            _(this.children).each(function (column) {
                column.rollbackChange();
            });
            return false;
        };
        this.commitAddColumn = function () {
            if (!_isAddingColumn)
                throw new Error("No column add operation in progress.");
            _(this.children).each(function (column) {
                column.commitChange();
            });
            _isAddingColumn = false;
        };
        this.rollbackAddColumn = function () {
            if (!_isAddingColumn)
                throw new Error("No column add operation in progress.");
            _(this.children).each(function (column) {
                column.rollbackChange();
            });
            _isAddingColumn = false;
        };
        var _baseDeleteChild = this.deleteChild;
        this.deleteChild = function (column) {
            var width = column.width;
            _baseDeleteChild.call(this, column);
            _distributeSpace(width);
        };
        this.canContractColumnRight = function (column, connectAdjacent) {
            var index = _(this.children).indexOf(column);
            if (index >= 0)
                return column.width > 1;
            return false;
        };
        this.contractColumnRight = function (column, connectAdjacent) {
            if (!this.canContractColumnRight(column, connectAdjacent))
                return;
            var index = _(this.children).indexOf(column);
            if (index >= 0) {
                if (column.width > 1) {
                    column.width--;
                    if (this.children.length > index + 1) {
                        var nextColumn = this.children[index + 1];
                        if (connectAdjacent && nextColumn.offset == 0)
                            nextColumn.width++;
                        else
                            nextColumn.offset++;
                    }
                }
            }
        };
        this.canExpandColumnRight = function (column, connectAdjacent) {
            var index = _(this.children).indexOf(column);
            if (index >= 0) {
                if (column.width >= 12)
                    return false;
                if (this.children.length > index + 1) {
                    var nextColumn = this.children[index + 1];
                    if (connectAdjacent && nextColumn.offset == 0)
                        return nextColumn.width > 1;
                    else
                        return nextColumn.offset > 0;
                }
                return _getTotalColumnsWidth() < 12;
            }
            return false;
        };
        this.expandColumnRight = function (column, connectAdjacent) {
            if (!this.canExpandColumnRight(column, connectAdjacent))
                return;
            var index = _(this.children).indexOf(column);
            if (index >= 0) {
                if (this.children.length > index + 1) {
                    var nextColumn = this.children[index + 1];
                    if (connectAdjacent && nextColumn.offset == 0)
                        nextColumn.width--;
                    else
                        nextColumn.offset--;
                }
                column.width++;
            }
        };
        this.canExpandColumnLeft = function (column, connectAdjacent) {
            var index = _(this.children).indexOf(column);
            if (index >= 0) {
                if (column.width >= 12)
                    return false;
                if (index > 0) {
                    var prevColumn = this.children[index - 1];
                    if (connectAdjacent && column.offset == 0)
                        return prevColumn.width > 1;
                }
                return column.offset > 0;
            }
            return false;
        };
        this.expandColumnLeft = function (column, connectAdjacent) {
            if (!this.canExpandColumnLeft(column, connectAdjacent))
                return;
            var index = _(this.children).indexOf(column);
            if (index >= 0) {
                if (index > 0) {
                    var prevColumn = this.children[index - 1];
                    if (connectAdjacent && column.offset == 0)
                        prevColumn.width--;
                    else
                        column.offset--;
                }
                else
                    column.offset--;
                column.width++;
            }
        };
        this.canContractColumnLeft = function (column, connectAdjacent) {
            var index = _(this.children).indexOf(column);
            if (index >= 0)
                return column.width > 1;
            return false;
        };
        this.contractColumnLeft = function (column, connectAdjacent) {
            if (!this.canContractColumnLeft(column, connectAdjacent))
                return;
            var index = _(this.children).indexOf(column);
            if (index >= 0) {
                if (index > 0) {
                    var prevColumn = this.children[index - 1];
                    if (connectAdjacent && column.offset == 0)
                        prevColumn.width++;
                    else
                        column.offset++;
                }
                else
                    column.offset++;
                column.width--;
            }
        };
        this.evenColumns = function () {
            if (this.children.length == 0)
                return;
            var evenWidth = Math.floor(12 / this.children.length);
            _(this.children).each(function (column) {
                column.width = evenWidth;
                column.offset = 0;
            });
            var rest = 12 % this.children.length;
            if (rest > 0)
                _distributeSpace(rest);
        };
        var _basePasteChild = this.pasteChild;
        this.pasteChild = function (child) {
            if (child.type == "Column") {
                if (this.beginAddColumn(child.width)) {
                    this.commitAddColumn();
                    _basePasteChild.call(this, child);
                }
            }
            else if (!!this.parent)
                this.parent.pasteChild(child);
        };
        this.toObject = function () {
            var result = this.elementToObject();
            result.children = this.childrenToObject();
            return result;
        };
    };
    LayoutEditor.Row.from = function (value) {
        var result = new LayoutEditor.Row(value.data, value.htmlId, value.htmlClass, value.htmlStyle, value.isTemplated, value.rule, LayoutEditor.childrenFrom(value.children));
        result.toolboxIcon = value.toolboxIcon;
        result.toolboxLabel = value.toolboxLabel;
        result.toolboxDescription = value.toolboxDescription;
        return result;
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Column = function (data, htmlId, htmlClass, htmlStyle, isTemplated, width, offset, collapsible, rule, children) {
        LayoutEditor.Element.call(this, "Column", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);
        LayoutEditor.Container.call(this, ["Grid", "Content"], children);
        this.width = width;
        this.offset = offset;
        this.collapsible = collapsible;
        var _hasPendingChange = false;
        var _origWidth = 0;
        var _origOffset = 0;
        this.beginChange = function () {
            if (!!_hasPendingChange)
                throw new Error("Column already has a pending change.");
            _hasPendingChange = true;
            _origWidth = this.width;
            _origOffset = this.offset;
        };
        this.commitChange = function () {
            if (!_hasPendingChange)
                throw new Error("Column has no pending change.");
            _origWidth = 0;
            _origOffset = 0;
            _hasPendingChange = false;
        };
        this.rollbackChange = function () {
            if (!_hasPendingChange)
                throw new Error("Column has no pending change.");
            this.width = _origWidth;
            this.offset = _origOffset;
            _origWidth = 0;
            _origOffset = 0;
            _hasPendingChange = false;
        };
        this.canSplit = function () {
            if (this.isTemplated)
                return false;
            return this.width > 1;
        };
        this.split = function () {
            if (!this.canSplit())
                return;
            var newColumnWidth = Math.floor(this.width / 2);
            var newColumn = LayoutEditor.Column.from({
                data: null,
                htmlId: null,
                htmlClass: null,
                htmlStyle: null,
                width: newColumnWidth,
                offset: 0,
                children: []
            });
            this.width = this.width - newColumnWidth;
            this.parent.insertChild(newColumn, this);
            newColumn.setIsFocused();
        };
        this.canContractRight = function (connectAdjacent) {
            if (this.isTemplated)
                return false;
            return this.parent.canContractColumnRight(this, connectAdjacent);
        };
        this.contractRight = function (connectAdjacent) {
            if (!this.canContractRight(connectAdjacent))
                return;
            this.parent.contractColumnRight(this, connectAdjacent);
        };
        this.canExpandRight = function (connectAdjacent) {
            if (this.isTemplated)
                return false;
            return this.parent.canExpandColumnRight(this, connectAdjacent);
        };
        this.expandRight = function (connectAdjacent) {
            if (!this.canExpandRight(connectAdjacent))
                return;
            this.parent.expandColumnRight(this, connectAdjacent);
        };
        this.canExpandLeft = function (connectAdjacent) {
            if (this.isTemplated)
                return false;
            return this.parent.canExpandColumnLeft(this, connectAdjacent);
        };
        this.expandLeft = function (connectAdjacent) {
            if (!this.canExpandLeft(connectAdjacent))
                return;
            this.parent.expandColumnLeft(this, connectAdjacent);
        };
        this.canContractLeft = function (connectAdjacent) {
            if (this.isTemplated)
                return false;
            return this.parent.canContractColumnLeft(this, connectAdjacent);
        };
        this.contractLeft = function (connectAdjacent) {
            if (!this.canContractLeft(connectAdjacent))
                return;
            this.parent.contractColumnLeft(this, connectAdjacent);
        };
        this.toObject = function () {
            var result = this.elementToObject();
            result.width = this.width;
            result.offset = this.offset;
            result.collapsible = this.collapsible;
            result.children = this.childrenToObject();
            return result;
        };
    };
    LayoutEditor.Column.from = function (value) {
        var result = new LayoutEditor.Column(value.data, value.htmlId, value.htmlClass, value.htmlStyle, value.isTemplated, value.width, value.offset, value.collapsible, value.rule, LayoutEditor.childrenFrom(value.children));
        result.toolboxIcon = value.toolboxIcon;
        result.toolboxLabel = value.toolboxLabel;
        result.toolboxDescription = value.toolboxDescription;
        return result;
    };
    LayoutEditor.Column.times = function (value) {
        return _.times(value, function (n) {
            return LayoutEditor.Column.from({
                data: null,
                htmlId: null,
                htmlClass: null,
                isTemplated: false,
                width: 12 / value,
                offset: 0,
                collapsible: null,
                children: []
            });
        });
    };
})(LayoutEditor || (LayoutEditor = {}));
var LayoutEditor;
(function (LayoutEditor) {
    LayoutEditor.Content = function (data, htmlId, htmlClass, htmlStyle, isTemplated, contentType, contentTypeLabel, contentTypeClass, html, hasEditor, rule) {
        LayoutEditor.Element.call(this, "Content", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);
        this.contentType = contentType;
        this.contentTypeLabel = contentTypeLabel;
        this.contentTypeClass = contentTypeClass;
        this.html = html;
        this.hasEditor = hasEditor;
        this.getInnerText = function () {
            return $($.parseHTML("<div>" + this.html + "</div>")).text();
        };
        // This function will be overwritten by the Content directive.
        this.setHtml = function (html) {
            this.html = html;
            this.htmlUnsafe = html;
        };
        var baseToObject = this.toObject;
        this.toObject = function () {
            var result = baseToObject();
            result.contentTypeLabel = this.contentTypeLabel;
            result.contentTypeClass = this.contentTypeClass;
            result.html = this.html;
            return result;
        };
        this.setHtml(html);
    };
    LayoutEditor.Content.from = function (value) {
        var result = new LayoutEditor.Content(value.data, value.htmlId, value.htmlClass, value.htmlStyle, value.isTemplated, value.contentType, value.contentTypeLabel, value.contentTypeClass, value.html, value.hasEditor, value.rule);
        return result;
    };
})(LayoutEditor || (LayoutEditor = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
